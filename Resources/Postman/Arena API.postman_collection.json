{
	"info": {
		"_postman_id": "5d1a3df3-2174-4d84-8514-b7d2767b5fd4",
		"name": "Arena API",
		"description": "This API collection was generated automatically from Arena version 1.5.60.\nRead Arena upgrade changelog to see any API related changes if you are using against later versions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "arena",
			"item": [
				{
					"name": "Get Arena version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/arena/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"arena",
								"version"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns Athletes of a SportEvent",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"version"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"version\": \"cupidatat dolor nostrud qui\"\n}"
						}
					]
				},
				{
					"name": "Get current event",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/arena/current-event",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"arena",
								"current-event"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns the SportEvent",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/current-event",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"current-event"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"country\": {\n  \"flag\": \"Duis ut\",\n  \"id\": 61047202,\n  \"name\": \"nostrud occaecat\",\n  \"alternateName\": \"est nulla consectetur\",\n  \"isoCode\": \"sunt cillum\",\n  \"isoName\": \"aliquip in mag\",\n  \"continent\": \"anim\",\n  \"officialLanguages\": \"Ut commodo a\"\n },\n \"name\": \"cill\",\n \"startDate\": \"nostrud in minim ut\",\n \"endDate\": \"non consectetur ut ea aliqua\",\n \"rankingType\": \"commodo laboris non dolor\",\n \"tournamentType\": \"elit ullamco\",\n \"sessionType\": \"cill\",\n \"eventType\": \"occaecat Lorem sed ad mollit\",\n \"continent\": \"qui ut\",\n \"scoreboardType\": \"Excepteur\",\n \"timezone\": \"in aliqua dolore eu\",\n \"fullName\": \"aute dolor consequat esse\",\n \"date\": \"mollit\",\n \"address\": \"enim adipisicing sed aliquip fugiat\",\n \"fullAddress\": \"dolore laboris incididunt velit\",\n \"isIndividualEvent\": true,\n \"isIndividualLegacyEvent\": true,\n \"isTeamEvent\": true,\n \"isSinglebracketTournament\": false,\n \"isDoublebracketTournament\": true,\n \"isRoundrobinTournament\": false,\n \"isUwwRankingEvent\": false,\n \"isBeachWrestlingTournament\": true,\n \"isWorldChampionships\": true,\n \"shorterNames\": true,\n \"timezoneTimeOffset\": 5983781,\n \"isSyncEnabled\": true,\n \"countReferees\": 33779105,\n \"countFights\": 47009199,\n \"countWeightCategories\": -31886903,\n \"sports\": \"sint in nostrud\",\n \"countWeightCategoriesBySport\": \"elit veniam\",\n \"audiences\": \"ut do\",\n \"countTeams\": -61601491,\n \"countSessions\": -85824020,\n \"countMats\": 88189494,\n \"countPools\": 23376708,\n \"countryIsoCode\": \"dolore est\",\n \"logo\": \"fugiat\",\n \"athlete1Color\": \"ut dolore incididunt exercitation labore\",\n \"athlete1TextColor\": \"elit do in incididunt\",\n \"athlete2Color\": \"amet elit\",\n \"athlete2TextColor\": \"occaecat veniam Ut\",\n \"id\": \"anim Excepteur\",\n \"addressLocality\": \"comm\",\n \"uwwRankingType\": \"sed cillum nostrud\",\n \"image\": \"dolore\",\n \"restTime\": -70247889,\n \"countdown\": true,\n \"lightScoresheet\": true,\n \"copyScoresheet\": 90711072,\n \"bulkScoresheet\": false,\n \"matAssignment\": true,\n \"visible\": false,\n \"localClient\": {\n  \"fullname\": \"laborum ea\",\n  \"id\": \"quis \",\n  \"email\": \"sint quis\",\n  \"name\": \"offi\",\n  \"organization\": \"cons\",\n  \"version\": \"ex sit aliquip\",\n  \"remoteVersion\": \"eiu\",\n  \"maintenance\": false,\n  \"trusted\": false,\n  \"created\": \"in magna co\",\n  \"updated\": \"Lorem magna veniam\"\n },\n \"remote\": {\n  \"id\": -46811,\n  \"apiUrl\": \"dolore culpa sit aliquip\",\n  \"clientId\": \"nostrud dolore reprehenderit Ut\",\n  \"clientSecret\": \"minim qui\",\n  \"apiKey\": \"mollit dolor amet reprehenderit\",\n  \"available\": true,\n  \"paused\": false,\n  \"timeout\": 36334225\n },\n \"remoteStatus\": \"in \",\n \"mats\": [\n  {\n   \"name\": \"elit\",\n   \"sportEventId\": \"n\",\n   \"id\": \"commodo ea\",\n   \"streaming\": \"sunt\"\n  },\n  {\n   \"name\": \"cons\",\n   \"sportEventId\": \"non in ut\",\n   \"id\": \"nostrud irure c\",\n   \"streaming\": \"laborum reprehenderit elit pariatur et\"\n  }\n ],\n \"odfCode\": \"sed proident ut\"\n}"
						},
						{
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/current-event",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"current-event"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Reset Arena to default installation",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/arena/reset",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"arena",
								"reset"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"reset"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"status\": true\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"reset"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Clear Symfony cache",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/arena/clearcache",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"arena",
								"clearcache"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/clearcache",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"clearcache"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/clearcache",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"clearcache"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"status\": true\n}"
						}
					]
				},
				{
					"name": "Download Master version number",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/arena/checkmaster",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"arena",
								"checkmaster"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/checkmaster",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"checkmaster"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/arena/checkmaster",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"arena",
										"checkmaster"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"status\": true\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "athlete",
			"item": [
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "Get all athletes of an Event",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=<string>&limit=50&page=<number>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"athlete",
										":sportEventId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										},
										{
											"key": "limit",
											"value": "50",
											"description": "Number of records to return"
										},
										{
											"key": "page",
											"value": "<number>",
											"description": "Return the page set"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=<string>&limit=50&page=<number>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "page",
													"value": "<number>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns Athletes of a SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=<string>&limit=50&page=<number>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "page",
													"value": "<number>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"athletes\": {\n  \"currentPageNumber\": -2698237,\n  \"numItemsPerPage\": -62288466,\n  \"items\": \"schema type not provided\",\n  \"totalCount\": 84645020,\n  \"paginatorOptions\": \"sint qui voluptate aliqua dolor\",\n  \"customParameters\": \"ut ipsum dolor non\",\n  \"route\": \"pariatur dolore mollit aliquip\",\n  \"params\": \"dolore dolor\",\n  \"pageRange\": -35777943,\n  \"template\": \"nulla Ut exercitation ullamco ea\",\n  \"sortableTemplate\": \"ad nisi enim dolore\",\n  \"filtrationTemplate\": \"veniam cillum\",\n  \"extraViewParams\": [\n   \"non in ut occaecat\",\n   \"ea\"\n  ]\n }\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId?filters=<string>&limit=50&page=<number>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "50"
												},
												{
													"key": "page",
													"value": "<number>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a athlete",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"athlete",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get an athlete by Competition and Person",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"athlete",
										":sportEventId",
										"get",
										":personId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "personId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId",
												"get",
												":personId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "personId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the Athlete",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId",
												"get",
												":personId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "personId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"personId\": \"in\",\n \"sportEventId\": \"reprehenderit Excepteur laboris\",\n \"personFullName\": \"laborum labore\",\n \"athenaPrintId\": \"Ut sint amet enim nisi\",\n \"personFamilyName\": \"ut sed culpa Ut\",\n \"personGivenName\": \"do exercitation et\",\n \"personPhoto\": \"aliq\",\n \"teamFullName\": \"mollit nisi\",\n \"teamName\": \"sed ut do\",\n \"teamAlternateName\": \"sint eiusmod aliquip nulla id\",\n \"teamCountryFlag\": \"nostrud officia id \",\n \"isCompeting\": true,\n \"weightCategories\": [\n  {\n   \"name\": \"in e\",\n   \"audience\": \"qui ut\",\n   \"sport\": \"mollit occaecat aute eu\",\n   \"minWeight\": 368,\n   \"maxWeight\": 307,\n   \"roundsNumber\": 3,\n   \"roundDuration\": 182,\n   \"overtime\": 9850394,\n   \"tournamentType\": \"ad cillum nisi id proident\",\n   \"sportEventId\": \"non ipsum\",\n   \"sportAlternateName\": \"dolore aute esse\",\n   \"sportName\": \"sed exercitation in\",\n   \"fullName\": \"enim laboris\",\n   \"alternateName\": \"cupidatat ipsum aute laborum\",\n   \"shortName\": \"anim aliqua veniam fugiat\",\n   \"sportId\": \"do laborum\",\n   \"audienceId\": \"laboris aliqua quis officia irure\",\n   \"audienceName\": \"esse in dolor\",\n   \"isVeteran\": true,\n   \"audienceShortName\": \"do proident nostrud\",\n   \"isSinglebracketTournament\": false,\n   \"isDoublebracketTournament\": false,\n   \"isRoundrobinTournament\": false,\n   \"isBeltWrestlingCategory\": false,\n   \"isKazakhTournament\": true,\n   \"isBeachWrestlingTournament\": true,\n   \"fightersIsReady\": [\n    {\n     \"athleteId\": \"exercitation ullam\",\n     \"sportEventWeightCategoryId\": \"m\",\n     \"weightCategoryFullName\": \"Ut c\",\n     \"weightCategoryShortName\": \"non et sed\",\n     \"weightCategoryCountFights\": 14183127,\n     \"hasWeightCategoryBlockchainIds\": false,\n     \"weightCategoryCountReadyFighters\": -23959685,\n     \"countFights\": -88576967,\n     \"personId\": \"eiusmod\",\n     \"fullName\": \"in eu\",\n     \"preferedName\": \"ut in enim\",\n     \"displayName\": \"elit sed dolore labore\",\n     \"givenName\": \"in laborum tempor occaecat amet\",\n     \"familyName\": \"tempor anim ut\",\n     \"personPhoto\": \"aliquip ad Excepteur non\",\n     \"athenaPrintId\": \"tempor reprehenderit ex nulla Ut\",\n     \"teamAlternateName\": \"pariatur cillum cupidatat irure id\",\n     \"teamName\": \"irure et\",\n     \"teamCountryFlag\": \"Lorem est\",\n     \"sportEventTeamId\": \"Lorem et eiusmod ut\",\n     \"sportEventId\": \"velit\",\n     \"drawRank\": -87344084,\n     \"robinGroup\": \"cillum culpa\",\n     \"robinGroupRank\": -3158662,\n     \"teamRankingPoint\": -53432019,\n     \"uwwPoint\": 86726416,\n     \"knockOutStatus\": \"consequat voluptate irure ullamco in\",\n     \"hasLostknockOut\": false,\n     \"completed\": -73088268,\n     \"wins\": -56027784,\n     \"losses\": -89826978,\n     \"technicalPointsFor\": -96375181,\n     \"technicalPointsAgainst\": 93367128,\n     \"technicalPointsDiff\": -91347208,\n     \"rankingPointsFor\": -19851906,\n     \"rankingPointsAgainst\": 85837345,\n     \"rankingPointsDiff\": 52685413,\n     \"winsEasy\": 92289215,\n     \"winsSuperiority\": 52239843,\n     \"rank\": 76284320,\n     \"rankRobinGroup\": 70362047,\n     \"fightByOpponent\": {\n      \"sportEventId\": \"consequat\",\n      \"sportEventWeightCategoryId\": \"occaecat laborum\",\n      \"fighter1Id\": \"minim eiusmod eu esse elit\",\n      \"fighter2Id\": \"cillum voluptate in pariatur\",\n      \"team1Name\": \"officia\",\n      \"team1AlternateName\": \"quis\",\n      \"team1FullName\": \"fugiat in deserunt qui\",\n      \"team1CountryFlag\": \"laborum nostrud\",\n      \"team1CountryFlagScoreboard\": \"dolore sed voluptate cillum sit\",\n      \"team1PoolName\": \"Duis consequat enim\",\n      \"team1FightByOpponent\": \"labore est culpa\",\n      \"team2Name\": \"sint deserunt elit\",\n      \"team2AlternateName\": \"non deserunt laboris in est\",\n      \"team2FullName\": \"elit\",\n      \"team2CountryFlag\": \"culpa veniam cupidatat\",\n      \"team2CountryFlagScoreboard\": \"elit labore enim\",\n      \"team2PoolName\": \"elit sed ut officia\",\n      \"team2FightByOpponent\": \"sunt ullamco aute\",\n      \"roundFriendlyName\": \"do est ullamco laborum\",\n      \"displayOrderInRound\": 54338359,\n      \"round1Id\": \"exercitation deserunt aliquip eu\",\n      \"round2Id\": \"v\",\n      \"countReferees\": -37782848,\n      \"sportId\": \"consequ\",\n      \"athlete1Color\": \"sit eu\",\n      \"athlete2Color\": \"aute in laborum commodo\",\n      \"athlete1TextColor\": \"elit\",\n      \"athlete2TextColor\": \"Lorem proident in elit\",\n      \"matName\": \"deserunt laborum\",\n      \"sessionId\": \"cupidatat nulla in minim\",\n      \"sessionName\": \"eu amet voluptate et\",\n      \"technicalPoints\": \"et ad\",\n      \"uploaderFightTest\": \"dolor tempor\",\n      \"technicalPointDetails\": \"aliquip officia voluptate\",\n      \"technicalPointTagStatus\": \"fugiat\",\n      \"technicalPointIds\": \"et nulla consectetur tempor\",\n      \"isCompleted\": true,\n      \"isReady\": true,\n      \"isRobinGroupFight\": true,\n      \"winnerFighter\": \"anim Excepteur ut\",\n      \"winnerTeam\": \"sit occaecat\",\n      \"winnerTeamAlternateName\": \"sed labore in sit\",\n      \"sportEventName\": \"incididunt nulla\",\n      \"sportEventStartDate\": \"culpa in la\",\n      \"sportEventLogo\": \"amet minim \",\n      \"rankingPoint\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"completedDate\": \"laboris id ullamco sit\",\n      \"roundsNumber\": 90552354,\n      \"roundDuration\": -10525822,\n      \"sportAlternateName\": \"incididunt non irure quis\",\n      \"weightCategoryName\": \"esse est aliquip ut ut\",\n      \"weightCategoryAlternateName\": \"commodo irure nos\",\n      \"weightCategoryShortName\": \"sunt culpa officia\",\n      \"weightCategoryMaxWeight\": 42772792,\n      \"weightCategoryFullName\": \"aliqua Excepteur\",\n      \"weightCategoryAverageDuration\": 62680075,\n      \"weightCategoryColor\": \"est\",\n      \"weightCategoryCompleted\": false,\n      \"victoryTypes\": \"Ut consequat\",\n      \"victoryTypesArray\": \"laborum Lorem et\",\n      \"audienceName\": \"ut aliqua\",\n      \"audienceShortName\": \"exercita\",\n      \"sportName\": \"irure et dolore sit mi\",\n      \"injuryTime\": -46505898,\n      \"warnings\": false,\n      \"cautions\": -51597554,\n      \"legFouls\": false,\n      \"activityTime\": true,\n      \"fighter1FullName\": \"nisi laboris incididunt officia\",\n      \"fighter1DisplayName\": \"cupidatat aliquip\",\n      \"fighter1FamilyName\": \"dolor cillum\",\n      \"fighter1GivenName\": \"proident nisi non cillum\",\n      \"fighter1PreferedName\": \"mollit cillum\",\n      \"fighter1DrawRank\": \"ullamco\",\n      \"fighter1RobinRank\": \"Ut\",\n      \"fighter1SeedNumber\": -79035259,\n      \"fighter1AthleteId\": \"cupidatat est elit commodo\",\n      \"fighter1PersonId\": \"adipisicin\",\n      \"fighter1IsSeeded\": false,\n      \"fighter1Status\": 93195077,\n      \"fighter1IsInjured\": false,\n      \"fighter2FullName\": \"magna \",\n      \"fighter2DisplayName\": \"sunt dolor\",\n      \"fighter2FamilyName\": \"proident dolore \",\n      \"fighter2GivenName\": \"velit\",\n      \"fighter2PreferedName\": \"reprehenderit aliquip minim\",\n      \"fighter2DrawRank\": 34433671,\n      \"fighter2RobinRank\": 49966642,\n      \"fighter2SeedNumber\": 29092239,\n      \"fighter2AthleteId\": \"anim velit dolore non deserunt\",\n      \"fighter2PersonId\": \"est culpa\",\n      \"fighter2IsSeeded\": false,\n      \"fighter2Status\": 86060199,\n      \"fighter2IsInjured\": false,\n      \"result\": \"ullamco dolor dolore mollit\",\n      \"victoryType\": \"ut anim exercita\",\n      \"endTime\": -92415844,\n      \"endDate\": \"elit fugiat do\",\n      \"expectedDateStart\": \"et\",\n      \"expectedStartDate\": \"labore irure eu\",\n      \"team1Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"team2Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"rankingPointNiceName\": \"consequat ex ullamco\",\n      \"resultText\": \"incididunt adipisicing\",\n      \"resultTextSmall\": \"amet\",\n      \"roundRenamedSmall\": \"pariatur elit mollit dolore\",\n      \"parentFightNumber1\": -89960104,\n      \"parentFightNumber2\": 47100037,\n      \"fightRefereesWithRole\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"needsRefresh\": false,\n      \"isCountdown\": false,\n      \"id\": \"tempor veniam ea\",\n      \"parentFight1Id\": \"culpa officia aliq\",\n      \"parentFight2Id\": \"mollit consequat aliquip velit\",\n      \"fighter1\": \"consectetur\",\n      \"fighter1RankingPoint\": 3394,\n      \"fighter2\": \"laboris nostrud\",\n      \"fighter2RankingPoint\": 6880,\n      \"refereeGroup\": \"c\",\n      \"sportEventTeam1Id\": \"quis dolor pariatur labore culpa\",\n      \"sportEventTeam2Id\": \"cillum\",\n      \"fightMatId\": \"do\",\n      \"round\": \"inoc\",\n      \"qualifying\": false,\n      \"teamFightId\": \"Ut sit\",\n      \"status\": 41001790,\n      \"rankingCheck\": false,\n      \"technicalCheck\": false,\n      \"weight\": 68998285,\n      \"fightNumber\": 1648,\n      \"roundWeight\": 502,\n      \"repechageWeight\": 4884,\n      \"repechageSection\": 4527,\n      \"displayOrder\": 3106,\n      \"canceled\": \"sunt consectetur culpa veli\",\n      \"fightReferees\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"odfCode\": \"ut tempor consectetur\"\n     },\n     \"isCompeting\": false,\n     \"hasOpenFight\": true,\n     \"isDisqualified\": true,\n     \"isNotRanked\": true,\n     \"isInjured\": true,\n     \"isForfeit\": false,\n     \"isRobinGroupNotRanked\": true,\n     \"id\": \"ad dolore ex\",\n     \"sportEventWeightCategory\": \"occaecat anim\",\n     \"weight\": 62,\n     \"drawNumber\": 165,\n     \"seedNumber\": 8,\n     \"fighterWeight\": -1529435.7388341576,\n     \"points\": 363,\n     \"fighterStatus\": 51429966\n    },\n    {\n     \"athleteId\": \"ullamco\",\n     \"sportEventWeightCategoryId\": \"in incididunt pariatur eiusmod eu\",\n     \"weightCategoryFullName\": \"nulla exercitation veniam dol\",\n     \"weightCategoryShortName\": \"magna ad\",\n     \"weightCategoryCountFights\": 82743282,\n     \"hasWeightCategoryBlockchainIds\": false,\n     \"weightCategoryCountReadyFighters\": -73115150,\n     \"countFights\": 63558587,\n     \"personId\": \"laboris consequat in\",\n     \"fullName\": \"ex non\",\n     \"preferedName\": \"exerci\",\n     \"displayName\": \"magna Duis velit deserunt\",\n     \"givenName\": \"quis consectetur\",\n     \"familyName\": \"eiusmod aliquip ut\",\n     \"personPhoto\": \"aute\",\n     \"athenaPrintId\": \"pariatur exercitation\",\n     \"teamAlternateName\": \"sit aliqua dolore\",\n     \"teamName\": \"ea\",\n     \"teamCountryFlag\": \"tempor ut sit\",\n     \"sportEventTeamId\": \"reprehenderit dolor non\",\n     \"sportEventId\": \"ipsum sint ut id tempor\",\n     \"drawRank\": -84495569,\n     \"robinGroup\": \"exercitation nisi\",\n     \"robinGroupRank\": 57727601,\n     \"teamRankingPoint\": -38744926,\n     \"uwwPoint\": 4141710,\n     \"knockOutStatus\": \"in Excepteur\",\n     \"hasLostknockOut\": false,\n     \"completed\": -13043072,\n     \"wins\": -2567587,\n     \"losses\": 52241444,\n     \"technicalPointsFor\": 70473248,\n     \"technicalPointsAgainst\": -61584930,\n     \"technicalPointsDiff\": 30733730,\n     \"rankingPointsFor\": -5809670,\n     \"rankingPointsAgainst\": 93604664,\n     \"rankingPointsDiff\": -31957759,\n     \"winsEasy\": -19110121,\n     \"winsSuperiority\": -17738272,\n     \"rank\": -91591000,\n     \"rankRobinGroup\": -92103522,\n     \"fightByOpponent\": {\n      \"sportEventId\": \"Lorem dolore cupidatat dolore consectetur\",\n      \"sportEventWeightCategoryId\": \"ut\",\n      \"fighter1Id\": \"minim in laborum laboris ea\",\n      \"fighter2Id\": \"esse tempor\",\n      \"team1Name\": \"anim mollit ex reprehenderit\",\n      \"team1AlternateName\": \"laboris cupidatat ad exercitation\",\n      \"team1FullName\": \"mollit est aliqua velit\",\n      \"team1CountryFlag\": \"ipsum et irure ut\",\n      \"team1CountryFlagScoreboard\": \"laborum\",\n      \"team1PoolName\": \"laborum fugiat aute ut\",\n      \"team1FightByOpponent\": \"voluptate aliquip do et\",\n      \"team2Name\": \"ea veniam ut incididunt\",\n      \"team2AlternateName\": \"Lorem ad Duis dolor\",\n      \"team2FullName\": \"dolor deserunt sunt\",\n      \"team2CountryFlag\": \"in aliquip eu\",\n      \"team2CountryFlagScoreboard\": \"eu labore\",\n      \"team2PoolName\": \"in in incididunt\",\n      \"team2FightByOpponent\": \"mollit nisi Ut\",\n      \"roundFriendlyName\": \"minim incididunt\",\n      \"displayOrderInRound\": -9278041,\n      \"round1Id\": \"in et sed\",\n      \"round2Id\": \"occ\",\n      \"countReferees\": 65702591,\n      \"sportId\": \"ex qui ullamco cillum\",\n      \"athlete1Color\": \"do\",\n      \"athlete2Color\": \"irure est dolor\",\n      \"athlete1TextColor\": \"aliquip ex adipisicing amet ullamco\",\n      \"athlete2TextColor\": \"laborum adipisicing eu ea minim\",\n      \"matName\": \"dolor\",\n      \"sessionId\": \"nostrud exercitation incididunt\",\n      \"sessionName\": \"in eu\",\n      \"technicalPoints\": \"est quis ex Lorem\",\n      \"uploaderFightTest\": \"incididunt ea tempor deserunt exercitation\",\n      \"technicalPointDetails\": \"cillum ips\",\n      \"technicalPointTagStatus\": \"elit consequat esse dolore\",\n      \"technicalPointIds\": \"Ut\",\n      \"isCompleted\": true,\n      \"isReady\": true,\n      \"isRobinGroupFight\": true,\n      \"winnerFighter\": \"anim amet\",\n      \"winnerTeam\": \"Ut adipisicing ex est\",\n      \"winnerTeamAlternateName\": \"Duis do sed\",\n      \"sportEventName\": \"ex Excepteur Ut\",\n      \"sportEventStartDate\": \"Ut\",\n      \"sportEventLogo\": \"quis dolore elit ea\",\n      \"rankingPoint\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"completedDate\": \"dolor aliqua\",\n      \"roundsNumber\": 4386136,\n      \"roundDuration\": -97151285,\n      \"sportAlternateName\": \"consequat pariatur laboris\",\n      \"weightCategoryName\": \"ipsum dolor occaecat\",\n      \"weightCategoryAlternateName\": \"ea anim Lorem aliqua do\",\n      \"weightCategoryShortName\": \"dolor laboris\",\n      \"weightCategoryMaxWeight\": -38996958,\n      \"weightCategoryFullName\": \"Duis mollit\",\n      \"weightCategoryAverageDuration\": 10709879,\n      \"weightCategoryColor\": \"anim non velit\",\n      \"weightCategoryCompleted\": false,\n      \"victoryTypes\": \"minim dolor eiusmod dolor\",\n      \"victoryTypesArray\": \"aute non eu nisi\",\n      \"audienceName\": \"consectetur incididunt dolore\",\n      \"audienceShortName\": \"quis nostrud in cupidatat\",\n      \"sportName\": \"cupidatat dolor\",\n      \"injuryTime\": -79967462,\n      \"warnings\": false,\n      \"cautions\": 9186506,\n      \"legFouls\": false,\n      \"activityTime\": false,\n      \"fighter1FullName\": \"culpa quis\",\n      \"fighter1DisplayName\": \"amet ad Lorem\",\n      \"fighter1FamilyName\": \"nulla\",\n      \"fighter1GivenName\": \"Excepteur culpa non dolor\",\n      \"fighter1PreferedName\": \"veniam ea dolor ad amet\",\n      \"fighter1DrawRank\": \"nostrud magna enim id sed\",\n      \"fighter1RobinRank\": \"voluptate cons\",\n      \"fighter1SeedNumber\": 76208135,\n      \"fighter1AthleteId\": \"consectetur aliqua nulla est\",\n      \"fighter1PersonId\": \"reprehenderit veniam\",\n      \"fighter1IsSeeded\": false,\n      \"fighter1Status\": 91229004,\n      \"fighter1IsInjured\": false,\n      \"fighter2FullName\": \"fugiat anim\",\n      \"fighter2DisplayName\": \"quis\",\n      \"fighter2FamilyName\": \"ut dolore\",\n      \"fighter2GivenName\": \"irure\",\n      \"fighter2PreferedName\": \"nisi consectetur\",\n      \"fighter2DrawRank\": 22325016,\n      \"fighter2RobinRank\": -48060223,\n      \"fighter2SeedNumber\": 18422229,\n      \"fighter2AthleteId\": \"culpa dolor eu ea incididunt\",\n      \"fighter2PersonId\": \"ut ut anim\",\n      \"fighter2IsSeeded\": false,\n      \"fighter2Status\": -14726859,\n      \"fighter2IsInjured\": true,\n      \"result\": \"aute occaecat\",\n      \"victoryType\": \"sunt exercitation ad culpa\",\n      \"endTime\": -56993772,\n      \"endDate\": \"irure u\",\n      \"expectedDateStart\": \"ad voluptate sit ullamco\",\n      \"expectedStartDate\": \"tempor ad aliquip\",\n      \"team1Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"team2Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"rankingPointNiceName\": \"in laborum nulla\",\n      \"resultText\": \"sed in in\",\n      \"resultTextSmall\": \"consectetur ipsum\",\n      \"roundRenamedSmall\": \"Lorem Excepteur voluptate laboris\",\n      \"parentFightNumber1\": 3715290,\n      \"parentFightNumber2\": 37108674,\n      \"fightRefereesWithRole\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"needsRefresh\": true,\n      \"isCountdown\": false,\n      \"id\": \"sit\",\n      \"parentFight1Id\": \"consequat consectetur laboris\",\n      \"parentFight2Id\": \"proident eiusmod aliqua\",\n      \"fighter1\": \"Lorem sed\",\n      \"fighter1RankingPoint\": 1643,\n      \"fighter2\": \"do sed id\",\n      \"fighter2RankingPoint\": 4159,\n      \"refereeGroup\": \"c\",\n      \"sportEventTeam1Id\": \"consectetur mollit\",\n      \"sportEventTeam2Id\": \"Lorem in et culpa\",\n      \"fightMatId\": \"exercitation proident\",\n      \"round\": \"exer\",\n      \"qualifying\": false,\n      \"teamFightId\": \"incididunt\",\n      \"status\": 82899859,\n      \"rankingCheck\": true,\n      \"technicalCheck\": false,\n      \"weight\": 14442231,\n      \"fightNumber\": 8973,\n      \"roundWeight\": 9043,\n      \"repechageWeight\": 525,\n      \"repechageSection\": 1871,\n      \"displayOrder\": 3989,\n      \"canceled\": \"nulla labore adipisicing\",\n      \"fightReferees\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"odfCode\": \"voluptate proiden\"\n     },\n     \"isCompeting\": true,\n     \"hasOpenFight\": true,\n     \"isDisqualified\": true,\n     \"isNotRanked\": true,\n     \"isInjured\": false,\n     \"isForfeit\": false,\n     \"isRobinGroupNotRanked\": false,\n     \"id\": \"cupidatat sit laboris occaecat dolore\",\n     \"sportEventWeightCategory\": \"dolor cillum ut anim\",\n     \"weight\": 199,\n     \"drawNumber\": 122,\n     \"seedNumber\": 21,\n     \"fighterWeight\": 39552134.47461575,\n     \"points\": 32,\n     \"fighterStatus\": -79061059\n    }\n   ],\n   \"countReadyTeams\": 77756718,\n   \"countReadyFighters\": -15970902,\n   \"countReadySeededFighters\": -76591948,\n   \"countSeededFighters\": -51525219,\n   \"countFighters\": -27021783,\n   \"isRepechageSet\": false,\n   \"countTeams\": -1932047,\n   \"countFights\": -60204812,\n   \"perfectNumber\": 78777213,\n   \"isRobin\": false,\n   \"isRobinGrouped\": false,\n   \"id\": \"qui aute Lore\",\n   \"averageDuration\": 16487276,\n   \"color\": \"ull\",\n   \"odfCode\": \"in enim ullamco\",\n   \"uwwRanking\": false,\n   \"blockchainIds\": \"mollit dolor Lorem ipsum dolor\",\n   \"sessionStartDay\": 10822369,\n   \"matAssignment\": -66264532,\n   \"fightersUpdated\": \"ipsum nostrud\"\n  },\n  {\n   \"name\": \"in a\",\n   \"audience\": \"ullamco dolor\",\n   \"sport\": \"Ut occaecat et in amet\",\n   \"minWeight\": 445,\n   \"maxWeight\": 301,\n   \"roundsNumber\": 1,\n   \"roundDuration\": 310,\n   \"overtime\": 3819173,\n   \"tournamentType\": \"aliqua cillum Excepteur\",\n   \"sportEventId\": \"qui sint cupidatat ut\",\n   \"sportAlternateName\": \"ut et id\",\n   \"sportName\": \"consequat ex pariatur est\",\n   \"fullName\": \"eiusmod pariatur\",\n   \"alternateName\": \"nisi minim in\",\n   \"shortName\": \"do tempor Lorem ex eu\",\n   \"sportId\": \"sunt officia dolore laboris\",\n   \"audienceId\": \"non proident\",\n   \"audienceName\": \"sit\",\n   \"isVeteran\": true,\n   \"audienceShortName\": \"anim laboris aliquip veniam\",\n   \"isSinglebracketTournament\": true,\n   \"isDoublebracketTournament\": true,\n   \"isRoundrobinTournament\": true,\n   \"isBeltWrestlingCategory\": false,\n   \"isKazakhTournament\": false,\n   \"isBeachWrestlingTournament\": true,\n   \"fightersIsReady\": [\n    {\n     \"athleteId\": \"dolore eu\",\n     \"sportEventWeightCategoryId\": \"Duis magna nostrud\",\n     \"weightCategoryFullName\": \"in aliquip sunt reprehenderit\",\n     \"weightCategoryShortName\": \"eu in ex ullamco adipisicing\",\n     \"weightCategoryCountFights\": -5648805,\n     \"hasWeightCategoryBlockchainIds\": false,\n     \"weightCategoryCountReadyFighters\": -41689439,\n     \"countFights\": -8889914,\n     \"personId\": \"ut cillum amet incididunt anim\",\n     \"fullName\": \"anim consectetur\",\n     \"preferedName\": \"dolor ullamco sit\",\n     \"displayName\": \"es\",\n     \"givenName\": \"\",\n     \"familyName\": \"laborum commodo\",\n     \"personPhoto\": \"amet elit reprehenderit\",\n     \"athenaPrintId\": \"pariatur proident\",\n     \"teamAlternateName\": \"eiusmod consequat veniam\",\n     \"teamName\": \"cupidatat in \",\n     \"teamCountryFlag\": \"laboris occaecat\",\n     \"sportEventTeamId\": \"dolor laboris\",\n     \"sportEventId\": \"mollit ipsum\",\n     \"drawRank\": 54672452,\n     \"robinGroup\": \"minim cupidatat veniam id\",\n     \"robinGroupRank\": 39593,\n     \"teamRankingPoint\": 48668130,\n     \"uwwPoint\": 37450920,\n     \"knockOutStatus\": \"veniam magna Excepteur\",\n     \"hasLostknockOut\": false,\n     \"completed\": 45855894,\n     \"wins\": -35284950,\n     \"losses\": 65757424,\n     \"technicalPointsFor\": -32500636,\n     \"technicalPointsAgainst\": -1679306,\n     \"technicalPointsDiff\": -14103073,\n     \"rankingPointsFor\": -27859228,\n     \"rankingPointsAgainst\": -63238796,\n     \"rankingPointsDiff\": -39735847,\n     \"winsEasy\": -91216143,\n     \"winsSuperiority\": -25168903,\n     \"rank\": -60094718,\n     \"rankRobinGroup\": -52259509,\n     \"fightByOpponent\": {\n      \"sportEventId\": \"do\",\n      \"sportEventWeightCategoryId\": \"commodo in ut tempor\",\n      \"fighter1Id\": \"ad laborum dolor culpa\",\n      \"fighter2Id\": \"non velit eiusmod id\",\n      \"team1Name\": \"officia\",\n      \"team1AlternateName\": \"labore est\",\n      \"team1FullName\": \"veniam aliqua proident elit\",\n      \"team1CountryFlag\": \"et ipsum dolore\",\n      \"team1CountryFlagScoreboard\": \"sunt\",\n      \"team1PoolName\": \"laborum aute Excepteur irure\",\n      \"team1FightByOpponent\": \"in veniam proident\",\n      \"team2Name\": \"tempor Lorem eiusmod irure\",\n      \"team2AlternateName\": \"consequat incididunt\",\n      \"team2FullName\": \"nu\",\n      \"team2CountryFlag\": \"nisi\",\n      \"team2CountryFlagScoreboard\": \"mollit ipsum\",\n      \"team2PoolName\": \"culpa consectetur sit nisi\",\n      \"team2FightByOpponent\": \"velit\",\n      \"roundFriendlyName\": \"sunt in\",\n      \"displayOrderInRound\": -93063682,\n      \"round1Id\": \"exercitation non\",\n      \"round2Id\": \"proident\",\n      \"countReferees\": 23120882,\n      \"sportId\": \"esse ea minim aliquip\",\n      \"athlete1Color\": \"magna\",\n      \"athlete2Color\": \"amet consequat et\",\n      \"athlete1TextColor\": \"quis officia\",\n      \"athlete2TextColor\": \"dolor\",\n      \"matName\": \"proident occaecat\",\n      \"sessionId\": \"officia\",\n      \"sessionName\": \"adipisicing fugiat\",\n      \"technicalPoints\": \"non ullamco dolore minim\",\n      \"uploaderFightTest\": \"veniam nisi mini\",\n      \"technicalPointDetails\": \"quis sit\",\n      \"technicalPointTagStatus\": \"in Ut irure elit\",\n      \"technicalPointIds\": \"laboris esse elit id\",\n      \"isCompleted\": false,\n      \"isReady\": true,\n      \"isRobinGroupFight\": false,\n      \"winnerFighter\": \"culpa dolor id eiusmod dolore\",\n      \"winnerTeam\": \"veniam\",\n      \"winnerTeamAlternateName\": \"dolor commodo magna\",\n      \"sportEventName\": \"irure cupidatat adipisicing\",\n      \"sportEventStartDate\": \"in Lorem\",\n      \"sportEventLogo\": \"ut reprehenderit in\",\n      \"rankingPoint\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"completedDate\": \"sint enim exercitation eiusmo\",\n      \"roundsNumber\": -91457435,\n      \"roundDuration\": 68305474,\n      \"sportAlternateName\": \"laboris pariatur dolore sed\",\n      \"weightCategoryName\": \"nostrud ut\",\n      \"weightCategoryAlternateName\": \"proident elit ad cupidatat\",\n      \"weightCategoryShortName\": \"in dolor\",\n      \"weightCategoryMaxWeight\": -11534220,\n      \"weightCategoryFullName\": \"voluptate minim elit\",\n      \"weightCategoryAverageDuration\": 41217578,\n      \"weightCategoryColor\": \"ex aliqua adipisicing\",\n      \"weightCategoryCompleted\": true,\n      \"victoryTypes\": \"nisi irure id\",\n      \"victoryTypesArray\": \"deserunt sint\",\n      \"audienceName\": \"Lorem aliqua\",\n      \"audienceShortName\": \"nisi\",\n      \"sportName\": \"enim\",\n      \"injuryTime\": 92805652,\n      \"warnings\": true,\n      \"cautions\": -43505853,\n      \"legFouls\": true,\n      \"activityTime\": false,\n      \"fighter1FullName\": \"incididunt Excepteur velit dolore\",\n      \"fighter1DisplayName\": \"fugiat dolore quis reprehenderit\",\n      \"fighter1FamilyName\": \"Ut officia\",\n      \"fighter1GivenName\": \"Ut officia Excepteur Lorem\",\n      \"fighter1PreferedName\": \"ea cupidatat id ullamco\",\n      \"fighter1DrawRank\": \"esse eiusmod\",\n      \"fighter1RobinRank\": \"proident enim re\",\n      \"fighter1SeedNumber\": -76936173,\n      \"fighter1AthleteId\": \"pariatur id commodo incididunt ut\",\n      \"fighter1PersonId\": \"f\",\n      \"fighter1IsSeeded\": true,\n      \"fighter1Status\": -18424940,\n      \"fighter1IsInjured\": true,\n      \"fighter2FullName\": \"culpa aliquip\",\n      \"fighter2DisplayName\": \"dolor voluptate adipisicing dolor\",\n      \"fighter2FamilyName\": \"ipsum minim\",\n      \"fighter2GivenName\": \"reprehenderit\",\n      \"fighter2PreferedName\": \"sed consectetur sunt\",\n      \"fighter2DrawRank\": 4584780,\n      \"fighter2RobinRank\": 5192949,\n      \"fighter2SeedNumber\": -31232602,\n      \"fighter2AthleteId\": \"ea esse occaecat\",\n      \"fighter2PersonId\": \"magna adipisicing ex ad\",\n      \"fighter2IsSeeded\": false,\n      \"fighter2Status\": 98655813,\n      \"fighter2IsInjured\": false,\n      \"result\": \"conse\",\n      \"victoryType\": \"in sed labore\",\n      \"endTime\": 41743625,\n      \"endDate\": \"consequat veniam ea\",\n      \"expectedDateStart\": \"ut ut fugiat laboris velit\",\n      \"expectedStartDate\": \"Excepteur amet ullamco eu\",\n      \"team1Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"team2Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"rankingPointNiceName\": \"reprehenderit quis ad\",\n      \"resultText\": \"occaecat amet nisi qui\",\n      \"resultTextSmall\": \"consectetur elit\",\n      \"roundRenamedSmall\": \"nisi et\",\n      \"parentFightNumber1\": 34643425,\n      \"parentFightNumber2\": -16688925,\n      \"fightRefereesWithRole\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"needsRefresh\": false,\n      \"isCountdown\": true,\n      \"id\": \"dolore ut fugiat consectetur\",\n      \"parentFight1Id\": \"in Lorem\",\n      \"parentFight2Id\": \"aliqua cillu\",\n      \"fighter1\": \"Duis Lorem\",\n      \"fighter1RankingPoint\": 2081,\n      \"fighter2\": \"id\",\n      \"fighter2RankingPoint\": 7079,\n      \"refereeGroup\": \"v\",\n      \"sportEventTeam1Id\": \"aliquip consequat pa\",\n      \"sportEventTeam2Id\": \"dolore\",\n      \"fightMatId\": \"irure officia magna Duis non\",\n      \"round\": \"occa\",\n      \"qualifying\": true,\n      \"teamFightId\": \"culpa irure\",\n      \"status\": -77565257,\n      \"rankingCheck\": false,\n      \"technicalCheck\": false,\n      \"weight\": 42865610,\n      \"fightNumber\": 7488,\n      \"roundWeight\": 7837,\n      \"repechageWeight\": 5047,\n      \"repechageSection\": 5319,\n      \"displayOrder\": 7638,\n      \"canceled\": \"velit dolore labo\",\n      \"fightReferees\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"odfCode\": \"laborum\"\n     },\n     \"isCompeting\": false,\n     \"hasOpenFight\": true,\n     \"isDisqualified\": false,\n     \"isNotRanked\": true,\n     \"isInjured\": false,\n     \"isForfeit\": false,\n     \"isRobinGroupNotRanked\": false,\n     \"id\": \"sed dolore\",\n     \"sportEventWeightCategory\": \"id\",\n     \"weight\": 489,\n     \"drawNumber\": 26,\n     \"seedNumber\": 13,\n     \"fighterWeight\": 37844161.58080006,\n     \"points\": 27,\n     \"fighterStatus\": 28132701\n    },\n    {\n     \"athleteId\": \"Ut\",\n     \"sportEventWeightCategoryId\": \"Ut ut quis\",\n     \"weightCategoryFullName\": \"irure aliqua id aute dolore\",\n     \"weightCategoryShortName\": \"dolor laboris elit do minim\",\n     \"weightCategoryCountFights\": -41674838,\n     \"hasWeightCategoryBlockchainIds\": true,\n     \"weightCategoryCountReadyFighters\": -72588233,\n     \"countFights\": 99891120,\n     \"personId\": \"velit laborum veniam\",\n     \"fullName\": \"aliqua sit ad Excepteur quis\",\n     \"preferedName\": \"dolor culpa dolore minim\",\n     \"displayName\": \"laboris amet\",\n     \"givenName\": \"dolore adipisicing irure nisi\",\n     \"familyName\": \"consectetur irure quis\",\n     \"personPhoto\": \"dolor Duis proident\",\n     \"athenaPrintId\": \"ipsum non esse enim\",\n     \"teamAlternateName\": \"consequat veniam enim sint\",\n     \"teamName\": \"sed\",\n     \"teamCountryFlag\": \"in et sed\",\n     \"sportEventTeamId\": \"reprehenderit ex\",\n     \"sportEventId\": \"Lorem veniam reprehenderit eiusmod\",\n     \"drawRank\": -22613533,\n     \"robinGroup\": \"Duis enim exerci\",\n     \"robinGroupRank\": 69745111,\n     \"teamRankingPoint\": 85063632,\n     \"uwwPoint\": -22036812,\n     \"knockOutStatus\": \"pariatur Ut in\",\n     \"hasLostknockOut\": false,\n     \"completed\": -66171567,\n     \"wins\": 15826234,\n     \"losses\": 27519422,\n     \"technicalPointsFor\": 30025735,\n     \"technicalPointsAgainst\": 31353221,\n     \"technicalPointsDiff\": -30886964,\n     \"rankingPointsFor\": 26818944,\n     \"rankingPointsAgainst\": -4596638,\n     \"rankingPointsDiff\": 68880137,\n     \"winsEasy\": 40950927,\n     \"winsSuperiority\": 6887908,\n     \"rank\": 20298068,\n     \"rankRobinGroup\": 24651591,\n     \"fightByOpponent\": {\n      \"sportEventId\": \"Duis Ut adi\",\n      \"sportEventWeightCategoryId\": \"aliquip ipsum veniam nulla consequat\",\n      \"fighter1Id\": \"occaecat in ipsum tempor f\",\n      \"fighter2Id\": \"aliquip commodo \",\n      \"team1Name\": \"amet do laborum\",\n      \"team1AlternateName\": \"sed cupidatat consectetur non\",\n      \"team1FullName\": \"in pariatur in Excep\",\n      \"team1CountryFlag\": \"adipisicing consectetur qui\",\n      \"team1CountryFlagScoreboard\": \"est exercitation et\",\n      \"team1PoolName\": \"in dolor Excepteur\",\n      \"team1FightByOpponent\": \"esse\",\n      \"team2Name\": \"ipsum ex cillum sunt\",\n      \"team2AlternateName\": \"dolore ad\",\n      \"team2FullName\": \"nostrud aliqua m\",\n      \"team2CountryFlag\": \"culpa sunt sit\",\n      \"team2CountryFlagScoreboard\": \"ex\",\n      \"team2PoolName\": \"ad esse ea ex\",\n      \"team2FightByOpponent\": \"do\",\n      \"roundFriendlyName\": \"tempor\",\n      \"displayOrderInRound\": 86173006,\n      \"round1Id\": \"culpa cillum aute ad in\",\n      \"round2Id\": \"magna ut\",\n      \"countReferees\": -66894408,\n      \"sportId\": \"ad qui\",\n      \"athlete1Color\": \"ullamco elit do aliqua\",\n      \"athlete2Color\": \"veniam sed aliquip\",\n      \"athlete1TextColor\": \"laborum ad\",\n      \"athlete2TextColor\": \"eiusmod adipisicing esse\",\n      \"matName\": \"minim fugiat\",\n      \"sessionId\": \"velit dolor\",\n      \"sessionName\": \"officia minim esse\",\n      \"technicalPoints\": \"dolor pariatur\",\n      \"uploaderFightTest\": \"occaecat nisi magna qui\",\n      \"technicalPointDetails\": \"ad pariatur adipisicing commodo\",\n      \"technicalPointTagStatus\": \"et\",\n      \"technicalPointIds\": \"ea\",\n      \"isCompleted\": true,\n      \"isReady\": false,\n      \"isRobinGroupFight\": true,\n      \"winnerFighter\": \"nostrud co\",\n      \"winnerTeam\": \"dolore mini\",\n      \"winnerTeamAlternateName\": \"cillum pariatur in aliqua\",\n      \"sportEventName\": \"labore ad ut cillum\",\n      \"sportEventStartDate\": \"cillum labore\",\n      \"sportEventLogo\": \"consequat nostrud nisi\",\n      \"rankingPoint\": {\n       \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"completedDate\": \"adipisicing ex veniam Ut\",\n      \"roundsNumber\": -34293740,\n      \"roundDuration\": 57741872,\n      \"sportAlternateName\": \"dolore qu\",\n      \"weightCategoryName\": \"ea pariatur Duis\",\n      \"weightCategoryAlternateName\": \"qui laboris elit sit\",\n      \"weightCategoryShortName\": \"culpa\",\n      \"weightCategoryMaxWeight\": 40144474,\n      \"weightCategoryFullName\": \"sed nisi enim\",\n      \"weightCategoryAverageDuration\": -29203113,\n      \"weightCategoryColor\": \"dolor laboris\",\n      \"weightCategoryCompleted\": false,\n      \"victoryTypes\": \"incididunt minim sit\",\n      \"victoryTypesArray\": \"ad adipisicing\",\n      \"audienceName\": \"veniam do\",\n      \"audienceShortName\": \"anim qui a\",\n      \"sportName\": \"proident nostrud aliquip\",\n      \"injuryTime\": 40331693,\n      \"warnings\": true,\n      \"cautions\": -60428657,\n      \"legFouls\": true,\n      \"activityTime\": false,\n      \"fighter1FullName\": \"fugiat proident veniam dolore\",\n      \"fighter1DisplayName\": \"adipisicing amet\",\n      \"fighter1FamilyName\": \"qui sunt veniam\",\n      \"fighter1GivenName\": \"veniam pariatur\",\n      \"fighter1PreferedName\": \"cillum voluptate \",\n      \"fighter1DrawRank\": \"dolor\",\n      \"fighter1RobinRank\": \"dolor esse\",\n      \"fighter1SeedNumber\": 6512568,\n      \"fighter1AthleteId\": \"\",\n      \"fighter1PersonId\": \"laborum aliqua cillum sint\",\n      \"fighter1IsSeeded\": true,\n      \"fighter1Status\": 39241111,\n      \"fighter1IsInjured\": true,\n      \"fighter2FullName\": \"aliqua Excepteur reprehenderit ullamco ipsum\",\n      \"fighter2DisplayName\": \"proident officia\",\n      \"fighter2FamilyName\": \"id\",\n      \"fighter2GivenName\": \"sint do in\",\n      \"fighter2PreferedName\": \"consequat voluptate reprehenderit\",\n      \"fighter2DrawRank\": -39292369,\n      \"fighter2RobinRank\": 98274446,\n      \"fighter2SeedNumber\": 96027467,\n      \"fighter2AthleteId\": \"tempor veniam\",\n      \"fighter2PersonId\": \"consectetur aliqua pariatur\",\n      \"fighter2IsSeeded\": true,\n      \"fighter2Status\": -61643486,\n      \"fighter2IsInjured\": false,\n      \"result\": \"veniam aute\",\n      \"victoryType\": \"sunt veniam\",\n      \"endTime\": -70427500,\n      \"endDate\": \"Lorem nisi esse\",\n      \"expectedDateStart\": \"enim dolore do esse\",\n      \"expectedStartDate\": \"deserunt ipsum nisi aute\",\n      \"team1Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"team2Fighters\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"rankingPointNiceName\": \"in\",\n      \"resultText\": \"ut nisi et laboris\",\n      \"resultTextSmall\": \"sint incididunt dolor culpa\",\n      \"roundRenamedSmall\": \"incididunt ex\",\n      \"parentFightNumber1\": 66943670,\n      \"parentFightNumber2\": 92929195,\n      \"fightRefereesWithRole\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"needsRefresh\": false,\n      \"isCountdown\": false,\n      \"id\": \"eu Lorem in sit\",\n      \"parentFight1Id\": \"officia incididunt\",\n      \"parentFight2Id\": \"dolor\",\n      \"fighter1\": \"occaecat pariatur in ipsum\",\n      \"fighter1RankingPoint\": 6800,\n      \"fighter2\": \"incididunt proident do ipsum\",\n      \"fighter2RankingPoint\": 9233,\n      \"refereeGroup\": \"u\",\n      \"sportEventTeam1Id\": \"culpa sit nostrud elit\",\n      \"sportEventTeam2Id\": \"non eiusmod veniam\",\n      \"fightMatId\": \"sunt Lorem aliquip\",\n      \"round\": \"non \",\n      \"qualifying\": false,\n      \"teamFightId\": \"Duis anim Ut nostrud\",\n      \"status\": 27077226,\n      \"rankingCheck\": false,\n      \"technicalCheck\": false,\n      \"weight\": 68051740,\n      \"fightNumber\": 9236,\n      \"roundWeight\": 3589,\n      \"repechageWeight\": 8364,\n      \"repechageSection\": 9243,\n      \"displayOrder\": 2516,\n      \"canceled\": \"sit\",\n      \"fightReferees\": [\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       }\n      ],\n      \"odfCode\": \"mollit enim adipisicing\"\n     },\n     \"isCompeting\": false,\n     \"hasOpenFight\": false,\n     \"isDisqualified\": false,\n     \"isNotRanked\": true,\n     \"isInjured\": true,\n     \"isForfeit\": true,\n     \"isRobinGroupNotRanked\": false,\n     \"id\": \"qui ut ipsum\",\n     \"sportEventWeightCategory\": \"dolor deserunt aliqua\",\n     \"weight\": 31,\n     \"drawNumber\": 60,\n     \"seedNumber\": 15,\n     \"fighterWeight\": -78456145.50857528,\n     \"points\": 238,\n     \"fighterStatus\": 64421912\n    }\n   ],\n   \"countReadyTeams\": 13351856,\n   \"countReadyFighters\": 39079488,\n   \"countReadySeededFighters\": -93984376,\n   \"countSeededFighters\": 65607941,\n   \"countFighters\": 32210884,\n   \"isRepechageSet\": true,\n   \"countTeams\": 75926730,\n   \"countFights\": -80469767,\n   \"perfectNumber\": 12298108,\n   \"isRobin\": true,\n   \"isRobinGrouped\": false,\n   \"id\": \"occaecat\",\n   \"averageDuration\": 57820744,\n   \"color\": \"v\",\n   \"odfCode\": \"sunt mollit\",\n   \"uwwRanking\": true,\n   \"blockchainIds\": \"occaecat\",\n   \"sessionStartDay\": 54309340,\n   \"matAssignment\": -63386983,\n   \"fightersUpdated\": \"velit amet\"\n  }\n ],\n \"id\": \"tempor eu labore\",\n \"sportEventTeamId\": \"enim cillum Lorem in tempor\",\n \"disqualified\": false\n}"
								},
								{
									"name": "Athlete not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/:sportEventId/get/:personId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												":sportEventId",
												"get",
												":personId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "personId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "team",
							"item": [
								{
									"name": "Add a sport team",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id",
												"team"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Remove sport team",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id",
												"team",
												"unset"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"athlete",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get an athlete",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"athlete",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns Athletes of a SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"athlete\": {\n  \"personId\": \"nisi in sed id\",\n  \"sportEventId\": \"do sint sunt consecte\",\n  \"personFullName\": \"cillum\",\n  \"athenaPrintId\": \"mollit et consectetur occaecat\",\n  \"personFamilyName\": \"voluptate in dolor ipsum sint\",\n  \"personGivenName\": \"in adipisicing\",\n  \"personPhoto\": \"sed labore\",\n  \"teamFullName\": \"commodo anim ex\",\n  \"teamName\": \"irure\",\n  \"teamAlternateName\": \"ut ut\",\n  \"teamCountryFlag\": \"commodo deserunt qui tempor\",\n  \"isCompeting\": true,\n  \"weightCategories\": [\n   {\n    \"name\": \"null\",\n    \"audience\": \"magna commodo esse laboris\",\n    \"sport\": \"dolore commodo enim\",\n    \"minWeight\": 34,\n    \"maxWeight\": 475,\n    \"roundsNumber\": 7,\n    \"roundDuration\": 472,\n    \"overtime\": -64866646,\n    \"tournamentType\": \"non exercitation mollit veniam\",\n    \"sportEventId\": \"esse dolor eu\",\n    \"sportAlternateName\": \"ex cupidatat labore in elit\",\n    \"sportName\": \"sed dolor Excepteur laborum\",\n    \"fullName\": \"non enim dolor\",\n    \"alternateName\": \"proident Lorem\",\n    \"shortName\": \"do occaecat\",\n    \"sportId\": \"dolor elit\",\n    \"audienceId\": \"non magna ad sed esse\",\n    \"audienceName\": \"ex ipsum\",\n    \"isVeteran\": false,\n    \"audienceShortName\": \"proident veniam in\",\n    \"isSinglebracketTournament\": true,\n    \"isDoublebracketTournament\": false,\n    \"isRoundrobinTournament\": true,\n    \"isBeltWrestlingCategory\": true,\n    \"isKazakhTournament\": false,\n    \"isBeachWrestlingTournament\": false,\n    \"fightersIsReady\": [\n     {\n      \"athleteId\": \"aute sint do ex Excepteur\",\n      \"sportEventWeightCategoryId\": \"veniam aliqua ut\",\n      \"weightCategoryFullName\": \"est exercitation aute\",\n      \"weightCategoryShortName\": \"sint dolore dolore qui\",\n      \"weightCategoryCountFights\": 26972077,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": 61742240,\n      \"countFights\": -39108758,\n      \"personId\": \"reprehenderit laboris laborum sint\",\n      \"fullName\": \"anim\",\n      \"preferedName\": \"do laborum id\",\n      \"displayName\": \"sunt exercitation\",\n      \"givenName\": \"amet fugiat ipsum aute\",\n      \"familyName\": \"veniam cillum ex\",\n      \"personPhoto\": \"aute ex sint\",\n      \"athenaPrintId\": \"nostrud proident voluptate\",\n      \"teamAlternateName\": \"laborum nostrud laboris cillum\",\n      \"teamName\": \"occaecat non\",\n      \"teamCountryFlag\": \"ut in anim Ut deserunt\",\n      \"sportEventTeamId\": \"et deserunt\",\n      \"sportEventId\": \"magna irure\",\n      \"drawRank\": 78745238,\n      \"robinGroup\": \"in aute esse do\",\n      \"robinGroupRank\": 63577420,\n      \"teamRankingPoint\": -28586822,\n      \"uwwPoint\": -89742972,\n      \"knockOutStatus\": \"commodo Excepteur ipsum\",\n      \"hasLostknockOut\": true,\n      \"completed\": -11024924,\n      \"wins\": 15947261,\n      \"losses\": 59233088,\n      \"technicalPointsFor\": 25128745,\n      \"technicalPointsAgainst\": -2951885,\n      \"technicalPointsDiff\": -17334956,\n      \"rankingPointsFor\": -78039809,\n      \"rankingPointsAgainst\": -90629042,\n      \"rankingPointsDiff\": -50399119,\n      \"winsEasy\": -53649522,\n      \"winsSuperiority\": 28041874,\n      \"rank\": -57146861,\n      \"rankRobinGroup\": -25516429,\n      \"fightByOpponent\": {\n       \"sportEventId\": \"cupidatat aliqua l\",\n       \"sportEventWeightCategoryId\": \"voluptate anim aute\",\n       \"fighter1Id\": \"amet non qui ad enim\",\n       \"fighter2Id\": \"anim sint \",\n       \"team1Name\": \"nostrud cillum officia ven\",\n       \"team1AlternateName\": \"qui in\",\n       \"team1FullName\": \"tempor\",\n       \"team1CountryFlag\": \"veniam in tempor aliqua\",\n       \"team1CountryFlagScoreboard\": \"culpa est cupidatat tempor\",\n       \"team1PoolName\": \"est\",\n       \"team1FightByOpponent\": \"quis laborum occaecat elit\",\n       \"team2Name\": \"deserunt\",\n       \"team2AlternateName\": \"nostrud\",\n       \"team2FullName\": \"incididunt aliquip occaecat aute\",\n       \"team2CountryFlag\": \"aute non\",\n       \"team2CountryFlagScoreboard\": \"officia anim\",\n       \"team2PoolName\": \"est\",\n       \"team2FightByOpponent\": \"ad\",\n       \"roundFriendlyName\": \"elit aute velit\",\n       \"displayOrderInRound\": 33762997,\n       \"round1Id\": \"voluptate\",\n       \"round2Id\": \"exercitation \",\n       \"countReferees\": 44597353,\n       \"sportId\": \"magna non\",\n       \"athlete1Color\": \"commodo aliquip\",\n       \"athlete2Color\": \"nulla id quis incididunt aliqua\",\n       \"athlete1TextColor\": \"laboris exercitation voluptate qui pariatur\",\n       \"athlete2TextColor\": \"in et\",\n       \"matName\": \"dolor velit L\",\n       \"sessionId\": \"do dolor et\",\n       \"sessionName\": \"do ad\",\n       \"technicalPoints\": \"sunt ut\",\n       \"uploaderFightTest\": \"eiusmod minim Duis\",\n       \"technicalPointDetails\": \"cillum\",\n       \"technicalPointTagStatus\": \"do proident la\",\n       \"technicalPointIds\": \"ea laboris velit eiusmod\",\n       \"isCompleted\": true,\n       \"isReady\": false,\n       \"isRobinGroupFight\": false,\n       \"winnerFighter\": \"ut sit\",\n       \"winnerTeam\": \"nostrud sed Lorem cupidatat\",\n       \"winnerTeamAlternateName\": \"tempor\",\n       \"sportEventName\": \"sint sit ullamco\",\n       \"sportEventStartDate\": \"aute non\",\n       \"sportEventLogo\": \"aliquip cupidatat\",\n       \"rankingPoint\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"completedDate\": \"enim do amet\",\n       \"roundsNumber\": -23905861,\n       \"roundDuration\": 34152827,\n       \"sportAlternateName\": \"sed\",\n       \"weightCategoryName\": \"officia cupidatat\",\n       \"weightCategoryAlternateName\": \"ut anim\",\n       \"weightCategoryShortName\": \"et commodo\",\n       \"weightCategoryMaxWeight\": -63017538,\n       \"weightCategoryFullName\": \"Duis exercitation Ut dolor dolore\",\n       \"weightCategoryAverageDuration\": 6014358,\n       \"weightCategoryColor\": \"aliquip proident ipsum Duis incididunt\",\n       \"weightCategoryCompleted\": true,\n       \"victoryTypes\": \"proident non minim\",\n       \"victoryTypesArray\": \"qui nisi\",\n       \"audienceName\": \"eu deserunt nulla commodo adipisicing\",\n       \"audienceShortName\": \"adipisi\",\n       \"sportName\": \"exercitation \",\n       \"injuryTime\": 98539927,\n       \"warnings\": true,\n       \"cautions\": -10727315,\n       \"legFouls\": false,\n       \"activityTime\": false,\n       \"fighter1FullName\": \"fugiat anim\",\n       \"fighter1DisplayName\": \"quis\",\n       \"fighter1FamilyName\": \"ullamco sunt culpa nisi\",\n       \"fighter1GivenName\": \"id culpa\",\n       \"fighter1PreferedName\": \"in dolor sit ullamco\",\n       \"fighter1DrawRank\": \"culpa ex pariatur\",\n       \"fighter1RobinRank\": \"nostrud dolore incididunt pariatur\",\n       \"fighter1SeedNumber\": 6750674,\n       \"fighter1AthleteId\": \"aliqua enim non\",\n       \"fighter1PersonId\": \"magna est\",\n       \"fighter1IsSeeded\": false,\n       \"fighter1Status\": 29344039,\n       \"fighter1IsInjured\": true,\n       \"fighter2FullName\": \"commodo minim dolor\",\n       \"fighter2DisplayName\": \"sint c\",\n       \"fighter2FamilyName\": \"in\",\n       \"fighter2GivenName\": \"ut Excepteur irure\",\n       \"fighter2PreferedName\": \"pariatur dol\",\n       \"fighter2DrawRank\": -43976821,\n       \"fighter2RobinRank\": -39971809,\n       \"fighter2SeedNumber\": 40521057,\n       \"fighter2AthleteId\": \"ut id in\",\n       \"fighter2PersonId\": \"dolore aliqua ipsum\",\n       \"fighter2IsSeeded\": false,\n       \"fighter2Status\": 7002433,\n       \"fighter2IsInjured\": true,\n       \"result\": \"sed mol\",\n       \"victoryType\": \"mo\",\n       \"endTime\": -44665078,\n       \"endDate\": \"ullamco fugiat\",\n       \"expectedDateStart\": \"ex nostrud non deserunt\",\n       \"expectedStartDate\": \"consequat esse sed\",\n       \"team1Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"team2Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"rankingPointNiceName\": \"consequat dolor sint\",\n       \"resultText\": \"qui non exercitation\",\n       \"resultTextSmall\": \"reprehenderit commodo\",\n       \"roundRenamedSmall\": \"sed amet ad\",\n       \"parentFightNumber1\": 70717931,\n       \"parentFightNumber2\": 77664146,\n       \"fightRefereesWithRole\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"needsRefresh\": false,\n       \"isCountdown\": false,\n       \"id\": \"qui minim Excepteur\",\n       \"parentFight1Id\": \"ut qui reprehenderit esse\",\n       \"parentFight2Id\": \"id\",\n       \"fighter1\": \"fugiat aliqua nisi id\",\n       \"fighter1RankingPoint\": 5840,\n       \"fighter2\": \"anim reprehenderit e\",\n       \"fighter2RankingPoint\": 4569,\n       \"refereeGroup\": \"p\",\n       \"sportEventTeam1Id\": \"in ad\",\n       \"sportEventTeam2Id\": \"officia\",\n       \"fightMatId\": \"sit anim sed dolor\",\n       \"round\": \"sunt\",\n       \"qualifying\": false,\n       \"teamFightId\": \"commodo\",\n       \"status\": -92009781,\n       \"rankingCheck\": true,\n       \"technicalCheck\": false,\n       \"weight\": 59403781,\n       \"fightNumber\": 6599,\n       \"roundWeight\": 6218,\n       \"repechageWeight\": 4974,\n       \"repechageSection\": 809,\n       \"displayOrder\": 8180,\n       \"canceled\": \"et fugiat irure\",\n       \"fightReferees\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"odfCode\": \"cillum pariatur\"\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": false,\n      \"isNotRanked\": true,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"id\": \"consectetur ex labore\",\n      \"sportEventWeightCategory\": \"consectetur et ut\",\n      \"weight\": 183,\n      \"drawNumber\": 199,\n      \"seedNumber\": 13,\n      \"fighterWeight\": 58593994.40762508,\n      \"points\": 243,\n      \"fighterStatus\": -44298662\n     },\n     {\n      \"athleteId\": \"proident anim enim ex\",\n      \"sportEventWeightCategoryId\": \"e\",\n      \"weightCategoryFullName\": \"tempor sint\",\n      \"weightCategoryShortName\": \"proident dolore\",\n      \"weightCategoryCountFights\": -52770890,\n      \"hasWeightCategoryBlockchainIds\": true,\n      \"weightCategoryCountReadyFighters\": 10426855,\n      \"countFights\": -63178482,\n      \"personId\": \"l\",\n      \"fullName\": \"consequat\",\n      \"preferedName\": \"eu anim fugiat cupidatat nisi\",\n      \"displayName\": \"occaecat exercitation nulla\",\n      \"givenName\": \"aute dolore id\",\n      \"familyName\": \"fugiat nostrud mollit\",\n      \"personPhoto\": \"Duis fugiat tempor ut ullamco\",\n      \"athenaPrintId\": \"magna non ad\",\n      \"teamAlternateName\": \"magna\",\n      \"teamName\": \"nulla in velit sed adipisicing\",\n      \"teamCountryFlag\": \"dolor ea ullamco\",\n      \"sportEventTeamId\": \"nisi\",\n      \"sportEventId\": \"elit\",\n      \"drawRank\": 68151480,\n      \"robinGroup\": \"officia veniam ipsum Excepteur\",\n      \"robinGroupRank\": 40949484,\n      \"teamRankingPoint\": 74620242,\n      \"uwwPoint\": 95179047,\n      \"knockOutStatus\": \"ut deserunt incididunt in\",\n      \"hasLostknockOut\": false,\n      \"completed\": -59331801,\n      \"wins\": 66989483,\n      \"losses\": -32819246,\n      \"technicalPointsFor\": 37672710,\n      \"technicalPointsAgainst\": 47903449,\n      \"technicalPointsDiff\": -87385669,\n      \"rankingPointsFor\": -55708922,\n      \"rankingPointsAgainst\": 93136230,\n      \"rankingPointsDiff\": 7619742,\n      \"winsEasy\": -66164446,\n      \"winsSuperiority\": 37862267,\n      \"rank\": 95262645,\n      \"rankRobinGroup\": -99285066,\n      \"fightByOpponent\": {\n       \"sportEventId\": \"i\",\n       \"sportEventWeightCategoryId\": \"mollit dolor reprehenderit id\",\n       \"fighter1Id\": \"et deserunt Duis\",\n       \"fighter2Id\": \"ea enim\",\n       \"team1Name\": \"ipsum minim est Exc\",\n       \"team1AlternateName\": \"amet quis ad\",\n       \"team1FullName\": \"tempor Excepteur sit \",\n       \"team1CountryFlag\": \"veniam\",\n       \"team1CountryFlagScoreboard\": \"dolore velit non\",\n       \"team1PoolName\": \"enim anim amet reprehenderit\",\n       \"team1FightByOpponent\": \"sint incididunt et sit\",\n       \"team2Name\": \"nisi consectetur\",\n       \"team2AlternateName\": \"quis laboris non officia\",\n       \"team2FullName\": \"ipsum dolor\",\n       \"team2CountryFlag\": \"c\",\n       \"team2CountryFlagScoreboard\": \"amet aute sunt anim ea\",\n       \"team2PoolName\": \"irure ipsum\",\n       \"team2FightByOpponent\": \"cillum tempor nostrud esse\",\n       \"roundFriendlyName\": \"cupidatat laborum aliquip\",\n       \"displayOrderInRound\": 92189294,\n       \"round1Id\": \"elit ullamco Excepteur dolore\",\n       \"round2Id\": \"consectetur ut officia\",\n       \"countReferees\": -77493374,\n       \"sportId\": \"laborum\",\n       \"athlete1Color\": \"in enim sed\",\n       \"athlete2Color\": \"eiusmod\",\n       \"athlete1TextColor\": \"aute aliqua cillum\",\n       \"athlete2TextColor\": \"esse eu Ut\",\n       \"matName\": \"ipsum enim dolore\",\n       \"sessionId\": \"eiusmod velit\",\n       \"sessionName\": \"reprehenderit sint dolor Duis velit\",\n       \"technicalPoints\": \"sed occaecat qui\",\n       \"uploaderFightTest\": \"proident cillum culpa eiusmod\",\n       \"technicalPointDetails\": \"do id mollit comm\",\n       \"technicalPointTagStatus\": \"ullamco\",\n       \"technicalPointIds\": \"sed \",\n       \"isCompleted\": true,\n       \"isReady\": true,\n       \"isRobinGroupFight\": true,\n       \"winnerFighter\": \"ex enim labore mollit\",\n       \"winnerTeam\": \"occaecat consequat \",\n       \"winnerTeamAlternateName\": \"laboris officia reprehen\",\n       \"sportEventName\": \"exercitation in elit\",\n       \"sportEventStartDate\": \"Duis aliqua\",\n       \"sportEventLogo\": \"qui\",\n       \"rankingPoint\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"completedDate\": \"cupidatat ea\",\n       \"roundsNumber\": -46310189,\n       \"roundDuration\": -59149779,\n       \"sportAlternateName\": \"ad et anim amet\",\n       \"weightCategoryName\": \"in mollit nostrud ex dolor\",\n       \"weightCategoryAlternateName\": \"mollit minim fugiat reprehender\",\n       \"weightCategoryShortName\": \"mollit esse\",\n       \"weightCategoryMaxWeight\": 21818695,\n       \"weightCategoryFullName\": \"\",\n       \"weightCategoryAverageDuration\": -12846132,\n       \"weightCategoryColor\": \"elit irure\",\n       \"weightCategoryCompleted\": false,\n       \"victoryTypes\": \"minim et in\",\n       \"victoryTypesArray\": \"esse aliquip ad\",\n       \"audienceName\": \"ut veniam\",\n       \"audienceShortName\": \"tem\",\n       \"sportName\": \"id aute\",\n       \"injuryTime\": 27811219,\n       \"warnings\": false,\n       \"cautions\": -65954330,\n       \"legFouls\": true,\n       \"activityTime\": false,\n       \"fighter1FullName\": \"ullamco aliqua eiusmod\",\n       \"fighter1DisplayName\": \"esse id\",\n       \"fighter1FamilyName\": \"quis\",\n       \"fighter1GivenName\": \"tempor proident esse\",\n       \"fighter1PreferedName\": \"occaecat elit fugiat incididunt\",\n       \"fighter1DrawRank\": \"fugiat\",\n       \"fighter1RobinRank\": \"proident dolor laboris sed incididunt\",\n       \"fighter1SeedNumber\": -54644087,\n       \"fighter1AthleteId\": \"in occaecat sed\",\n       \"fighter1PersonId\": \"aute cillum laborum Ut\",\n       \"fighter1IsSeeded\": false,\n       \"fighter1Status\": -54067172,\n       \"fighter1IsInjured\": false,\n       \"fighter2FullName\": \"t\",\n       \"fighter2DisplayName\": \"voluptate dolor\",\n       \"fighter2FamilyName\": \"officia m\",\n       \"fighter2GivenName\": \"do ullamco ut\",\n       \"fighter2PreferedName\": \"proident cupidatat \",\n       \"fighter2DrawRank\": 17271711,\n       \"fighter2RobinRank\": 55864940,\n       \"fighter2SeedNumber\": -94690287,\n       \"fighter2AthleteId\": \"do ut\",\n       \"fighter2PersonId\": \"ipsum enim non\",\n       \"fighter2IsSeeded\": true,\n       \"fighter2Status\": -52231029,\n       \"fighter2IsInjured\": true,\n       \"result\": \"Ut\",\n       \"victoryType\": \"sed ut\",\n       \"endTime\": -70631361,\n       \"endDate\": \"dolor ipsum\",\n       \"expectedDateStart\": \"culpa esse\",\n       \"expectedStartDate\": \"irure consequat dolor ad\",\n       \"team1Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"team2Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"rankingPointNiceName\": \"consequat\",\n       \"resultText\": \"in dolore commodo\",\n       \"resultTextSmall\": \"aute pariatur non\",\n       \"roundRenamedSmall\": \"nulla dolore ut e\",\n       \"parentFightNumber1\": -69621272,\n       \"parentFightNumber2\": 87552450,\n       \"fightRefereesWithRole\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"needsRefresh\": true,\n       \"isCountdown\": false,\n       \"id\": \"incididunt dolore et labore\",\n       \"parentFight1Id\": \"nulla\",\n       \"parentFight2Id\": \"deserunt dolore ullamco laborum\",\n       \"fighter1\": \"dolor deserunt\",\n       \"fighter1RankingPoint\": 8839,\n       \"fighter2\": \"consequat sint\",\n       \"fighter2RankingPoint\": 8391,\n       \"refereeGroup\": \"d\",\n       \"sportEventTeam1Id\": \"aliquip proident irure\",\n       \"sportEventTeam2Id\": \"enim commodo voluptate nulla anim\",\n       \"fightMatId\": \"et laboris sit labore\",\n       \"round\": \"pari\",\n       \"qualifying\": false,\n       \"teamFightId\": \"est adipisicing officia\",\n       \"status\": 90931689,\n       \"rankingCheck\": true,\n       \"technicalCheck\": false,\n       \"weight\": 19827498,\n       \"fightNumber\": 5333,\n       \"roundWeight\": 6930,\n       \"repechageWeight\": 8291,\n       \"repechageSection\": 3668,\n       \"displayOrder\": 3289,\n       \"canceled\": \"Duis eu cupidatat sed\",\n       \"fightReferees\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"odfCode\": \"ut id\"\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": true,\n      \"isDisqualified\": true,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": false,\n      \"id\": \"amet sunt adipisicing velit u\",\n      \"sportEventWeightCategory\": \"eiusmod sint ut\",\n      \"weight\": 29,\n      \"drawNumber\": 287,\n      \"seedNumber\": 15,\n      \"fighterWeight\": 71938350.86587986,\n      \"points\": 0,\n      \"fighterStatus\": 56670567\n     }\n    ],\n    \"countReadyTeams\": -76463682,\n    \"countReadyFighters\": -13747041,\n    \"countReadySeededFighters\": -19604412,\n    \"countSeededFighters\": 68327565,\n    \"countFighters\": -39757440,\n    \"isRepechageSet\": true,\n    \"countTeams\": -17547555,\n    \"countFights\": -24145347,\n    \"perfectNumber\": -35386803,\n    \"isRobin\": false,\n    \"isRobinGrouped\": true,\n    \"id\": \"reprehenderit esse ex ut\",\n    \"averageDuration\": 57998586,\n    \"color\": \"\",\n    \"odfCode\": \"adipisicing commodo cupidatat\",\n    \"uwwRanking\": true,\n    \"blockchainIds\": \"dolore ea sint\",\n    \"sessionStartDay\": -71888742,\n    \"matAssignment\": 92035036,\n    \"fightersUpdated\": \"ut adipisicing proident\"\n   },\n   {\n    \"name\": \"labo\",\n    \"audience\": \"aute deserunt ut culpa\",\n    \"sport\": \"consectetur mollit\",\n    \"minWeight\": 463,\n    \"maxWeight\": 495,\n    \"roundsNumber\": 9,\n    \"roundDuration\": 99,\n    \"overtime\": -55691045,\n    \"tournamentType\": \"id est dolor qui velit\",\n    \"sportEventId\": \"culpa occaecat ex sunt\",\n    \"sportAlternateName\": \"eu\",\n    \"sportName\": \"officia in commodo\",\n    \"fullName\": \"proident magna\",\n    \"alternateName\": \"sit sunt\",\n    \"shortName\": \"irure\",\n    \"sportId\": \"proide\",\n    \"audienceId\": \"et Excepteur\",\n    \"audienceName\": \"irure dolore consequat ullamco deserunt\",\n    \"isVeteran\": false,\n    \"audienceShortName\": \"veniam anim\",\n    \"isSinglebracketTournament\": false,\n    \"isDoublebracketTournament\": false,\n    \"isRoundrobinTournament\": true,\n    \"isBeltWrestlingCategory\": true,\n    \"isKazakhTournament\": false,\n    \"isBeachWrestlingTournament\": false,\n    \"fightersIsReady\": [\n     {\n      \"athleteId\": \"sed esse ex nisi dolore\",\n      \"sportEventWeightCategoryId\": \"sed anim aliq\",\n      \"weightCategoryFullName\": \"consectetur id\",\n      \"weightCategoryShortName\": \"consequat Lorem deserunt est\",\n      \"weightCategoryCountFights\": 52130207,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": -63539453,\n      \"countFights\": -14419807,\n      \"personId\": \"sint culpa eiusmod nulla magna\",\n      \"fullName\": \"labore ad exercitation\",\n      \"preferedName\": \"amet\",\n      \"displayName\": \"officia sunt Ut\",\n      \"givenName\": \"officia ad laborum e\",\n      \"familyName\": \"culpa quis cupidatat\",\n      \"personPhoto\": \"Duis \",\n      \"athenaPrintId\": \"ipsum in pariatur non\",\n      \"teamAlternateName\": \"labore cillum ad aute dolor\",\n      \"teamName\": \"aliquip amet do\",\n      \"teamCountryFlag\": \"officia dolor labore\",\n      \"sportEventTeamId\": \"cillum laborum nulla\",\n      \"sportEventId\": \"in ut\",\n      \"drawRank\": -91260666,\n      \"robinGroup\": \"commodo ea eiusmod laborum\",\n      \"robinGroupRank\": -7548065,\n      \"teamRankingPoint\": 59064641,\n      \"uwwPoint\": -2057004,\n      \"knockOutStatus\": \"non\",\n      \"hasLostknockOut\": true,\n      \"completed\": 2923597,\n      \"wins\": 89687905,\n      \"losses\": -64993989,\n      \"technicalPointsFor\": 22429653,\n      \"technicalPointsAgainst\": -10096454,\n      \"technicalPointsDiff\": -10470431,\n      \"rankingPointsFor\": -12636444,\n      \"rankingPointsAgainst\": 69451168,\n      \"rankingPointsDiff\": -72223598,\n      \"winsEasy\": 12769551,\n      \"winsSuperiority\": -28558729,\n      \"rank\": -24565487,\n      \"rankRobinGroup\": -18196551,\n      \"fightByOpponent\": {\n       \"sportEventId\": \"do esse labore tempor\",\n       \"sportEventWeightCategoryId\": \"adipisicing occaecat\",\n       \"fighter1Id\": \"culpa labore\",\n       \"fighter2Id\": \"commodo ut\",\n       \"team1Name\": \"ad\",\n       \"team1AlternateName\": \"dolore cupidatat\",\n       \"team1FullName\": \"ea nisi\",\n       \"team1CountryFlag\": \"est do\",\n       \"team1CountryFlagScoreboard\": \"pariatur\",\n       \"team1PoolName\": \"aute magna\",\n       \"team1FightByOpponent\": \"mollit in Exc\",\n       \"team2Name\": \"minim do\",\n       \"team2AlternateName\": \"dolore aliquip\",\n       \"team2FullName\": \"eu fugiat nisi sed\",\n       \"team2CountryFlag\": \"Lorem ut anim nulla reprehend\",\n       \"team2CountryFlagScoreboard\": \"deserunt enim ad\",\n       \"team2PoolName\": \"ad culpa\",\n       \"team2FightByOpponent\": \"non\",\n       \"roundFriendlyName\": \"veniam occaecat dolor incididunt\",\n       \"displayOrderInRound\": -27047066,\n       \"round1Id\": \"do\",\n       \"round2Id\": \"enim\",\n       \"countReferees\": 42160265,\n       \"sportId\": \"dolor ullamco in incididunt aliquip\",\n       \"athlete1Color\": \"ut in i\",\n       \"athlete2Color\": \"dolor do cillum labore\",\n       \"athlete1TextColor\": \"cupidatat tempor culpa\",\n       \"athlete2TextColor\": \"qui elit culpa\",\n       \"matName\": \"sunt\",\n       \"sessionId\": \"in incididunt fugiat\",\n       \"sessionName\": \"mini\",\n       \"technicalPoints\": \"laborum cillum anim\",\n       \"uploaderFightTest\": \"mollit dolore\",\n       \"technicalPointDetails\": \"labore laboris veniam qui\",\n       \"technicalPointTagStatus\": \"tempor Excepteur magna\",\n       \"technicalPointIds\": \"deserunt anim ut culpa\",\n       \"isCompleted\": false,\n       \"isReady\": true,\n       \"isRobinGroupFight\": false,\n       \"winnerFighter\": \"nisi\",\n       \"winnerTeam\": \"ullamco\",\n       \"winnerTeamAlternateName\": \"ex labore proident\",\n       \"sportEventName\": \"dolore consequat deserunt laboris\",\n       \"sportEventStartDate\": \"velit id voluptate\",\n       \"sportEventLogo\": \"eiusmod anim id\",\n       \"rankingPoint\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"completedDate\": \"occaecat tempor\",\n       \"roundsNumber\": -45190041,\n       \"roundDuration\": -74171296,\n       \"sportAlternateName\": \"ex ad\",\n       \"weightCategoryName\": \"elit in adipisicing culpa\",\n       \"weightCategoryAlternateName\": \"quis dolore velit voluptate\",\n       \"weightCategoryShortName\": \"aliqua\",\n       \"weightCategoryMaxWeight\": -9330942,\n       \"weightCategoryFullName\": \"aliquip amet\",\n       \"weightCategoryAverageDuration\": -54159974,\n       \"weightCategoryColor\": \"eu\",\n       \"weightCategoryCompleted\": false,\n       \"victoryTypes\": \"veniam\",\n       \"victoryTypesArray\": \"dolor labore dolore in\",\n       \"audienceName\": \"Duis laborum\",\n       \"audienceShortName\": \"nisi amet\",\n       \"sportName\": \"ex qui irure ea velit\",\n       \"injuryTime\": 24190538,\n       \"warnings\": false,\n       \"cautions\": -21836682,\n       \"legFouls\": false,\n       \"activityTime\": false,\n       \"fighter1FullName\": \"cupidatat\",\n       \"fighter1DisplayName\": \"esse ad dolor\",\n       \"fighter1FamilyName\": \"exercitation ullamco nostrud\",\n       \"fighter1GivenName\": \"ipsum laborum tempor Lor\",\n       \"fighter1PreferedName\": \"Lorem enim dolor laboris\",\n       \"fighter1DrawRank\": \"cillum minim ex\",\n       \"fighter1RobinRank\": \"eiusmod in qui voluptate\",\n       \"fighter1SeedNumber\": 76294563,\n       \"fighter1AthleteId\": \"ipsum \",\n       \"fighter1PersonId\": \"ad consectetur\",\n       \"fighter1IsSeeded\": true,\n       \"fighter1Status\": -73943621,\n       \"fighter1IsInjured\": true,\n       \"fighter2FullName\": \"Excepteur nulla aute nisi ea\",\n       \"fighter2DisplayName\": \"nisi proident consectetur\",\n       \"fighter2FamilyName\": \"cillum minim\",\n       \"fighter2GivenName\": \"cillum culpa commodo\",\n       \"fighter2PreferedName\": \"nulla ullamco\",\n       \"fighter2DrawRank\": -90976063,\n       \"fighter2RobinRank\": 38999620,\n       \"fighter2SeedNumber\": -86482357,\n       \"fighter2AthleteId\": \"sit proident in aute irure\",\n       \"fighter2PersonId\": \"sunt Lorem labore eu\",\n       \"fighter2IsSeeded\": false,\n       \"fighter2Status\": 31610016,\n       \"fighter2IsInjured\": true,\n       \"result\": \"irure magna\",\n       \"victoryType\": \"laborum cillum reprehenderit\",\n       \"endTime\": 71385125,\n       \"endDate\": \"cillum dolore laborum ea\",\n       \"expectedDateStart\": \"officia sit et nisi minim\",\n       \"expectedStartDate\": \"anim do dolor\",\n       \"team1Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"team2Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"rankingPointNiceName\": \"in qui velit\",\n       \"resultText\": \"ipsum dolor qui in\",\n       \"resultTextSmall\": \"cillum sed qui\",\n       \"roundRenamedSmall\": \"occaecat tempor\",\n       \"parentFightNumber1\": -34410020,\n       \"parentFightNumber2\": 9052251,\n       \"fightRefereesWithRole\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"needsRefresh\": false,\n       \"isCountdown\": true,\n       \"id\": \"dolor\",\n       \"parentFight1Id\": \"cupidatat eu Duis\",\n       \"parentFight2Id\": \"Lo\",\n       \"fighter1\": \"dolor cillum do\",\n       \"fighter1RankingPoint\": 1038,\n       \"fighter2\": \"laboris tempor dolore fu\",\n       \"fighter2RankingPoint\": 5660,\n       \"refereeGroup\": \"c\",\n       \"sportEventTeam1Id\": \"sit consectetur dolore ullamco\",\n       \"sportEventTeam2Id\": \"occaecat quis\",\n       \"fightMatId\": \"tempor aliqua Exce\",\n       \"round\": \"adip\",\n       \"qualifying\": false,\n       \"teamFightId\": \"sed eu\",\n       \"status\": 9011118,\n       \"rankingCheck\": false,\n       \"technicalCheck\": true,\n       \"weight\": -9094447,\n       \"fightNumber\": 9840,\n       \"roundWeight\": 3410,\n       \"repechageWeight\": 3283,\n       \"repechageSection\": 5433,\n       \"displayOrder\": 9752,\n       \"canceled\": \"ut in aute sunt sint\",\n       \"fightReferees\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"odfCode\": \"dolore\"\n      },\n      \"isCompeting\": false,\n      \"hasOpenFight\": true,\n      \"isDisqualified\": true,\n      \"isNotRanked\": true,\n      \"isInjured\": true,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": false,\n      \"id\": \"nostrud exercitation\",\n      \"sportEventWeightCategory\": \"esse velit exercitation Lorem\",\n      \"weight\": 197,\n      \"drawNumber\": 180,\n      \"seedNumber\": 19,\n      \"fighterWeight\": -18123929.524355248,\n      \"points\": 456,\n      \"fighterStatus\": 3609183\n     },\n     {\n      \"athleteId\": \"adipisicing ullamco dolor consectetur\",\n      \"sportEventWeightCategoryId\": \"do incididunt exercitation in adipisicing\",\n      \"weightCategoryFullName\": \"anim minim ex\",\n      \"weightCategoryShortName\": \"pariatur cillum elit consequat\",\n      \"weightCategoryCountFights\": -13561852,\n      \"hasWeightCategoryBlockchainIds\": false,\n      \"weightCategoryCountReadyFighters\": -62637329,\n      \"countFights\": 433642,\n      \"personId\": \"adipisicing\",\n      \"fullName\": \"veniam\",\n      \"preferedName\": \"consequat\",\n      \"displayName\": \"cupidatat sed ipsum consequat\",\n      \"givenName\": \"sint eu\",\n      \"familyName\": \"consequat cupidatat do\",\n      \"personPhoto\": \"minim qui est\",\n      \"athenaPrintId\": \"ut sint\",\n      \"teamAlternateName\": \"mollit in eiusmod amet\",\n      \"teamName\": \"occaecat Ut labore\",\n      \"teamCountryFlag\": \"elit sunt\",\n      \"sportEventTeamId\": \"sunt\",\n      \"sportEventId\": \"consequat mollit veniam amet\",\n      \"drawRank\": -71476492,\n      \"robinGroup\": \"am\",\n      \"robinGroupRank\": 73575002,\n      \"teamRankingPoint\": 16843674,\n      \"uwwPoint\": -11643624,\n      \"knockOutStatus\": \"dolor do aute amet officia\",\n      \"hasLostknockOut\": true,\n      \"completed\": -52403844,\n      \"wins\": 29743199,\n      \"losses\": -17406615,\n      \"technicalPointsFor\": -62180973,\n      \"technicalPointsAgainst\": 52487281,\n      \"technicalPointsDiff\": 13216569,\n      \"rankingPointsFor\": 92202408,\n      \"rankingPointsAgainst\": -34470057,\n      \"rankingPointsDiff\": 64778182,\n      \"winsEasy\": -84598480,\n      \"winsSuperiority\": 46065225,\n      \"rank\": 24296204,\n      \"rankRobinGroup\": -5097643,\n      \"fightByOpponent\": {\n       \"sportEventId\": \"Excepteur commodo pariatur do in\",\n       \"sportEventWeightCategoryId\": \"exercitation magna amet nulla\",\n       \"fighter1Id\": \"proident\",\n       \"fighter2Id\": \"amet ipsum\",\n       \"team1Name\": \"dolor aliquip\",\n       \"team1AlternateName\": \"irure dolore do Ut\",\n       \"team1FullName\": \"inc\",\n       \"team1CountryFlag\": \"laborum\",\n       \"team1CountryFlagScoreboard\": \"dolor minim ullamco nisi\",\n       \"team1PoolName\": \"consequat et sed ullamco\",\n       \"team1FightByOpponent\": \"ipsum culpa velit tempor\",\n       \"team2Name\": \"cillum\",\n       \"team2AlternateName\": \"exercitation dolore labore\",\n       \"team2FullName\": \"sit ut id\",\n       \"team2CountryFlag\": \"ut do\",\n       \"team2CountryFlagScoreboard\": \"pariatur mollit tem\",\n       \"team2PoolName\": \"aliqua\",\n       \"team2FightByOpponent\": \"exercitation nulla voluptate\",\n       \"roundFriendlyName\": \"elit\",\n       \"displayOrderInRound\": 81547767,\n       \"round1Id\": \"ut ut\",\n       \"round2Id\": \"in sint\",\n       \"countReferees\": 29451710,\n       \"sportId\": \"est consequat pariatur\",\n       \"athlete1Color\": \"incididunt\",\n       \"athlete2Color\": \"proident consequat labore sed\",\n       \"athlete1TextColor\": \"in laboris ut\",\n       \"athlete2TextColor\": \"et eu reprehenderit occaecat proident\",\n       \"matName\": \"proident\",\n       \"sessionId\": \"ipsum voluptate\",\n       \"sessionName\": \"mo\",\n       \"technicalPoints\": \"nulla commodo ullamco laboris\",\n       \"uploaderFightTest\": \"ad esse labore\",\n       \"technicalPointDetails\": \"exercitation enim Duis\",\n       \"technicalPointTagStatus\": \"ea consequat exercitation Excepteur\",\n       \"technicalPointIds\": \"cupidatat laborum\",\n       \"isCompleted\": false,\n       \"isReady\": false,\n       \"isRobinGroupFight\": true,\n       \"winnerFighter\": \"incididunt velit nostrud\",\n       \"winnerTeam\": \"anim\",\n       \"winnerTeamAlternateName\": \"cupidatat veniam aliquip Ut\",\n       \"sportEventName\": \"elit ipsum eu pariatur ut\",\n       \"sportEventStartDate\": \"in culpa quis\",\n       \"sportEventLogo\": \"do nostrud\",\n       \"rankingPoint\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"completedDate\": \"proident sit aliquip nostrud\",\n       \"roundsNumber\": 29923969,\n       \"roundDuration\": 94313837,\n       \"sportAlternateName\": \"Duis sed\",\n       \"weightCategoryName\": \"in sunt consequat tempor\",\n       \"weightCategoryAlternateName\": \"deseru\",\n       \"weightCategoryShortName\": \"elit ad dolor\",\n       \"weightCategoryMaxWeight\": -19859414,\n       \"weightCategoryFullName\": \"anim labore enim\",\n       \"weightCategoryAverageDuration\": -34167711,\n       \"weightCategoryColor\": \"officia\",\n       \"weightCategoryCompleted\": true,\n       \"victoryTypes\": \"adipisicing\",\n       \"victoryTypesArray\": \"consequat minim\",\n       \"audienceName\": \"Lorem aute nulla\",\n       \"audienceShortName\": \"commodo mollit\",\n       \"sportName\": \"elit ut esse\",\n       \"injuryTime\": 72138227,\n       \"warnings\": true,\n       \"cautions\": 45304989,\n       \"legFouls\": false,\n       \"activityTime\": false,\n       \"fighter1FullName\": \"sed dolore eu\",\n       \"fighter1DisplayName\": \"consequat est ut aute ut\",\n       \"fighter1FamilyName\": \"pariatur\",\n       \"fighter1GivenName\": \"nostrud\",\n       \"fighter1PreferedName\": \"eu elit\",\n       \"fighter1DrawRank\": \"exercitation qui magna elit\",\n       \"fighter1RobinRank\": \"est con\",\n       \"fighter1SeedNumber\": -74989031,\n       \"fighter1AthleteId\": \"incididunt Ut ullamco\",\n       \"fighter1PersonId\": \"Lorem et\",\n       \"fighter1IsSeeded\": true,\n       \"fighter1Status\": -5738874,\n       \"fighter1IsInjured\": false,\n       \"fighter2FullName\": \"dolor sint sit nisi\",\n       \"fighter2DisplayName\": \"voluptate aliquip\",\n       \"fighter2FamilyName\": \"fugiat\",\n       \"fighter2GivenName\": \"aliquip do irure nostrud labore\",\n       \"fighter2PreferedName\": \"esse magna Lorem\",\n       \"fighter2DrawRank\": 47944191,\n       \"fighter2RobinRank\": 32959833,\n       \"fighter2SeedNumber\": 59923445,\n       \"fighter2AthleteId\": \"consectetur culpa\",\n       \"fighter2PersonId\": \"non consectetur sint officia\",\n       \"fighter2IsSeeded\": false,\n       \"fighter2Status\": -74990093,\n       \"fighter2IsInjured\": false,\n       \"result\": \"commodo cillum\",\n       \"victoryType\": \"e\",\n       \"endTime\": -48206466,\n       \"endDate\": \"id e\",\n       \"expectedDateStart\": \"Except\",\n       \"expectedStartDate\": \"cillum deserunt in in ea\",\n       \"team1Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"team2Fighters\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"rankingPointNiceName\": \"voluptate nulla\",\n       \"resultText\": \"laborum\",\n       \"resultTextSmall\": \"nisi dolore in veniam\",\n       \"roundRenamedSmall\": \"Ut minim\",\n       \"parentFightNumber1\": -44286078,\n       \"parentFightNumber2\": -40608696,\n       \"fightRefereesWithRole\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"needsRefresh\": true,\n       \"isCountdown\": false,\n       \"id\": \"nost\",\n       \"parentFight1Id\": \"qui eiusmod dolor et aliquip\",\n       \"parentFight2Id\": \"Duis\",\n       \"fighter1\": \"magna\",\n       \"fighter1RankingPoint\": 3603,\n       \"fighter2\": \"voluptate in\",\n       \"fighter2RankingPoint\": 1157,\n       \"refereeGroup\": \"o\",\n       \"sportEventTeam1Id\": \"aliqua dolor elit\",\n       \"sportEventTeam2Id\": \"consectetur occaecat\",\n       \"fightMatId\": \"in minim\",\n       \"round\": \"temp\",\n       \"qualifying\": false,\n       \"teamFightId\": \"proident exercitation sint\",\n       \"status\": -33020376,\n       \"rankingCheck\": true,\n       \"technicalCheck\": false,\n       \"weight\": 82644928,\n       \"fightNumber\": 3394,\n       \"roundWeight\": 8767,\n       \"repechageWeight\": 1745,\n       \"repechageSection\": 1703,\n       \"displayOrder\": 3180,\n       \"canceled\": \"ipsum adipisicing veniam qui\",\n       \"fightReferees\": [\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n       ],\n       \"odfCode\": \"non tempor ut reprehenderit incididunt\"\n      },\n      \"isCompeting\": true,\n      \"hasOpenFight\": false,\n      \"isDisqualified\": true,\n      \"isNotRanked\": false,\n      \"isInjured\": false,\n      \"isForfeit\": false,\n      \"isRobinGroupNotRanked\": true,\n      \"id\": \"amet ut dolore sit adipisicing\",\n      \"sportEventWeightCategory\": \"in ipsum\",\n      \"weight\": 298,\n      \"drawNumber\": 286,\n      \"seedNumber\": 3,\n      \"fighterWeight\": -68268238.31188476,\n      \"points\": 326,\n      \"fighterStatus\": 22051129\n     }\n    ],\n    \"countReadyTeams\": 95683065,\n    \"countReadyFighters\": -21246674,\n    \"countReadySeededFighters\": -23760183,\n    \"countSeededFighters\": 76594193,\n    \"countFighters\": -84717718,\n    \"isRepechageSet\": false,\n    \"countTeams\": 61794244,\n    \"countFights\": -7985317,\n    \"perfectNumber\": 88139792,\n    \"isRobin\": false,\n    \"isRobinGrouped\": false,\n    \"id\": \"culpa ess\",\n    \"averageDuration\": -47696333,\n    \"color\": \"no\",\n    \"odfCode\": \"cillum dolore\",\n    \"uwwRanking\": true,\n    \"blockchainIds\": \"do amet magna deserunt id\",\n    \"sessionStartDay\": -75190348,\n    \"matAssignment\": 44129366,\n    \"fightersUpdated\": \"dolor irure proident Duis\"\n   }\n  ],\n  \"id\": \"consectetur tempor Lorem\",\n  \"sportEventTeamId\": \"in sed est sint minim\",\n  \"disqualified\": false\n }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Athlete not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update an athlete",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"athlete",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when update is successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete an athlete",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"athlete",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when delete is successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Toggle Disqualified flag on an athlete",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"athlete",
										"get",
										":id",
										"disqualify"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id",
												"disqualify"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id",
												"disqualify"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/athlete/get/:id/disqualify",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"athlete",
												"get",
												":id",
												"disqualify"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "blockchain",
			"item": [
				{
					"name": "Return details of a block",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"blockchain",
								"get",
								":blockNumber"
							],
							"variable": [
								{
									"key": "blockNumber",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"get",
										":blockNumber"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "blockNumber"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"get",
										":blockNumber"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "blockNumber"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the block",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/get/:blockNumber",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"get",
										":blockNumber"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "blockNumber"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"block\": {\n  \"sportEventWeightCategoryId\": \"sunt consequat est enim\",\n  \"blockNumber\": \"reprehenderit et laborum deserunt do\",\n  \"timestamp\": \"aliquip dolore proident\",\n  \"hash\": \"laboris velit\",\n  \"parentHash\": \"ea minim\",\n  \"sha3Uncles\": \"pariatur irure dolore officia\",\n  \"nonce\": \"do sit\"\n }\n}"
						}
					]
				},
				{
					"name": "Allocate a block to a weightcategory",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"blockchain",
								"allocate",
								":weightCategory"
							],
							"variable": [
								{
									"key": "weightCategory",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"allocate",
										":weightCategory"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "weightCategory"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"allocate",
										":weightCategory"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "weightCategory"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the block",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/allocate/:weightCategory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"allocate",
										":weightCategory"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "weightCategory"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"block\": {\n  \"sportEventWeightCategoryId\": \"sunt consequat est enim\",\n  \"blockNumber\": \"reprehenderit et laborum deserunt do\",\n  \"timestamp\": \"aliquip dolore proident\",\n  \"hash\": \"laboris velit\",\n  \"parentHash\": \"ea minim\",\n  \"sha3Uncles\": \"pariatur irure dolore officia\",\n  \"nonce\": \"do sit\"\n }\n}"
						}
					]
				},
				{
					"name": "Dump random numbers from all blocks",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"blockchain",
								"dump"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"dump"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns random numbers per block",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"dump"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"randomNumbers\": [\n  -52397360,\n  91536288\n ]\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/blockchain/dump",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"blockchain",
										"dump"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "client",
			"item": [
				{
					"name": "get/{client}",
					"item": [
						{
							"name": "trusted",
							"item": [
								{
									"name": "Get trusted status of a client",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client",
												"trusted"
											],
											"variable": [
												{
													"key": "client",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "client"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "client"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned if trusted",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "client"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Toggle trusted status of a client",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client",
												"trusted"
											],
											"variable": [
												{
													"key": "client",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "client"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "client"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client/trusted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"client",
														"get",
														":client",
														"trusted"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "client"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Return a client",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"get",
										":client"
									],
									"variable": [
										{
											"key": "client",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a client",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fullname\": \"cons\",\n \"id\": \"consectetur enim\",\n \"email\": \"mollit voluptate adip\",\n \"name\": \"ipsu\",\n \"organization\": \"cill\",\n \"version\": \"irure exer\",\n \"remoteVersion\": \"officia est ex\",\n \"maintenance\": true,\n \"trusted\": true,\n \"created\": \"Excepteur in velit\",\n \"updated\": \"in ad anim laboris\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a client",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<string>\",\n    \"email\": \"<string>\",\n    \"name\": \"<string>\",\n    \"organization\": \"<string>\",\n    \"remoteVersion\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"get",
										":client"
									],
									"variable": [
										{
											"key": "client",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a client",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"get",
										":client"
									],
									"variable": [
										{
											"key": "client",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/client/get/:client",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"client",
												"get",
												":client"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "client"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "List all clients in paginated response",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/client/?filters=<string>&page=<integer>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"client",
								""
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								},
								{
									"key": "page",
									"value": "<integer>",
									"description": "Page number"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "Entries per page"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/?filters=<string>&page=<integer>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns all clients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/?filters=<string>&page=<integer>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"clients\": \"schema type not provided\"\n}"
						}
					]
				},
				{
					"name": "Create a client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"<string>\",\n    \"email\": \"<string>\",\n    \"name\": \"<string>\",\n    \"organization\": \"<string>\",\n    \"remoteVersion\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/client/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"client",
								""
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "List all trusted clients",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/client/trusted?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"client",
								"trusted"
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns all trusted clients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/trusted?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"trusted"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"clients\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/trusted?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"trusted"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Return the localclient",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/client/local",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"client",
								"local"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/local",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"local"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns the localclient",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/client/local",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"client",
										"local"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fullname\": \"cons\",\n \"id\": \"consectetur enim\",\n \"email\": \"mollit voluptate adip\",\n \"name\": \"ipsu\",\n \"organization\": \"cill\",\n \"version\": \"irure exer\",\n \"remoteVersion\": \"officia est ex\",\n \"maintenance\": true,\n \"trusted\": true,\n \"created\": \"Excepteur in velit\",\n \"updated\": \"in ad anim laboris\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "config",
			"item": [
				{
					"name": "custom-config",
					"item": [
						{
							"name": "List custom entities for weight categories, audiences, victory types, sports",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"custom-config"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns custom configs",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"weights\": {\n  \"id\": 78132047,\n  \"configKey\": \"adipisicing deserunt aliqua ut\",\n  \"configValue\": \"velit proident quis pariatur labore\",\n  \"enabled\": false\n },\n \"audiences\": {\n  \"id\": 73644402,\n  \"configKey\": \"Excepteur voluptate nisi\",\n  \"configValue\": \"et\",\n  \"enabled\": false\n },\n \"sports\": {\n  \"id\": 80048639,\n  \"configKey\": \"magna aliqu\",\n  \"configValue\": \"velit dolor aliqua\",\n  \"enabled\": false\n },\n \"victoryTypes\": {\n  \"id\": -91159162,\n  \"configKey\": \"nostrud\",\n  \"configValue\": \"ullamco nostrud id\",\n  \"enabled\": false\n }\n}"
								}
							]
						},
						{
							"name": "Update custom entities for weight categories, audiences, victory types, sports",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"weights\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"audiences\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"sports\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"victoryTypes\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"custom-config"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"weights\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"audiences\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"sports\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"victoryTypes\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"weights\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"audiences\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"sports\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"victoryTypes\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"weights\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"audiences\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"sports\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"victoryTypes\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"weights\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"audiences\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"sports\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    },\n    \"victoryTypes\": {\n        \"configValue\": \"<string>\",\n        \"enabled\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/custom-config",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"custom-config"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"errors\": [\n  \"in sunt\",\n  \"in ipsum Duis ul\"\n ],\n \"configs\": [\n  \"ut sint\",\n  \"Ut deserunt\"\n ],\n \"weights\": [\n  \"deserunt nostrud anim\",\n  \"aute\"\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "victory-types/{sport}",
					"item": [
						{
							"name": "Get victory types by sport",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"victory-types",
										":sport"
									],
									"variable": [
										{
											"key": "sport",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"victory-types",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"victoryTypes\": \"laboris laborum non\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"victory-types",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get victory type by sport and identifier",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport/:identifier",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"victory-types",
										":sport",
										":identifier"
									],
									"variable": [
										{
											"key": "sport",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "identifier",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"victory-types",
												":sport",
												":identifier"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sport"
												},
												{
													"key": "identifier"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/victory-types/:sport/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"victory-types",
												":sport",
												":identifier"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sport"
												},
												{
													"key": "identifier"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"victoryType\": \"sed veniam proident inc\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "audiences",
					"item": [
						{
							"name": "Get audiences",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/audiences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"audiences"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/audiences",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"audiences"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"audiences\": \"laborum\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/audiences",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"audiences"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get audience by identifier",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/audiences/:identifier",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"audiences",
										":identifier"
									],
									"variable": [
										{
											"key": "identifier",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/audiences/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"audiences",
												":identifier"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "identifier"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"audience\": \"in ad laborum\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/audiences/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"audiences",
												":identifier"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "identifier"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "sports",
					"item": [
						{
							"name": "Get sports",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/sports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"sports"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/sports",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"sports"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/sports",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"sports"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sports\": \"eiusmod occaecat labore dolor Duis\"\n}"
								}
							]
						},
						{
							"name": "Get sport by identifier",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/sports/:identifier",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"sports",
										":identifier"
									],
									"variable": [
										{
											"key": "identifier",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/sports/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"sports",
												":identifier"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "identifier"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/sports/:identifier",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"sports",
												":identifier"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "identifier"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"audience\": \"in ad laborum\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "weight-categories",
					"item": [
						{
							"name": "{audience}",
							"item": [
								{
									"name": "{sport}",
									"item": [
										{
											"name": "Get official weight categories by audience and sport",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"weight-categories",
														":audience",
														":sport"
													],
													"variable": [
														{
															"key": "audience",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience",
																":sport"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "audience"
																},
																{
																	"key": "sport"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience",
																":sport"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "audience"
																},
																{
																	"key": "sport"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"weightCategories\": \"velit exercitation in\"\n}"
												}
											]
										},
										{
											"name": "Get weight category",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport/:identifier",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"weight-categories",
														":audience",
														":sport",
														":identifier"
													],
													"variable": [
														{
															"key": "audience",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "sport",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "identifier",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport/:identifier",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience",
																":sport",
																":identifier"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "audience"
																},
																{
																	"key": "sport"
																},
																{
																	"key": "identifier"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience/:sport/:identifier",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"config",
																"weight-categories",
																":audience",
																":sport",
																":identifier"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "audience"
																},
																{
																	"key": "sport"
																},
																{
																	"key": "identifier"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"audience\": \"in ad laborum\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get official weight categories by audience and sport",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"weight-categories",
												":audience"
											],
											"variable": [
												{
													"key": "audience",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"weight-categories",
														":audience"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "audience"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories/:audience",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"config",
														"weight-categories",
														":audience"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "audience"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"weightCategories\": \"velit exercitation in\"\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get official weight categories by audience and sport",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"config",
										"weight-categories"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"weight-categories"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/config/weight-categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"config",
												"weight-categories"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"weightCategories\": \"velit exercitation in\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fight",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "mat",
									"item": [
										{
											"name": "Set the fight mat",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fightMatId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"mat"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"fightMatId\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"fightMatId\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"fightMatId\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"fightMatId\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Free the fight mat",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"mat",
														"unset"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat",
																"unset"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat",
																"unset"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat",
																"unset"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/mat/unset",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"mat",
																"unset"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "confirm",
									"item": [
										{
											"name": "Confirm wrestlers",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"confirm"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Confirm wrestlers in Team competition",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"confirm",
														"wrestler"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm",
																"wrestler"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm",
																"wrestler"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when update is successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/confirm/wrestler",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"confirm",
																"wrestler"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "print",
									"item": [
										{
											"name": "Print scoresheet",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"print"
													],
													"query": [
														{
															"key": "template",
															"value": "<string>",
															"description": "Scoresheet template"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Fight not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "PDF path",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print?template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												}
											]
										},
										{
											"name": "Print scoresheet",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"print",
														"template",
														":template"
													],
													"query": [
														{
															"key": "template",
															"value": "<string>",
															"description": "Scoresheet template"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "template",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Fight not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print",
																"template",
																":template"
															],
															"query": [
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																},
																{
																	"key": "template"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print",
																"template",
																":template"
															],
															"query": [
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																},
																{
																	"key": "template"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "PDF path",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/print/template/:template?template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fight",
																"get",
																":id",
																"print",
																"template",
																":template"
															],
															"query": [
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																},
																{
																	"key": "template"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get a fight",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns a fight",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"fight\": {\n  \"sportEventId\": \"laboris velit\",\n  \"sportEventWeightCategoryId\": \"incididunt esse\",\n  \"fighter1Id\": \"irure cillum enim\",\n  \"fighter2Id\": \"in\",\n  \"team1Name\": \"aute dolore enim\",\n  \"team1AlternateName\": \"officia esse\",\n  \"team1FullName\": \"id eiusmod\",\n  \"team1CountryFlag\": \"dolore nostrud\",\n  \"team1CountryFlagScoreboard\": \"sit dolor\",\n  \"team1PoolName\": \"velit occaecat\",\n  \"team1FightByOpponent\": \"laboris\",\n  \"team2Name\": \"adipisicing in velit nisi\",\n  \"team2AlternateName\": \"irure nostrud aute labore\",\n  \"team2FullName\": \"elit\",\n  \"team2CountryFlag\": \"elit dolor amet\",\n  \"team2CountryFlagScoreboard\": \"dolore ea cupidatat culpa in\",\n  \"team2PoolName\": \"minim in nulla exercitation\",\n  \"team2FightByOpponent\": \"cupidatat cillum \",\n  \"roundFriendlyName\": \"sunt sint ullamco\",\n  \"displayOrderInRound\": -26983180,\n  \"round1Id\": \"ipsum magna\",\n  \"round2Id\": \"anim voluptate nisi consequat\",\n  \"countReferees\": 59517665,\n  \"sportId\": \"nulla ullamco consectetur sint\",\n  \"athlete1Color\": \"incidid\",\n  \"athlete2Color\": \"eiusmod amet anim reprehenderit sint\",\n  \"athlete1TextColor\": \"consequat in labore occaecat\",\n  \"athlete2TextColor\": \"consequat fugiat nulla dolore in\",\n  \"matName\": \"non irure do sint\",\n  \"sessionId\": \"cupidatat dolor consectetur\",\n  \"sessionName\": \"non Lorem in qui\",\n  \"technicalPoints\": \"dolor proident labore\",\n  \"uploaderFightTest\": \"Ut laborum\",\n  \"technicalPointDetails\": \"magna sit\",\n  \"technicalPointTagStatus\": \"occaecat nulla minim officia\",\n  \"technicalPointIds\": \"proident voluptate occaecat ex\",\n  \"isCompleted\": false,\n  \"isReady\": true,\n  \"isRobinGroupFight\": true,\n  \"winnerFighter\": \"ex velit adipisicing laboris\",\n  \"winnerTeam\": \"incididunt cupidatat laboris qui i\",\n  \"winnerTeamAlternateName\": \"commodo dolore Duis\",\n  \"sportEventName\": \"dolor\",\n  \"sportEventStartDate\": \"cillum ipsum exercitation dolore dolor\",\n  \"sportEventLogo\": \"adipisicing\",\n  \"rankingPoint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"completedDate\": \"enim Duis labore ut\",\n  \"roundsNumber\": -22550655,\n  \"roundDuration\": 18795885,\n  \"sportAlternateName\": \"deserunt anim do pariatur\",\n  \"weightCategoryName\": \"adipisicing cupidatat magna exercitation\",\n  \"weightCategoryAlternateName\": \"qui culpa minim\",\n  \"weightCategoryShortName\": \"sed\",\n  \"weightCategoryMaxWeight\": 88239563,\n  \"weightCategoryFullName\": \"elit sunt\",\n  \"weightCategoryAverageDuration\": -56040216,\n  \"weightCategoryColor\": \"voluptate laborum\",\n  \"weightCategoryCompleted\": false,\n  \"victoryTypes\": \"exercitation ea\",\n  \"victoryTypesArray\": \"magna adipisicing\",\n  \"audienceName\": \"et Duis commodo qui\",\n  \"audienceShortName\": \"elit Duis minim \",\n  \"sportName\": \"labo\",\n  \"injuryTime\": 59393988,\n  \"warnings\": false,\n  \"cautions\": 28588057,\n  \"legFouls\": false,\n  \"activityTime\": true,\n  \"fighter1FullName\": \"non voluptate aliquip eiusmod in\",\n  \"fighter1DisplayName\": \"amet quis\",\n  \"fighter1FamilyName\": \"voluptate in\",\n  \"fighter1GivenName\": \"ullamco irure ipsum\",\n  \"fighter1PreferedName\": \"se\",\n  \"fighter1DrawRank\": \"ut Lorem cupidatat tempor sint\",\n  \"fighter1RobinRank\": \"nulla voluptate\",\n  \"fighter1SeedNumber\": 85881840,\n  \"fighter1AthleteId\": \"voluptate\",\n  \"fighter1PersonId\": \"commodo in\",\n  \"fighter1IsSeeded\": false,\n  \"fighter1Status\": 76564099,\n  \"fighter1IsInjured\": true,\n  \"fighter2FullName\": \"adipisicing ea Duis labore\",\n  \"fighter2DisplayName\": \"cillum velit\",\n  \"fighter2FamilyName\": \"i\",\n  \"fighter2GivenName\": \"aute aliquip laboris ipsum\",\n  \"fighter2PreferedName\": \"mollit veniam\",\n  \"fighter2DrawRank\": -69105959,\n  \"fighter2RobinRank\": -41696504,\n  \"fighter2SeedNumber\": 40258969,\n  \"fighter2AthleteId\": \"dolore aliqua c\",\n  \"fighter2PersonId\": \"reprehenderit Ut\",\n  \"fighter2IsSeeded\": true,\n  \"fighter2Status\": 46581303,\n  \"fighter2IsInjured\": false,\n  \"result\": \"elit in\",\n  \"victoryType\": \"id sunt consectetur pariatur\",\n  \"endTime\": 76871539,\n  \"endDate\": \"magna in\",\n  \"expectedDateStart\": \"nulla\",\n  \"expectedStartDate\": \"quis Ut dolor\",\n  \"team1Fighters\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"team2Fighters\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"rankingPointNiceName\": \"nostrud quis\",\n  \"resultText\": \"nisi eu qui voluptate\",\n  \"resultTextSmall\": \"anim sit magna\",\n  \"roundRenamedSmall\": \"cupidatat labore nostrud consequat dolore\",\n  \"parentFightNumber1\": 73292037,\n  \"parentFightNumber2\": -60744831,\n  \"fightRefereesWithRole\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"needsRefresh\": false,\n  \"isCountdown\": false,\n  \"id\": \"do veniam\",\n  \"parentFight1Id\": \"laborum velit fugiat\",\n  \"parentFight2Id\": \"Ut aliquip cupidatat\",\n  \"fighter1\": \"fugiat nisi incididunt culpa\",\n  \"fighter1RankingPoint\": 5342,\n  \"fighter2\": \"laborum incididunt elit do ullamco\",\n  \"fighter2RankingPoint\": 7652,\n  \"refereeGroup\": \"e\",\n  \"sportEventTeam1Id\": \"adipisicing ut\",\n  \"sportEventTeam2Id\": \"nisi laboris fugiat sunt cupidatat\",\n  \"fightMatId\": \"dolore cupidatat laboris magna dolore\",\n  \"round\": \"dolo\",\n  \"qualifying\": true,\n  \"teamFightId\": \"commodo\",\n  \"status\": 83528434,\n  \"rankingCheck\": true,\n  \"technicalCheck\": false,\n  \"weight\": -77925092,\n  \"fightNumber\": 4989,\n  \"roundWeight\": 1701,\n  \"repechageWeight\": 1052,\n  \"repechageSection\": 1863,\n  \"displayOrder\": 2007,\n  \"canceled\": \"ut eu velit amet eiusmod\",\n  \"fightReferees\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"odfCode\": \"amet\"\n }\n}"
										}
									]
								},
								{
									"name": "Update a fight",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventWeightCategoryId\": \"<string>\",\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\",\n    \"sportEventTeam1Id\": \"<string>\",\n    \"sportEventTeam2Id\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventWeightCategoryId\": \"<string>\",\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\",\n    \"sportEventTeam1Id\": \"<string>\",\n    \"sportEventTeam2Id\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventWeightCategoryId\": \"<string>\",\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\",\n    \"sportEventTeam1Id\": \"<string>\",\n    \"sportEventTeam2Id\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventWeightCategoryId\": \"<string>\",\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\",\n    \"sportEventTeam1Id\": \"<string>\",\n    \"sportEventTeam2Id\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventWeightCategoryId\": \"<string>\",\n    \"fighter1\": \"<string>\",\n    \"fighter2\": \"<string>\",\n    \"sportEventTeam1Id\": \"<string>\",\n    \"sportEventTeam2Id\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a fight",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fightMatId\": \"<string>\",\n    \"fightNumber\": \"<integer>\",\n    \"odfCode\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fightMatId\": \"<string>\",\n    \"fightNumber\": \"<integer>\",\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fightMatId\": \"<string>\",\n    \"fightNumber\": \"<integer>\",\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fightMatId\": \"<string>\",\n    \"fightNumber\": \"<integer>\",\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"fightMatId\": \"<string>\",\n    \"fightNumber\": \"<integer>\",\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a fight",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get expected start time of a fight",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"expected"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"expected"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Expected time",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"expected"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"expected\": \"sint ani\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/expected",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"expected"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Unconfirm wrestlers in Team competition",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"unconfirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"unconfirm"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"unconfirm"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/unconfirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"unconfirm"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Ranking check",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"ranking-check"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Ranking uncheck",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"ranking-uncheck"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-uncheck"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-uncheck"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/ranking-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"ranking-uncheck"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Technical check",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"technical-check"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Technical uncheck",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"technical-uncheck"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-uncheck"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-uncheck"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/technical-uncheck",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"technical-uncheck"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Fight in progress",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"starting"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"starting"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"starting"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/starting",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"starting"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Clear result of a fight",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":id",
												"clear-result"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"clear-result"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"clear-result"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns number of fights updated",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:id/clear-result",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														"get",
														":id",
														"clear-result"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"isClear\": true\n}"
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get status of a team fight",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"get",
										":teamFightId",
										"status"
									],
									"variable": [
										{
											"key": "teamFightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Fight not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":teamFightId",
												"status"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "teamFightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":teamFightId",
												"status"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "teamFightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns number of fights updated",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/get/:teamFightId/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"get",
												":teamFightId",
												"status"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "teamFightId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"status\": [\n  \"in\",\n  \"nisi reprehenderit\"\n ]\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "odf",
					"item": [
						{
							"name": "Get a fight by its ODF Code",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "odfCode",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "odfCode"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "odfCode"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a fight",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/get/:odfCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												"get",
												":odfCode"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "odfCode"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sportEventId\": \"fugiat anim reprehenderit\",\n \"sportEventWeightCategoryId\": \"eiusm\",\n \"fighter1Id\": \"deserunt fugiat\",\n \"fighter2Id\": \"adipisicing commodo\",\n \"team1Name\": \"Ut\",\n \"team1AlternateName\": \"laborum Excepteur sunt\",\n \"team1FullName\": \"Lorem in pariatur \",\n \"team1CountryFlag\": \"dolore id adipisicing sed\",\n \"team1CountryFlagScoreboard\": \"ex in\",\n \"team1PoolName\": \"in esse dolore anim\",\n \"team1FightByOpponent\": \"non\",\n \"team2Name\": \"sint es\",\n \"team2AlternateName\": \"consequat dolore\",\n \"team2FullName\": \"in eu elit non\",\n \"team2CountryFlag\": \"quis ullamco\",\n \"team2CountryFlagScoreboard\": \"eiusmod\",\n \"team2PoolName\": \"nisi cupidatat\",\n \"team2FightByOpponent\": \"culpa deserunt laboris dolor\",\n \"roundFriendlyName\": \"nostrud ea enim in\",\n \"displayOrderInRound\": 20326689,\n \"round1Id\": \"Excepteur cillum nostrud minim ut\",\n \"round2Id\": \"culpa officia magna cupidatat\",\n \"countReferees\": -42043436,\n \"sportId\": \"volupt\",\n \"athlete1Color\": \"dolore in aute\",\n \"athlete2Color\": \"Excepteur\",\n \"athlete1TextColor\": \"occaecat aliqu\",\n \"athlete2TextColor\": \"nisi Excepteur\",\n \"matName\": \"ut min\",\n \"sessionId\": \"Duis officia aute esse\",\n \"sessionName\": \"quis ea Ut ve\",\n \"technicalPoints\": \"exercitation id\",\n \"uploaderFightTest\": \"voluptate in ullamco magna\",\n \"technicalPointDetails\": \"anim esse\",\n \"technicalPointTagStatus\": \"Excepteur incididunt veniam dolor\",\n \"technicalPointIds\": \"in ve\",\n \"isCompleted\": true,\n \"isReady\": false,\n \"isRobinGroupFight\": true,\n \"winnerFighter\": \"dolor\",\n \"winnerTeam\": \"dolore in\",\n \"winnerTeamAlternateName\": \"in ullamco occaecat Lorem\",\n \"sportEventName\": \"aliquip\",\n \"sportEventStartDate\": \"ullamco cillum ipsum\",\n \"sportEventLogo\": \"aute consectetur\",\n \"rankingPoint\": {\n  \"fightId\": \"dolore proident\",\n  \"victoryType\": \"irure aute non deserunt\",\n  \"fighterId\": \"qui fugiat\",\n  \"fighterFullName\": \"commodo sit consequ\",\n  \"victoryTypeId\": \"iru\",\n  \"victoryTypeName\": \"occaecat Ut\",\n  \"victoryTypeNiceName\": \"veniam Excepteur exercitation Ut mollit\",\n  \"sportId\": \"nulla dolor incididunt magna\",\n  \"sportEventId\": \"dolor adipisicing\",\n  \"id\": \"dolor sit\",\n  \"fighter\": \"pariatur id sed\",\n  \"second\": 57020\n },\n \"completedDate\": \"qui exercitation aliqu\",\n \"roundsNumber\": 32552501,\n \"roundDuration\": -59386163,\n \"sportAlternateName\": \"elit ipsum eiusmod\",\n \"weightCategoryName\": \"dolor es\",\n \"weightCategoryAlternateName\": \"id Lorem ipsum\",\n \"weightCategoryShortName\": \"irure aliquip qui\",\n \"weightCategoryMaxWeight\": -95743930,\n \"weightCategoryFullName\": \"ea Duis proident dolore\",\n \"weightCategoryAverageDuration\": 90164290,\n \"weightCategoryColor\": \"proident Excepteur dolor veniam\",\n \"weightCategoryCompleted\": false,\n \"victoryTypes\": \"in aute\",\n \"victoryTypesArray\": \"sunt qui mollit\",\n \"audienceName\": \"in ipsum pariatur Lorem\",\n \"audienceShortName\": \"quis sed\",\n \"sportName\": \"proident aliquip ea minim\",\n \"injuryTime\": -63959198,\n \"warnings\": true,\n \"cautions\": -93266144,\n \"legFouls\": true,\n \"activityTime\": false,\n \"fighter1FullName\": \"velit irure eu amet\",\n \"fighter1DisplayName\": \"anim Excepteur exercitation\",\n \"fighter1FamilyName\": \"officia consectetur adipisicing dolor\",\n \"fighter1GivenName\": \"sit elit\",\n \"fighter1PreferedName\": \"eiusmod Lorem\",\n \"fighter1DrawRank\": \"mollit\",\n \"fighter1RobinRank\": \"cillum velit\",\n \"fighter1SeedNumber\": 437103,\n \"fighter1AthleteId\": \"veniam officia dolore occaecat tempor\",\n \"fighter1PersonId\": \"nisi voluptate cillum\",\n \"fighter1IsSeeded\": false,\n \"fighter1Status\": -94309199,\n \"fighter1IsInjured\": false,\n \"fighter2FullName\": \"fugiat elit id\",\n \"fighter2DisplayName\": \"aliquip consequat tempor dolo\",\n \"fighter2FamilyName\": \"voluptate enim\",\n \"fighter2GivenName\": \"cillum nulla in nostrud\",\n \"fighter2PreferedName\": \"voluptate\",\n \"fighter2DrawRank\": 6462649,\n \"fighter2RobinRank\": -10150921,\n \"fighter2SeedNumber\": 32486712,\n \"fighter2AthleteId\": \"cillum\",\n \"fighter2PersonId\": \"ea in\",\n \"fighter2IsSeeded\": false,\n \"fighter2Status\": 54490796,\n \"fighter2IsInjured\": false,\n \"result\": \"ipsum sunt\",\n \"victoryType\": \"consectetur ea Excepteur \",\n \"endTime\": 73966895,\n \"endDate\": \"eiusmod qui\",\n \"expectedDateStart\": \"adipisicing occaecat ut\",\n \"expectedStartDate\": \"dolor dolor\",\n \"team1Fighters\": [\n  {\n   \"athleteId\": \"Lorem enim dolore\",\n   \"sportEventWeightCategoryId\": \"nulla\",\n   \"weightCategoryFullName\": \"dolore anim Ut ut\",\n   \"weightCategoryShortName\": \"Duis cillum ea Lorem\",\n   \"weightCategoryCountFights\": 65301947,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -85251715,\n   \"countFights\": 89502240,\n   \"personId\": \"irure nisi sunt anim\",\n   \"fullName\": \"sunt dolore ullamco\",\n   \"preferedName\": \"est ullamco Lorem occaecat\",\n   \"displayName\": \"cupidatat\",\n   \"givenName\": \"reprehenderit consequat culpa\",\n   \"familyName\": \"sint elit fugiat\",\n   \"personPhoto\": \"dolore\",\n   \"athenaPrintId\": \"in dolore\",\n   \"teamAlternateName\": \"ex\",\n   \"teamName\": \"aliqua sed id\",\n   \"teamCountryFlag\": \"in sed adipisicing\",\n   \"sportEventTeamId\": \"mollit\",\n   \"sportEventId\": \"pariatu\",\n   \"drawRank\": -65298178,\n   \"robinGroup\": \"irure quis ad pariatur\",\n   \"robinGroupRank\": 87781624,\n   \"teamRankingPoint\": 70731815,\n   \"uwwPoint\": 66496204,\n   \"knockOutStatus\": \"dolor quis Lorem adipisicing\",\n   \"hasLostknockOut\": false,\n   \"completed\": 16424757,\n   \"wins\": 19801712,\n   \"losses\": 33363241,\n   \"technicalPointsFor\": 53743821,\n   \"technicalPointsAgainst\": 20541112,\n   \"technicalPointsDiff\": 83982738,\n   \"rankingPointsFor\": -79142966,\n   \"rankingPointsAgainst\": 89197708,\n   \"rankingPointsDiff\": 76630128,\n   \"winsEasy\": -59420997,\n   \"winsSuperiority\": 50410994,\n   \"rank\": -87430775,\n   \"rankRobinGroup\": -33439940,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"aliqua laborum sed\",\n    \"sportEventWeightCategoryId\": \"nostrud laborum dolore\",\n    \"fighter1Id\": \"in proident dolor magna est\",\n    \"fighter2Id\": \"dolore ea do elit\",\n    \"team1Name\": \"est ad irure ullamco\",\n    \"team1AlternateName\": \"minim in\",\n    \"team1FullName\": \"exercitation pariatur do\",\n    \"team1CountryFlag\": \"dolor Lorem proident\",\n    \"team1CountryFlagScoreboard\": \"adipisicing conseq\",\n    \"team1PoolName\": \"voluptate Ut reprehenderit\",\n    \"team1FightByOpponent\": \"laborum deserunt veniam\",\n    \"team2Name\": \"enim in eu\",\n    \"team2AlternateName\": \"veniam in exercitation do Lorem\",\n    \"team2FullName\": \"dolor officia\",\n    \"team2CountryFlag\": \"ex\",\n    \"team2CountryFlagScoreboard\": \"dolor\",\n    \"team2PoolName\": \"sint\",\n    \"team2FightByOpponent\": \"irure aliquip\",\n    \"roundFriendlyName\": \"cillum magna culpa\",\n    \"displayOrderInRound\": -47586018,\n    \"round1Id\": \"esse\",\n    \"round2Id\": \"magna velit Lorem incididunt\",\n    \"countReferees\": 5098944,\n    \"sportId\": \"velit Ex\",\n    \"athlete1Color\": \"velit ipsum sunt Ut\",\n    \"athlete2Color\": \"sed nisi laboris\",\n    \"athlete1TextColor\": \"voluptate reprehenderit\",\n    \"athlete2TextColor\": \"Duis reprehenderit laborum et\",\n    \"matName\": \"ullamco qui\",\n    \"sessionId\": \"cupidatat aute\",\n    \"sessionName\": \"sint dolore irure\",\n    \"technicalPoints\": \"velit deserunt cillum reprehenderit\",\n    \"uploaderFightTest\": \"aliqua veniam\",\n    \"technicalPointDetails\": \"au\",\n    \"technicalPointTagStatus\": \"amet commodo\",\n    \"technicalPointIds\": \"do\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"in exercitation nulla aliquip laborum\",\n    \"winnerTeam\": \"sunt mollit qui commodo\",\n    \"winnerTeamAlternateName\": \"sed voluptate\",\n    \"sportEventName\": \"sunt Ut eu est\",\n    \"sportEventStartDate\": \"exercitation dolor reprehenderit\",\n    \"sportEventLogo\": \"consequat dolore cupidatat\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"incididunt cupidatat in ipsum\",\n    \"roundsNumber\": 35280465,\n    \"roundDuration\": -77583219,\n    \"sportAlternateName\": \"consectetur id\",\n    \"weightCategoryName\": \"Duis Ut magna\",\n    \"weightCategoryAlternateName\": \"incididunt adipisicing aliqua in\",\n    \"weightCategoryShortName\": \"elit\",\n    \"weightCategoryMaxWeight\": -25666620,\n    \"weightCategoryFullName\": \"nulla consequat minim a\",\n    \"weightCategoryAverageDuration\": -49529501,\n    \"weightCategoryColor\": \"commodo reprehenderit in et\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"ipsum ex aute sunt\",\n    \"victoryTypesArray\": \"ullamco\",\n    \"audienceName\": \"Excepteur ex culpa veniam\",\n    \"audienceShortName\": \"qu\",\n    \"sportName\": \"Lo\",\n    \"injuryTime\": -70549333,\n    \"warnings\": false,\n    \"cautions\": 72910858,\n    \"legFouls\": true,\n    \"activityTime\": true,\n    \"fighter1FullName\": \"laborum magna cupidatat sed\",\n    \"fighter1DisplayName\": \"sit officia velit ad\",\n    \"fighter1FamilyName\": \"ut consequat\",\n    \"fighter1GivenName\": \"do Lorem veniam\",\n    \"fighter1PreferedName\": \"magna adipisicing\",\n    \"fighter1DrawRank\": \"fugiat Lorem adipisicing deserunt Ut\",\n    \"fighter1RobinRank\": \"nostrud nisi proident enim laboris\",\n    \"fighter1SeedNumber\": -87316167,\n    \"fighter1AthleteId\": \"in proident officia\",\n    \"fighter1PersonId\": \"reprehenderit\",\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": 1854832,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"pariatur ad\",\n    \"fighter2DisplayName\": \"labore\",\n    \"fighter2FamilyName\": \"dolor sunt in\",\n    \"fighter2GivenName\": \"enim officia consectetur\",\n    \"fighter2PreferedName\": \"laboris non ullamco inci\",\n    \"fighter2DrawRank\": -99164869,\n    \"fighter2RobinRank\": -34143024,\n    \"fighter2SeedNumber\": -29663477,\n    \"fighter2AthleteId\": \"nulla et ad\",\n    \"fighter2PersonId\": \"ad elit dolore\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": 80926319,\n    \"fighter2IsInjured\": false,\n    \"result\": \"id ut ex Ut pariatur\",\n    \"victoryType\": \"aliquip dolore\",\n    \"endTime\": -49025306,\n    \"endDate\": \"et minim\",\n    \"expectedDateStart\": \"in cupidatat quis voluptate commodo\",\n    \"expectedStartDate\": \"elit eiusmod nostrud\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"a\",\n    \"resultText\": \"veniam reprehenderit\",\n    \"resultTextSmall\": \"nostrud veniam \",\n    \"roundRenamedSmall\": \"dolor L\",\n    \"parentFightNumber1\": 35784588,\n    \"parentFightNumber2\": 87633246,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": false,\n    \"id\": \"in sunt mollit\",\n    \"parentFight1Id\": \"aliqua\",\n    \"parentFight2Id\": \"exercitation sint Excepteur veniam eiusmod\",\n    \"fighter1\": \"dolore deserunt exercitation irure\",\n    \"fighter1RankingPoint\": 5965,\n    \"fighter2\": \"consectetur sunt enim magna\",\n    \"fighter2RankingPoint\": 7289,\n    \"refereeGroup\": \"s\",\n    \"sportEventTeam1Id\": \"labore ea\",\n    \"sportEventTeam2Id\": \"in dolore ex minim\",\n    \"fightMatId\": \"dolore quis\",\n    \"round\": \"labo\",\n    \"qualifying\": false,\n    \"teamFightId\": \"reprehenderit fugiat pariatur nulla cillum\",\n    \"status\": 72693182,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": 99826828,\n    \"fightNumber\": 8999,\n    \"roundWeight\": 4886,\n    \"repechageWeight\": 5473,\n    \"repechageSection\": 2319,\n    \"displayOrder\": 5103,\n    \"canceled\": \"adipisicing do\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"est fugiat Lorem\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": false,\n   \"isRobinGroupNotRanked\": true,\n   \"id\": \"nostrud id\",\n   \"sportEventWeightCategory\": \"adipisicing dolor non aliqua\",\n   \"weight\": 469,\n   \"drawNumber\": 38,\n   \"seedNumber\": 12,\n   \"fighterWeight\": -48702082.82680615,\n   \"points\": 397,\n   \"fighterStatus\": 18206590\n  },\n  {\n   \"athleteId\": \"Duis culpa eu consequat\",\n   \"sportEventWeightCategoryId\": \"sunt officia non id\",\n   \"weightCategoryFullName\": \"ipsum do incididunt amet dolor\",\n   \"weightCategoryShortName\": \"minim Lorem eiusmod\",\n   \"weightCategoryCountFights\": -87028154,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -65920473,\n   \"countFights\": 69220086,\n   \"personId\": \"exercitation occaecat sint Ut nisi\",\n   \"fullName\": \"do elit sed\",\n   \"preferedName\": \"dolore reprehenderit fugiat\",\n   \"displayName\": \"ea pariatur exercitation nulla\",\n   \"givenName\": \"qui dolore Duis\",\n   \"familyName\": \"amet eu ut\",\n   \"personPhoto\": \"ad officia quis\",\n   \"athenaPrintId\": \"magna\",\n   \"teamAlternateName\": \"reprehenderit elit Ut\",\n   \"teamName\": \"ullamco Excepteur\",\n   \"teamCountryFlag\": \"amet minim\",\n   \"sportEventTeamId\": \"id enim dolore irure\",\n   \"sportEventId\": \"quis\",\n   \"drawRank\": -6420052,\n   \"robinGroup\": \"sint magna occaecat\",\n   \"robinGroupRank\": -63953604,\n   \"teamRankingPoint\": -9287188,\n   \"uwwPoint\": 56961863,\n   \"knockOutStatus\": \"dolore esse cupidatat\",\n   \"hasLostknockOut\": false,\n   \"completed\": -95817447,\n   \"wins\": -16853384,\n   \"losses\": 30098729,\n   \"technicalPointsFor\": -46444723,\n   \"technicalPointsAgainst\": 73467423,\n   \"technicalPointsDiff\": -29366472,\n   \"rankingPointsFor\": 32324620,\n   \"rankingPointsAgainst\": -62411411,\n   \"rankingPointsDiff\": -93343453,\n   \"winsEasy\": -85478811,\n   \"winsSuperiority\": -67058145,\n   \"rank\": 87333857,\n   \"rankRobinGroup\": 78636122,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"in in quis adipisicing\",\n    \"sportEventWeightCategoryId\": \"non ut\",\n    \"fighter1Id\": \"nisi deserunt laborum\",\n    \"fighter2Id\": \"deserunt nulla \",\n    \"team1Name\": \"dolor sed anim\",\n    \"team1AlternateName\": \"fugiat amet magna\",\n    \"team1FullName\": \"culpa eu\",\n    \"team1CountryFlag\": \"veniam eu ipsum minim\",\n    \"team1CountryFlagScoreboard\": \"irure amet Excepteur eiusmod velit\",\n    \"team1PoolName\": \"do aute\",\n    \"team1FightByOpponent\": \"in aliqua\",\n    \"team2Name\": \"Ut laborum\",\n    \"team2AlternateName\": \"Excepteur\",\n    \"team2FullName\": \"enim cillum\",\n    \"team2CountryFlag\": \"ea in nostrud et\",\n    \"team2CountryFlagScoreboard\": \"ea\",\n    \"team2PoolName\": \"magna id Lorem Excepteur\",\n    \"team2FightByOpponent\": \"Lorem\",\n    \"roundFriendlyName\": \"dolore ut eiusmod\",\n    \"displayOrderInRound\": -21155627,\n    \"round1Id\": \"veniam \",\n    \"round2Id\": \"reprehenderit eiusmod consequat\",\n    \"countReferees\": -97951142,\n    \"sportId\": \"eiusmod tempor cillum aliquip\",\n    \"athlete1Color\": \"irure eu nulla ex\",\n    \"athlete2Color\": \"officia non fugiat\",\n    \"athlete1TextColor\": \"culpa labore sunt exercitation do\",\n    \"athlete2TextColor\": \"ut anim\",\n    \"matName\": \"minim reprehenderit Ut\",\n    \"sessionId\": \"elit eiusmod ut\",\n    \"sessionName\": \"non Lorem commodo\",\n    \"technicalPoints\": \"Excepteur deserunt amet\",\n    \"uploaderFightTest\": \"occaecat officia nulla\",\n    \"technicalPointDetails\": \"quis sint ad qui\",\n    \"technicalPointTagStatus\": \"sint id\",\n    \"technicalPointIds\": \"proident enim sint sunt\",\n    \"isCompleted\": false,\n    \"isReady\": false,\n    \"isRobinGroupFight\": false,\n    \"winnerFighter\": \"in cillum lab\",\n    \"winnerTeam\": \"sed elit\",\n    \"winnerTeamAlternateName\": \"dolor eiusmod dolor officia nisi\",\n    \"sportEventName\": \"magna culpa Excepteur enim\",\n    \"sportEventStartDate\": \"dolor\",\n    \"sportEventLogo\": \"laboris quis velit\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"sunt nostrud sint fugiat magna\",\n    \"roundsNumber\": -88141765,\n    \"roundDuration\": -41046831,\n    \"sportAlternateName\": \"sit aute nulla\",\n    \"weightCategoryName\": \"enim aute occaeca\",\n    \"weightCategoryAlternateName\": \"dolore Lorem in\",\n    \"weightCategoryShortName\": \"consectetur aute amet Ut\",\n    \"weightCategoryMaxWeight\": 77022726,\n    \"weightCategoryFullName\": \"irure exercitation ci\",\n    \"weightCategoryAverageDuration\": 73265304,\n    \"weightCategoryColor\": \"ipsum qui\",\n    \"weightCategoryCompleted\": true,\n    \"victoryTypes\": \"adipisicing ut ex magna\",\n    \"victoryTypesArray\": \"ut deserunt est adipisicing\",\n    \"audienceName\": \"mollit cupidatat\",\n    \"audienceShortName\": \"dolore tempor pariatur\",\n    \"sportName\": \"aliquip\",\n    \"injuryTime\": -60909331,\n    \"warnings\": true,\n    \"cautions\": 60037475,\n    \"legFouls\": true,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"proident\",\n    \"fighter1DisplayName\": \"deserunt reprehenderit minim\",\n    \"fighter1FamilyName\": \"sunt velit tempor\",\n    \"fighter1GivenName\": \"id Excepteur ut \",\n    \"fighter1PreferedName\": \"proident anim\",\n    \"fighter1DrawRank\": \"occaecat reprehenderit magna consectetur\",\n    \"fighter1RobinRank\": \"incididunt\",\n    \"fighter1SeedNumber\": 74121116,\n    \"fighter1AthleteId\": \"dolore\",\n    \"fighter1PersonId\": \"ad anim\",\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": -14326324,\n    \"fighter1IsInjured\": false,\n    \"fighter2FullName\": \"anim tempor nulla non\",\n    \"fighter2DisplayName\": \"Excepteur sed\",\n    \"fighter2FamilyName\": \"pariatur ipsum et\",\n    \"fighter2GivenName\": \"aute reprehenderit\",\n    \"fighter2PreferedName\": \"sint\",\n    \"fighter2DrawRank\": -10383611,\n    \"fighter2RobinRank\": -16215354,\n    \"fighter2SeedNumber\": -60388048,\n    \"fighter2AthleteId\": \"ipsum occaecat nulla\",\n    \"fighter2PersonId\": \"Ut sint\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -74121322,\n    \"fighter2IsInjured\": true,\n    \"result\": \"non reprehenderit\",\n    \"victoryType\": \"minim iru\",\n    \"endTime\": -84120596,\n    \"endDate\": \"dolor laboris nostrud et\",\n    \"expectedDateStart\": \"do occaecat cupidatat officia\",\n    \"expectedStartDate\": \"eiusmod commodo mollit\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"adipisicing id ut sit\",\n    \"resultText\": \"commodo id Dui\",\n    \"resultTextSmall\": \"minim eu cillum\",\n    \"roundRenamedSmall\": \"Ut veniam\",\n    \"parentFightNumber1\": 45033490,\n    \"parentFightNumber2\": 76648025,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": false,\n    \"id\": \"non sint\",\n    \"parentFight1Id\": \"aute velit in\",\n    \"parentFight2Id\": \"eiusmod laborum anim\",\n    \"fighter1\": \"veniam minim\",\n    \"fighter1RankingPoint\": 8935,\n    \"fighter2\": \"ullamco incididunt laboris cillum ip\",\n    \"fighter2RankingPoint\": 8394,\n    \"refereeGroup\": \"U\",\n    \"sportEventTeam1Id\": \"in velit\",\n    \"sportEventTeam2Id\": \"nisi amet eu\",\n    \"fightMatId\": \"exercitation elit eu\",\n    \"round\": \"moll\",\n    \"qualifying\": true,\n    \"teamFightId\": \"laborum volup\",\n    \"status\": -21922637,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": 36645992,\n    \"fightNumber\": 6255,\n    \"roundWeight\": 3937,\n    \"repechageWeight\": 857,\n    \"repechageSection\": 1853,\n    \"displayOrder\": 7114,\n    \"canceled\": \"et in\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"culpa consequat eiusmod\"\n   },\n   \"isCompeting\": true,\n   \"hasOpenFight\": true,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": true,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"aute sit officia pariatur sint\",\n   \"sportEventWeightCategory\": \"irure mollit\",\n   \"weight\": 379,\n   \"drawNumber\": 116,\n   \"seedNumber\": 15,\n   \"fighterWeight\": 16143581.587376505,\n   \"points\": 37,\n   \"fighterStatus\": 18797428\n  }\n ],\n \"team2Fighters\": [\n  {\n   \"athleteId\": \"enim sit Duis amet\",\n   \"sportEventWeightCategoryId\": \"dolor\",\n   \"weightCategoryFullName\": \"Ut pariatur fugiat dolor ut\",\n   \"weightCategoryShortName\": \"eiusmod\",\n   \"weightCategoryCountFights\": 22647821,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -21079636,\n   \"countFights\": 46856339,\n   \"personId\": \"sint\",\n   \"fullName\": \"aute veniam consectetur\",\n   \"preferedName\": \"cillum Duis dolore\",\n   \"displayName\": \"con\",\n   \"givenName\": \"ex fugiat\",\n   \"familyName\": \"ut exercitation\",\n   \"personPhoto\": \"pariatur Dui\",\n   \"athenaPrintId\": \"nisi est\",\n   \"teamAlternateName\": \"elit mollit\",\n   \"teamName\": \"sint pariatur in\",\n   \"teamCountryFlag\": \"consectetur sint dolore esse\",\n   \"sportEventTeamId\": \"reprehenderit\",\n   \"sportEventId\": \"pariatur consequat in\",\n   \"drawRank\": 79225617,\n   \"robinGroup\": \"Excepteur ut veniam\",\n   \"robinGroupRank\": 80128348,\n   \"teamRankingPoint\": 33631568,\n   \"uwwPoint\": 43293087,\n   \"knockOutStatus\": \"ut velit\",\n   \"hasLostknockOut\": true,\n   \"completed\": -3536638,\n   \"wins\": -93450887,\n   \"losses\": -59351359,\n   \"technicalPointsFor\": -13277043,\n   \"technicalPointsAgainst\": 5516165,\n   \"technicalPointsDiff\": 19458735,\n   \"rankingPointsFor\": -29385301,\n   \"rankingPointsAgainst\": -88852673,\n   \"rankingPointsDiff\": -53984547,\n   \"winsEasy\": 70239790,\n   \"winsSuperiority\": -42823263,\n   \"rank\": -85265566,\n   \"rankRobinGroup\": -96420443,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"id dolor deserunt\",\n    \"sportEventWeightCategoryId\": \"Lorem\",\n    \"fighter1Id\": \"culpa proident Lorem\",\n    \"fighter2Id\": \"officia cupidatat\",\n    \"team1Name\": \"sint labore\",\n    \"team1AlternateName\": \"in dolor Ut elit\",\n    \"team1FullName\": \"tempor mollit in dolor\",\n    \"team1CountryFlag\": \"quis adipisicing\",\n    \"team1CountryFlagScoreboard\": \"in dolore nulla magna aliqua\",\n    \"team1PoolName\": \"Ut anim ad cillum\",\n    \"team1FightByOpponent\": \"elit nisi\",\n    \"team2Name\": \"irure voluptate qui\",\n    \"team2AlternateName\": \"Excepteur quis\",\n    \"team2FullName\": \"culpa consectetur deserunt\",\n    \"team2CountryFlag\": \"mollit sed ut ad\",\n    \"team2CountryFlagScoreboard\": \"veniam\",\n    \"team2PoolName\": \"dolor enim tempor reprehenderit\",\n    \"team2FightByOpponent\": \"voluptate sunt esse paria\",\n    \"roundFriendlyName\": \"proident\",\n    \"displayOrderInRound\": 89632976,\n    \"round1Id\": \"fugiat ut mollit pariatur\",\n    \"round2Id\": \"id a\",\n    \"countReferees\": -51101805,\n    \"sportId\": \"reprehenderit Duis enim aute\",\n    \"athlete1Color\": \"exercitation quis in et\",\n    \"athlete2Color\": \"nulla laboris aliquip anim\",\n    \"athlete1TextColor\": \"reprehenderit sunt\",\n    \"athlete2TextColor\": \"velit consectetur\",\n    \"matName\": \"consectetur commodo velit in\",\n    \"sessionId\": \"nulla proident aliqua\",\n    \"sessionName\": \"Duis occaecat\",\n    \"technicalPoints\": \"mollit\",\n    \"uploaderFightTest\": \"exercitation proident sit\",\n    \"technicalPointDetails\": \"labore in dolore\",\n    \"technicalPointTagStatus\": \"exercitation\",\n    \"technicalPointIds\": \"quis ex\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"irure sit\",\n    \"winnerTeam\": \"in Lorem minim incididunt\",\n    \"winnerTeamAlternateName\": \"consequat aliquip amet\",\n    \"sportEventName\": \"reprehenderit consequat\",\n    \"sportEventStartDate\": \"enim sit\",\n    \"sportEventLogo\": \"in dolore\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"consectetur dolor anim sed\",\n    \"roundsNumber\": 78736094,\n    \"roundDuration\": -25267456,\n    \"sportAlternateName\": \"id sint\",\n    \"weightCategoryName\": \"minim commodo sit dolor\",\n    \"weightCategoryAlternateName\": \"eiusmod magna\",\n    \"weightCategoryShortName\": \"Lorem tempor sit\",\n    \"weightCategoryMaxWeight\": -55669494,\n    \"weightCategoryFullName\": \"Lorem irure cillum ullamco incididunt\",\n    \"weightCategoryAverageDuration\": -29530673,\n    \"weightCategoryColor\": \"eu Excepteur tempor veniam dolo\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"sit do sint\",\n    \"victoryTypesArray\": \"incididunt ut velit dolor\",\n    \"audienceName\": \"consequat voluptate\",\n    \"audienceShortName\": \"id eiusmod sunt voluptate\",\n    \"sportName\": \"dolor Excepteur deserunt\",\n    \"injuryTime\": -59928946,\n    \"warnings\": false,\n    \"cautions\": 21440665,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"Excepteur enim\",\n    \"fighter1DisplayName\": \"non occaecat sint exercitation sunt\",\n    \"fighter1FamilyName\": \"in tempor \",\n    \"fighter1GivenName\": \"laboris\",\n    \"fighter1PreferedName\": \"nostrud eu id cupidatat\",\n    \"fighter1DrawRank\": \"in\",\n    \"fighter1RobinRank\": \"ullamco quis do eiusmod\",\n    \"fighter1SeedNumber\": 70399678,\n    \"fighter1AthleteId\": \"quis in\",\n    \"fighter1PersonId\": \"occaecat aute dolore\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": 93887700,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"sed dolor Duis\",\n    \"fighter2DisplayName\": \"ea\",\n    \"fighter2FamilyName\": \"eu deserunt\",\n    \"fighter2GivenName\": \"nulla pariatur commodo\",\n    \"fighter2PreferedName\": \"dolore culpa nisi\",\n    \"fighter2DrawRank\": -11042723,\n    \"fighter2RobinRank\": -18111987,\n    \"fighter2SeedNumber\": -55748236,\n    \"fighter2AthleteId\": \"anim est ut\",\n    \"fighter2PersonId\": \"sint Ut do ipsum\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -69309131,\n    \"fighter2IsInjured\": false,\n    \"result\": \"incididunt dolore ex\",\n    \"victoryType\": \"et ipsum id\",\n    \"endTime\": 83373315,\n    \"endDate\": \"velit Duis voluptate ipsum\",\n    \"expectedDateStart\": \"labore sit\",\n    \"expectedStartDate\": \"qui aliquip\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"sit dolor occ\",\n    \"resultText\": \"eu laborum sed\",\n    \"resultTextSmall\": \"anim s\",\n    \"roundRenamedSmall\": \"nisi adipisicing\",\n    \"parentFightNumber1\": -27387783,\n    \"parentFightNumber2\": -31926816,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": false,\n    \"id\": \"magna culpa incididunt\",\n    \"parentFight1Id\": \"nisi dolore\",\n    \"parentFight2Id\": \"officia commodo nulla nostrud\",\n    \"fighter1\": \"laboris in Ut aliqua\",\n    \"fighter1RankingPoint\": 7039,\n    \"fighter2\": \"sit non Lorem\",\n    \"fighter2RankingPoint\": 5537,\n    \"refereeGroup\": \"p\",\n    \"sportEventTeam1Id\": \"dolore\",\n    \"sportEventTeam2Id\": \"laboris Ut\",\n    \"fightMatId\": \"ipsum do\",\n    \"round\": \"ut i\",\n    \"qualifying\": false,\n    \"teamFightId\": \"pariatur in\",\n    \"status\": -40027213,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": -87677151,\n    \"fightNumber\": 2098,\n    \"roundWeight\": 2329,\n    \"repechageWeight\": 289,\n    \"repechageSection\": 2775,\n    \"displayOrder\": 2031,\n    \"canceled\": \"enim et in eu\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"sint est velit\"\n   },\n   \"isCompeting\": true,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": true,\n   \"isNotRanked\": false,\n   \"isInjured\": true,\n   \"isForfeit\": true,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"id Lorem\",\n   \"sportEventWeightCategory\": \"consectetur officia laboris\",\n   \"weight\": 71,\n   \"drawNumber\": 233,\n   \"seedNumber\": 9,\n   \"fighterWeight\": 37079934.39887276,\n   \"points\": 368,\n   \"fighterStatus\": -2121922\n  },\n  {\n   \"athleteId\": \"velit dolor sunt Duis\",\n   \"sportEventWeightCategoryId\": \"anim ipsum\",\n   \"weightCategoryFullName\": \"aliqua esse\",\n   \"weightCategoryShortName\": \"Ut fugiat ad\",\n   \"weightCategoryCountFights\": -47738792,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -27231735,\n   \"countFights\": 75258614,\n   \"personId\": \"ullamco amet proident commodo magna\",\n   \"fullName\": \"dolor do velit sed\",\n   \"preferedName\": \"reprehenderit eu Excepteur dolore ad\",\n   \"displayName\": \"enim\",\n   \"givenName\": \"consequat in eu eiusmod pariatur\",\n   \"familyName\": \"Duis elit reprehenderit cupidatat\",\n   \"personPhoto\": \"culpa elit ex aliqua\",\n   \"athenaPrintId\": \"consectetur\",\n   \"teamAlternateName\": \"c\",\n   \"teamName\": \"cupidatat consectetur in\",\n   \"teamCountryFlag\": \"nisi tempor\",\n   \"sportEventTeamId\": \"anim exercitation nostrud sint\",\n   \"sportEventId\": \"ea reprehenderit\",\n   \"drawRank\": -76579260,\n   \"robinGroup\": \"do laborum qui nostrud\",\n   \"robinGroupRank\": 27845830,\n   \"teamRankingPoint\": -66818670,\n   \"uwwPoint\": -65019220,\n   \"knockOutStatus\": \"nisi est magna veniam cupidatat\",\n   \"hasLostknockOut\": true,\n   \"completed\": -30418149,\n   \"wins\": -285000,\n   \"losses\": -78251818,\n   \"technicalPointsFor\": -3924738,\n   \"technicalPointsAgainst\": 71276539,\n   \"technicalPointsDiff\": -14679820,\n   \"rankingPointsFor\": -37203769,\n   \"rankingPointsAgainst\": 77192010,\n   \"rankingPointsDiff\": -5720741,\n   \"winsEasy\": -49705601,\n   \"winsSuperiority\": 42257606,\n   \"rank\": -69976802,\n   \"rankRobinGroup\": -84582679,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"ea irure\",\n    \"sportEventWeightCategoryId\": \"nulla aliquip\",\n    \"fighter1Id\": \"qui nostrud nisi\",\n    \"fighter2Id\": \"proident\",\n    \"team1Name\": \"id nulla labore ea\",\n    \"team1AlternateName\": \"id ipsum enim aute dolor\",\n    \"team1FullName\": \"esse proident ullamco irure\",\n    \"team1CountryFlag\": \"reprehenderit officia exercitation\",\n    \"team1CountryFlagScoreboard\": \"in in magna occaecat\",\n    \"team1PoolName\": \"dolor eiusmod Excepteur exercitation\",\n    \"team1FightByOpponent\": \"aute pariatur\",\n    \"team2Name\": \"ut nulla\",\n    \"team2AlternateName\": \"consectetur culpa in\",\n    \"team2FullName\": \"Lorem dolore ex\",\n    \"team2CountryFlag\": \"in\",\n    \"team2CountryFlagScoreboard\": \"deserunt do esse\",\n    \"team2PoolName\": \"nulla irure reprehenderit anim dolor\",\n    \"team2FightByOpponent\": \"pariatur sed\",\n    \"roundFriendlyName\": \"sint ex ullamco ea\",\n    \"displayOrderInRound\": 5939084,\n    \"round1Id\": \"proident\",\n    \"round2Id\": \"occaecat aute eiusmod commodo nulla\",\n    \"countReferees\": 70329375,\n    \"sportId\": \"sunt ex\",\n    \"athlete1Color\": \"non veniam fugiat\",\n    \"athlete2Color\": \"fugiat voluptate in magna cupidatat\",\n    \"athlete1TextColor\": \"consectetur Duis veniam culpa\",\n    \"athlete2TextColor\": \"velit officia Lorem\",\n    \"matName\": \"sint labore est\",\n    \"sessionId\": \"dolor qui Duis\",\n    \"sessionName\": \"tempor non qui ipsum\",\n    \"technicalPoints\": \"ex ut voluptate ad\",\n    \"uploaderFightTest\": \"enim ipsum aute Ut mollit\",\n    \"technicalPointDetails\": \"pariatur commodo enim \",\n    \"technicalPointTagStatus\": \"ex commodo\",\n    \"technicalPointIds\": \"Lorem ut reprehenderit occaecat\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"dolor sint labore et\",\n    \"winnerTeam\": \"sit\",\n    \"winnerTeamAlternateName\": \"pariatur deserunt\",\n    \"sportEventName\": \"velit ut veniam\",\n    \"sportEventStartDate\": \"id\",\n    \"sportEventLogo\": \"nisi reprehenderit\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"Duis Ut cillum\",\n    \"roundsNumber\": 28586660,\n    \"roundDuration\": 73711782,\n    \"sportAlternateName\": \"esse ad sit\",\n    \"weightCategoryName\": \"aute voluptate ad dolor\",\n    \"weightCategoryAlternateName\": \"sint reprehenderit in\",\n    \"weightCategoryShortName\": \"consectetur en\",\n    \"weightCategoryMaxWeight\": 98813292,\n    \"weightCategoryFullName\": \"ex tempor aliquip id\",\n    \"weightCategoryAverageDuration\": 23523629,\n    \"weightCategoryColor\": \"ea Duis in adipisicing\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"et voluptate\",\n    \"victoryTypesArray\": \"ut aliquip\",\n    \"audienceName\": \"consectetur aliquip esse ullamco anim\",\n    \"audienceShortName\": \"do\",\n    \"sportName\": \"Lorem in laboris nisi\",\n    \"injuryTime\": -43826605,\n    \"warnings\": true,\n    \"cautions\": -16815617,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"officia exercitation labore reprehenderit\",\n    \"fighter1DisplayName\": \"Excepteur aliquip elit\",\n    \"fighter1FamilyName\": \"ad laborum \",\n    \"fighter1GivenName\": \"dolor pariatur incididunt Ex\",\n    \"fighter1PreferedName\": \"exercitation est Duis sint in\",\n    \"fighter1DrawRank\": \"nisi quis\",\n    \"fighter1RobinRank\": \"ipsum cupidatat cul\",\n    \"fighter1SeedNumber\": -82373197,\n    \"fighter1AthleteId\": \"nisi laborum commodo exercitation\",\n    \"fighter1PersonId\": \"amet et\",\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": 97237310,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"ullamco incididunt nostrud\",\n    \"fighter2DisplayName\": \"aliqua nostrud enim eu irure\",\n    \"fighter2FamilyName\": \"labor\",\n    \"fighter2GivenName\": \"ex\",\n    \"fighter2PreferedName\": \"dolor eu\",\n    \"fighter2DrawRank\": -11025208,\n    \"fighter2RobinRank\": 28266098,\n    \"fighter2SeedNumber\": 27348374,\n    \"fighter2AthleteId\": \"ullamco proident\",\n    \"fighter2PersonId\": \"Excepteur Ut r\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -38412376,\n    \"fighter2IsInjured\": false,\n    \"result\": \"labor\",\n    \"victoryType\": \"sunt qui et id ipsum\",\n    \"endTime\": 12911324,\n    \"endDate\": \"qui enim ea deserunt\",\n    \"expectedDateStart\": \"nulla aute\",\n    \"expectedStartDate\": \"pariatur laborum irure id\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"adipisicing sunt laboris fugiat\",\n    \"resultText\": \"ex ullamco culpa\",\n    \"resultTextSmall\": \"esse ullamco\",\n    \"roundRenamedSmall\": \"c\",\n    \"parentFightNumber1\": 71711127,\n    \"parentFightNumber2\": 55811869,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": false,\n    \"isCountdown\": false,\n    \"id\": \"nulla reprehenderit fugiat\",\n    \"parentFight1Id\": \"eu dolor pariatur\",\n    \"parentFight2Id\": \"quis Lorem eu voluptate\",\n    \"fighter1\": \"occaecat in ullamco\",\n    \"fighter1RankingPoint\": 1797,\n    \"fighter2\": \"consequat ipsum\",\n    \"fighter2RankingPoint\": 1265,\n    \"refereeGroup\": \"m\",\n    \"sportEventTeam1Id\": \"irure ut cupidatat voluptate laboris\",\n    \"sportEventTeam2Id\": \"aliquip\",\n    \"fightMatId\": \"amet fugiat eu\",\n    \"round\": \"offi\",\n    \"qualifying\": false,\n    \"teamFightId\": \"nostrud\",\n    \"status\": 16314593,\n    \"rankingCheck\": true,\n    \"technicalCheck\": false,\n    \"weight\": 91942988,\n    \"fightNumber\": 3110,\n    \"roundWeight\": 4767,\n    \"repechageWeight\": 9180,\n    \"repechageSection\": 8791,\n    \"displayOrder\": 5902,\n    \"canceled\": \"do in amet\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"veniam Lorem\"\n   },\n   \"isCompeting\": true,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": false,\n   \"isRobinGroupNotRanked\": true,\n   \"id\": \"cupidatat commodo sunt dolor\",\n   \"sportEventWeightCategory\": \"ad ex\",\n   \"weight\": 419,\n   \"drawNumber\": 237,\n   \"seedNumber\": 22,\n   \"fighterWeight\": -13706903.352045476,\n   \"points\": 244,\n   \"fighterStatus\": -72863162\n  }\n ],\n \"rankingPointNiceName\": \"ipsum veniam\",\n \"resultText\": \"amet non laborum\",\n \"resultTextSmall\": \"cupid\",\n \"roundRenamedSmall\": \"laboris qui amet\",\n \"parentFightNumber1\": 41287922,\n \"parentFightNumber2\": 26928532,\n \"fightRefereesWithRole\": [\n  {\n   \"refereeId\": \"enim voluptate in commodo\",\n   \"fightId\": \"non in ad in ullamco\",\n   \"refereeRole\": \"sed\",\n   \"refereeFullName\": \"cupidatat dolor\",\n   \"refereeDisplayName\": \"esse tempor\",\n   \"refereeNumber\": -33043160,\n   \"refereeTeamAlternateName\": \"enim aliqua null\",\n   \"refereeCountryFlag\": \"ea\",\n   \"refereeFull\": \"Duis do ea\",\n   \"id\": \"consequat et\"\n  },\n  {\n   \"refereeId\": \"deserunt sed\",\n   \"fightId\": \"proident qui eiusmod labore\",\n   \"refereeRole\": \"proident Ut pariatur in\",\n   \"refereeFullName\": \"sunt adipisicing\",\n   \"refereeDisplayName\": \"do voluptate\",\n   \"refereeNumber\": 20286017,\n   \"refereeTeamAlternateName\": \"Duis in consequat\",\n   \"refereeCountryFlag\": \"labore laboris nisi minim\",\n   \"refereeFull\": \"reprehenderit ad elit\",\n   \"id\": \"Lorem\"\n  }\n ],\n \"needsRefresh\": false,\n \"isCountdown\": false,\n \"id\": \"in ea\",\n \"parentFight1Id\": \"ex aliqua in nisi\",\n \"parentFight2Id\": \"id\",\n \"fighter1\": \"do culpa officia ipsum\",\n \"fighter1RankingPoint\": 2227,\n \"fighter2\": \"amet aliquip dolore in\",\n \"fighter2RankingPoint\": 5581,\n \"refereeGroup\": \"e\",\n \"sportEventTeam1Id\": \"dolor velit elit tempor\",\n \"sportEventTeam2Id\": \"aliqua dolore Excepteur reprehenderit\",\n \"fightMatId\": \"in sit dolore\",\n \"round\": \"cupi\",\n \"qualifying\": true,\n \"teamFightId\": \"aliqua sunt ipsum\",\n \"status\": 39483507,\n \"rankingCheck\": true,\n \"technicalCheck\": false,\n \"weight\": -1576602,\n \"fightNumber\": 8273,\n \"roundWeight\": 779,\n \"repechageWeight\": 9845,\n \"repechageSection\": 2246,\n \"displayOrder\": 8131,\n \"canceled\": \"in nisi i\",\n \"fightReferees\": [\n  {\n   \"refereeId\": \"Lorem non in ad\",\n   \"fightId\": \"enim Ut \",\n   \"refereeRole\": \"anim laborum consectetur\",\n   \"refereeFullName\": \"aute ipsum Lorem in amet\",\n   \"refereeDisplayName\": \"cupidatat Duis\",\n   \"refereeNumber\": 32817692,\n   \"refereeTeamAlternateName\": \"eiusmod volup\",\n   \"refereeCountryFlag\": \"dolor sit sint\",\n   \"refereeFull\": \"sint magna\",\n   \"id\": \"Duis\"\n  },\n  {\n   \"refereeId\": \"magna et\",\n   \"fightId\": \"Excepteur \",\n   \"refereeRole\": \"sit nostrud est\",\n   \"refereeFullName\": \"incididunt\",\n   \"refereeDisplayName\": \"mollit irure\",\n   \"refereeNumber\": 29447397,\n   \"refereeTeamAlternateName\": \"laborum ex\",\n   \"refereeCountryFlag\": \"irure\",\n   \"refereeFull\": \"nostrud mollit ut velit\",\n   \"id\": \"cupidatat\"\n  }\n ],\n \"odfCode\": \"consequat in amet\"\n}"
								}
							]
						},
						{
							"name": "Get a fight by its ODF Wrestlers Code",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"odf",
										":odfCompetitionCode",
										"get",
										":odfWrestler1",
										":odfWrestler2"
									],
									"variable": [
										{
											"key": "odfCompetitionCode",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "odfWrestler1",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "odfWrestler2",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a fight",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												":odfCompetitionCode",
												"get",
												":odfWrestler1",
												":odfWrestler2"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "odfCompetitionCode"
												},
												{
													"key": "odfWrestler1"
												},
												{
													"key": "odfWrestler2"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sportEventId\": \"fugiat anim reprehenderit\",\n \"sportEventWeightCategoryId\": \"eiusm\",\n \"fighter1Id\": \"deserunt fugiat\",\n \"fighter2Id\": \"adipisicing commodo\",\n \"team1Name\": \"Ut\",\n \"team1AlternateName\": \"laborum Excepteur sunt\",\n \"team1FullName\": \"Lorem in pariatur \",\n \"team1CountryFlag\": \"dolore id adipisicing sed\",\n \"team1CountryFlagScoreboard\": \"ex in\",\n \"team1PoolName\": \"in esse dolore anim\",\n \"team1FightByOpponent\": \"non\",\n \"team2Name\": \"sint es\",\n \"team2AlternateName\": \"consequat dolore\",\n \"team2FullName\": \"in eu elit non\",\n \"team2CountryFlag\": \"quis ullamco\",\n \"team2CountryFlagScoreboard\": \"eiusmod\",\n \"team2PoolName\": \"nisi cupidatat\",\n \"team2FightByOpponent\": \"culpa deserunt laboris dolor\",\n \"roundFriendlyName\": \"nostrud ea enim in\",\n \"displayOrderInRound\": 20326689,\n \"round1Id\": \"Excepteur cillum nostrud minim ut\",\n \"round2Id\": \"culpa officia magna cupidatat\",\n \"countReferees\": -42043436,\n \"sportId\": \"volupt\",\n \"athlete1Color\": \"dolore in aute\",\n \"athlete2Color\": \"Excepteur\",\n \"athlete1TextColor\": \"occaecat aliqu\",\n \"athlete2TextColor\": \"nisi Excepteur\",\n \"matName\": \"ut min\",\n \"sessionId\": \"Duis officia aute esse\",\n \"sessionName\": \"quis ea Ut ve\",\n \"technicalPoints\": \"exercitation id\",\n \"uploaderFightTest\": \"voluptate in ullamco magna\",\n \"technicalPointDetails\": \"anim esse\",\n \"technicalPointTagStatus\": \"Excepteur incididunt veniam dolor\",\n \"technicalPointIds\": \"in ve\",\n \"isCompleted\": true,\n \"isReady\": false,\n \"isRobinGroupFight\": true,\n \"winnerFighter\": \"dolor\",\n \"winnerTeam\": \"dolore in\",\n \"winnerTeamAlternateName\": \"in ullamco occaecat Lorem\",\n \"sportEventName\": \"aliquip\",\n \"sportEventStartDate\": \"ullamco cillum ipsum\",\n \"sportEventLogo\": \"aute consectetur\",\n \"rankingPoint\": {\n  \"fightId\": \"dolore proident\",\n  \"victoryType\": \"irure aute non deserunt\",\n  \"fighterId\": \"qui fugiat\",\n  \"fighterFullName\": \"commodo sit consequ\",\n  \"victoryTypeId\": \"iru\",\n  \"victoryTypeName\": \"occaecat Ut\",\n  \"victoryTypeNiceName\": \"veniam Excepteur exercitation Ut mollit\",\n  \"sportId\": \"nulla dolor incididunt magna\",\n  \"sportEventId\": \"dolor adipisicing\",\n  \"id\": \"dolor sit\",\n  \"fighter\": \"pariatur id sed\",\n  \"second\": 57020\n },\n \"completedDate\": \"qui exercitation aliqu\",\n \"roundsNumber\": 32552501,\n \"roundDuration\": -59386163,\n \"sportAlternateName\": \"elit ipsum eiusmod\",\n \"weightCategoryName\": \"dolor es\",\n \"weightCategoryAlternateName\": \"id Lorem ipsum\",\n \"weightCategoryShortName\": \"irure aliquip qui\",\n \"weightCategoryMaxWeight\": -95743930,\n \"weightCategoryFullName\": \"ea Duis proident dolore\",\n \"weightCategoryAverageDuration\": 90164290,\n \"weightCategoryColor\": \"proident Excepteur dolor veniam\",\n \"weightCategoryCompleted\": false,\n \"victoryTypes\": \"in aute\",\n \"victoryTypesArray\": \"sunt qui mollit\",\n \"audienceName\": \"in ipsum pariatur Lorem\",\n \"audienceShortName\": \"quis sed\",\n \"sportName\": \"proident aliquip ea minim\",\n \"injuryTime\": -63959198,\n \"warnings\": true,\n \"cautions\": -93266144,\n \"legFouls\": true,\n \"activityTime\": false,\n \"fighter1FullName\": \"velit irure eu amet\",\n \"fighter1DisplayName\": \"anim Excepteur exercitation\",\n \"fighter1FamilyName\": \"officia consectetur adipisicing dolor\",\n \"fighter1GivenName\": \"sit elit\",\n \"fighter1PreferedName\": \"eiusmod Lorem\",\n \"fighter1DrawRank\": \"mollit\",\n \"fighter1RobinRank\": \"cillum velit\",\n \"fighter1SeedNumber\": 437103,\n \"fighter1AthleteId\": \"veniam officia dolore occaecat tempor\",\n \"fighter1PersonId\": \"nisi voluptate cillum\",\n \"fighter1IsSeeded\": false,\n \"fighter1Status\": -94309199,\n \"fighter1IsInjured\": false,\n \"fighter2FullName\": \"fugiat elit id\",\n \"fighter2DisplayName\": \"aliquip consequat tempor dolo\",\n \"fighter2FamilyName\": \"voluptate enim\",\n \"fighter2GivenName\": \"cillum nulla in nostrud\",\n \"fighter2PreferedName\": \"voluptate\",\n \"fighter2DrawRank\": 6462649,\n \"fighter2RobinRank\": -10150921,\n \"fighter2SeedNumber\": 32486712,\n \"fighter2AthleteId\": \"cillum\",\n \"fighter2PersonId\": \"ea in\",\n \"fighter2IsSeeded\": false,\n \"fighter2Status\": 54490796,\n \"fighter2IsInjured\": false,\n \"result\": \"ipsum sunt\",\n \"victoryType\": \"consectetur ea Excepteur \",\n \"endTime\": 73966895,\n \"endDate\": \"eiusmod qui\",\n \"expectedDateStart\": \"adipisicing occaecat ut\",\n \"expectedStartDate\": \"dolor dolor\",\n \"team1Fighters\": [\n  {\n   \"athleteId\": \"Lorem enim dolore\",\n   \"sportEventWeightCategoryId\": \"nulla\",\n   \"weightCategoryFullName\": \"dolore anim Ut ut\",\n   \"weightCategoryShortName\": \"Duis cillum ea Lorem\",\n   \"weightCategoryCountFights\": 65301947,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -85251715,\n   \"countFights\": 89502240,\n   \"personId\": \"irure nisi sunt anim\",\n   \"fullName\": \"sunt dolore ullamco\",\n   \"preferedName\": \"est ullamco Lorem occaecat\",\n   \"displayName\": \"cupidatat\",\n   \"givenName\": \"reprehenderit consequat culpa\",\n   \"familyName\": \"sint elit fugiat\",\n   \"personPhoto\": \"dolore\",\n   \"athenaPrintId\": \"in dolore\",\n   \"teamAlternateName\": \"ex\",\n   \"teamName\": \"aliqua sed id\",\n   \"teamCountryFlag\": \"in sed adipisicing\",\n   \"sportEventTeamId\": \"mollit\",\n   \"sportEventId\": \"pariatu\",\n   \"drawRank\": -65298178,\n   \"robinGroup\": \"irure quis ad pariatur\",\n   \"robinGroupRank\": 87781624,\n   \"teamRankingPoint\": 70731815,\n   \"uwwPoint\": 66496204,\n   \"knockOutStatus\": \"dolor quis Lorem adipisicing\",\n   \"hasLostknockOut\": false,\n   \"completed\": 16424757,\n   \"wins\": 19801712,\n   \"losses\": 33363241,\n   \"technicalPointsFor\": 53743821,\n   \"technicalPointsAgainst\": 20541112,\n   \"technicalPointsDiff\": 83982738,\n   \"rankingPointsFor\": -79142966,\n   \"rankingPointsAgainst\": 89197708,\n   \"rankingPointsDiff\": 76630128,\n   \"winsEasy\": -59420997,\n   \"winsSuperiority\": 50410994,\n   \"rank\": -87430775,\n   \"rankRobinGroup\": -33439940,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"aliqua laborum sed\",\n    \"sportEventWeightCategoryId\": \"nostrud laborum dolore\",\n    \"fighter1Id\": \"in proident dolor magna est\",\n    \"fighter2Id\": \"dolore ea do elit\",\n    \"team1Name\": \"est ad irure ullamco\",\n    \"team1AlternateName\": \"minim in\",\n    \"team1FullName\": \"exercitation pariatur do\",\n    \"team1CountryFlag\": \"dolor Lorem proident\",\n    \"team1CountryFlagScoreboard\": \"adipisicing conseq\",\n    \"team1PoolName\": \"voluptate Ut reprehenderit\",\n    \"team1FightByOpponent\": \"laborum deserunt veniam\",\n    \"team2Name\": \"enim in eu\",\n    \"team2AlternateName\": \"veniam in exercitation do Lorem\",\n    \"team2FullName\": \"dolor officia\",\n    \"team2CountryFlag\": \"ex\",\n    \"team2CountryFlagScoreboard\": \"dolor\",\n    \"team2PoolName\": \"sint\",\n    \"team2FightByOpponent\": \"irure aliquip\",\n    \"roundFriendlyName\": \"cillum magna culpa\",\n    \"displayOrderInRound\": -47586018,\n    \"round1Id\": \"esse\",\n    \"round2Id\": \"magna velit Lorem incididunt\",\n    \"countReferees\": 5098944,\n    \"sportId\": \"velit Ex\",\n    \"athlete1Color\": \"velit ipsum sunt Ut\",\n    \"athlete2Color\": \"sed nisi laboris\",\n    \"athlete1TextColor\": \"voluptate reprehenderit\",\n    \"athlete2TextColor\": \"Duis reprehenderit laborum et\",\n    \"matName\": \"ullamco qui\",\n    \"sessionId\": \"cupidatat aute\",\n    \"sessionName\": \"sint dolore irure\",\n    \"technicalPoints\": \"velit deserunt cillum reprehenderit\",\n    \"uploaderFightTest\": \"aliqua veniam\",\n    \"technicalPointDetails\": \"au\",\n    \"technicalPointTagStatus\": \"amet commodo\",\n    \"technicalPointIds\": \"do\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"in exercitation nulla aliquip laborum\",\n    \"winnerTeam\": \"sunt mollit qui commodo\",\n    \"winnerTeamAlternateName\": \"sed voluptate\",\n    \"sportEventName\": \"sunt Ut eu est\",\n    \"sportEventStartDate\": \"exercitation dolor reprehenderit\",\n    \"sportEventLogo\": \"consequat dolore cupidatat\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"incididunt cupidatat in ipsum\",\n    \"roundsNumber\": 35280465,\n    \"roundDuration\": -77583219,\n    \"sportAlternateName\": \"consectetur id\",\n    \"weightCategoryName\": \"Duis Ut magna\",\n    \"weightCategoryAlternateName\": \"incididunt adipisicing aliqua in\",\n    \"weightCategoryShortName\": \"elit\",\n    \"weightCategoryMaxWeight\": -25666620,\n    \"weightCategoryFullName\": \"nulla consequat minim a\",\n    \"weightCategoryAverageDuration\": -49529501,\n    \"weightCategoryColor\": \"commodo reprehenderit in et\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"ipsum ex aute sunt\",\n    \"victoryTypesArray\": \"ullamco\",\n    \"audienceName\": \"Excepteur ex culpa veniam\",\n    \"audienceShortName\": \"qu\",\n    \"sportName\": \"Lo\",\n    \"injuryTime\": -70549333,\n    \"warnings\": false,\n    \"cautions\": 72910858,\n    \"legFouls\": true,\n    \"activityTime\": true,\n    \"fighter1FullName\": \"laborum magna cupidatat sed\",\n    \"fighter1DisplayName\": \"sit officia velit ad\",\n    \"fighter1FamilyName\": \"ut consequat\",\n    \"fighter1GivenName\": \"do Lorem veniam\",\n    \"fighter1PreferedName\": \"magna adipisicing\",\n    \"fighter1DrawRank\": \"fugiat Lorem adipisicing deserunt Ut\",\n    \"fighter1RobinRank\": \"nostrud nisi proident enim laboris\",\n    \"fighter1SeedNumber\": -87316167,\n    \"fighter1AthleteId\": \"in proident officia\",\n    \"fighter1PersonId\": \"reprehenderit\",\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": 1854832,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"pariatur ad\",\n    \"fighter2DisplayName\": \"labore\",\n    \"fighter2FamilyName\": \"dolor sunt in\",\n    \"fighter2GivenName\": \"enim officia consectetur\",\n    \"fighter2PreferedName\": \"laboris non ullamco inci\",\n    \"fighter2DrawRank\": -99164869,\n    \"fighter2RobinRank\": -34143024,\n    \"fighter2SeedNumber\": -29663477,\n    \"fighter2AthleteId\": \"nulla et ad\",\n    \"fighter2PersonId\": \"ad elit dolore\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": 80926319,\n    \"fighter2IsInjured\": false,\n    \"result\": \"id ut ex Ut pariatur\",\n    \"victoryType\": \"aliquip dolore\",\n    \"endTime\": -49025306,\n    \"endDate\": \"et minim\",\n    \"expectedDateStart\": \"in cupidatat quis voluptate commodo\",\n    \"expectedStartDate\": \"elit eiusmod nostrud\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"a\",\n    \"resultText\": \"veniam reprehenderit\",\n    \"resultTextSmall\": \"nostrud veniam \",\n    \"roundRenamedSmall\": \"dolor L\",\n    \"parentFightNumber1\": 35784588,\n    \"parentFightNumber2\": 87633246,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": false,\n    \"id\": \"in sunt mollit\",\n    \"parentFight1Id\": \"aliqua\",\n    \"parentFight2Id\": \"exercitation sint Excepteur veniam eiusmod\",\n    \"fighter1\": \"dolore deserunt exercitation irure\",\n    \"fighter1RankingPoint\": 5965,\n    \"fighter2\": \"consectetur sunt enim magna\",\n    \"fighter2RankingPoint\": 7289,\n    \"refereeGroup\": \"s\",\n    \"sportEventTeam1Id\": \"labore ea\",\n    \"sportEventTeam2Id\": \"in dolore ex minim\",\n    \"fightMatId\": \"dolore quis\",\n    \"round\": \"labo\",\n    \"qualifying\": false,\n    \"teamFightId\": \"reprehenderit fugiat pariatur nulla cillum\",\n    \"status\": 72693182,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": 99826828,\n    \"fightNumber\": 8999,\n    \"roundWeight\": 4886,\n    \"repechageWeight\": 5473,\n    \"repechageSection\": 2319,\n    \"displayOrder\": 5103,\n    \"canceled\": \"adipisicing do\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"est fugiat Lorem\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": false,\n   \"isRobinGroupNotRanked\": true,\n   \"id\": \"nostrud id\",\n   \"sportEventWeightCategory\": \"adipisicing dolor non aliqua\",\n   \"weight\": 469,\n   \"drawNumber\": 38,\n   \"seedNumber\": 12,\n   \"fighterWeight\": -48702082.82680615,\n   \"points\": 397,\n   \"fighterStatus\": 18206590\n  },\n  {\n   \"athleteId\": \"Duis culpa eu consequat\",\n   \"sportEventWeightCategoryId\": \"sunt officia non id\",\n   \"weightCategoryFullName\": \"ipsum do incididunt amet dolor\",\n   \"weightCategoryShortName\": \"minim Lorem eiusmod\",\n   \"weightCategoryCountFights\": -87028154,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -65920473,\n   \"countFights\": 69220086,\n   \"personId\": \"exercitation occaecat sint Ut nisi\",\n   \"fullName\": \"do elit sed\",\n   \"preferedName\": \"dolore reprehenderit fugiat\",\n   \"displayName\": \"ea pariatur exercitation nulla\",\n   \"givenName\": \"qui dolore Duis\",\n   \"familyName\": \"amet eu ut\",\n   \"personPhoto\": \"ad officia quis\",\n   \"athenaPrintId\": \"magna\",\n   \"teamAlternateName\": \"reprehenderit elit Ut\",\n   \"teamName\": \"ullamco Excepteur\",\n   \"teamCountryFlag\": \"amet minim\",\n   \"sportEventTeamId\": \"id enim dolore irure\",\n   \"sportEventId\": \"quis\",\n   \"drawRank\": -6420052,\n   \"robinGroup\": \"sint magna occaecat\",\n   \"robinGroupRank\": -63953604,\n   \"teamRankingPoint\": -9287188,\n   \"uwwPoint\": 56961863,\n   \"knockOutStatus\": \"dolore esse cupidatat\",\n   \"hasLostknockOut\": false,\n   \"completed\": -95817447,\n   \"wins\": -16853384,\n   \"losses\": 30098729,\n   \"technicalPointsFor\": -46444723,\n   \"technicalPointsAgainst\": 73467423,\n   \"technicalPointsDiff\": -29366472,\n   \"rankingPointsFor\": 32324620,\n   \"rankingPointsAgainst\": -62411411,\n   \"rankingPointsDiff\": -93343453,\n   \"winsEasy\": -85478811,\n   \"winsSuperiority\": -67058145,\n   \"rank\": 87333857,\n   \"rankRobinGroup\": 78636122,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"in in quis adipisicing\",\n    \"sportEventWeightCategoryId\": \"non ut\",\n    \"fighter1Id\": \"nisi deserunt laborum\",\n    \"fighter2Id\": \"deserunt nulla \",\n    \"team1Name\": \"dolor sed anim\",\n    \"team1AlternateName\": \"fugiat amet magna\",\n    \"team1FullName\": \"culpa eu\",\n    \"team1CountryFlag\": \"veniam eu ipsum minim\",\n    \"team1CountryFlagScoreboard\": \"irure amet Excepteur eiusmod velit\",\n    \"team1PoolName\": \"do aute\",\n    \"team1FightByOpponent\": \"in aliqua\",\n    \"team2Name\": \"Ut laborum\",\n    \"team2AlternateName\": \"Excepteur\",\n    \"team2FullName\": \"enim cillum\",\n    \"team2CountryFlag\": \"ea in nostrud et\",\n    \"team2CountryFlagScoreboard\": \"ea\",\n    \"team2PoolName\": \"magna id Lorem Excepteur\",\n    \"team2FightByOpponent\": \"Lorem\",\n    \"roundFriendlyName\": \"dolore ut eiusmod\",\n    \"displayOrderInRound\": -21155627,\n    \"round1Id\": \"veniam \",\n    \"round2Id\": \"reprehenderit eiusmod consequat\",\n    \"countReferees\": -97951142,\n    \"sportId\": \"eiusmod tempor cillum aliquip\",\n    \"athlete1Color\": \"irure eu nulla ex\",\n    \"athlete2Color\": \"officia non fugiat\",\n    \"athlete1TextColor\": \"culpa labore sunt exercitation do\",\n    \"athlete2TextColor\": \"ut anim\",\n    \"matName\": \"minim reprehenderit Ut\",\n    \"sessionId\": \"elit eiusmod ut\",\n    \"sessionName\": \"non Lorem commodo\",\n    \"technicalPoints\": \"Excepteur deserunt amet\",\n    \"uploaderFightTest\": \"occaecat officia nulla\",\n    \"technicalPointDetails\": \"quis sint ad qui\",\n    \"technicalPointTagStatus\": \"sint id\",\n    \"technicalPointIds\": \"proident enim sint sunt\",\n    \"isCompleted\": false,\n    \"isReady\": false,\n    \"isRobinGroupFight\": false,\n    \"winnerFighter\": \"in cillum lab\",\n    \"winnerTeam\": \"sed elit\",\n    \"winnerTeamAlternateName\": \"dolor eiusmod dolor officia nisi\",\n    \"sportEventName\": \"magna culpa Excepteur enim\",\n    \"sportEventStartDate\": \"dolor\",\n    \"sportEventLogo\": \"laboris quis velit\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"sunt nostrud sint fugiat magna\",\n    \"roundsNumber\": -88141765,\n    \"roundDuration\": -41046831,\n    \"sportAlternateName\": \"sit aute nulla\",\n    \"weightCategoryName\": \"enim aute occaeca\",\n    \"weightCategoryAlternateName\": \"dolore Lorem in\",\n    \"weightCategoryShortName\": \"consectetur aute amet Ut\",\n    \"weightCategoryMaxWeight\": 77022726,\n    \"weightCategoryFullName\": \"irure exercitation ci\",\n    \"weightCategoryAverageDuration\": 73265304,\n    \"weightCategoryColor\": \"ipsum qui\",\n    \"weightCategoryCompleted\": true,\n    \"victoryTypes\": \"adipisicing ut ex magna\",\n    \"victoryTypesArray\": \"ut deserunt est adipisicing\",\n    \"audienceName\": \"mollit cupidatat\",\n    \"audienceShortName\": \"dolore tempor pariatur\",\n    \"sportName\": \"aliquip\",\n    \"injuryTime\": -60909331,\n    \"warnings\": true,\n    \"cautions\": 60037475,\n    \"legFouls\": true,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"proident\",\n    \"fighter1DisplayName\": \"deserunt reprehenderit minim\",\n    \"fighter1FamilyName\": \"sunt velit tempor\",\n    \"fighter1GivenName\": \"id Excepteur ut \",\n    \"fighter1PreferedName\": \"proident anim\",\n    \"fighter1DrawRank\": \"occaecat reprehenderit magna consectetur\",\n    \"fighter1RobinRank\": \"incididunt\",\n    \"fighter1SeedNumber\": 74121116,\n    \"fighter1AthleteId\": \"dolore\",\n    \"fighter1PersonId\": \"ad anim\",\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": -14326324,\n    \"fighter1IsInjured\": false,\n    \"fighter2FullName\": \"anim tempor nulla non\",\n    \"fighter2DisplayName\": \"Excepteur sed\",\n    \"fighter2FamilyName\": \"pariatur ipsum et\",\n    \"fighter2GivenName\": \"aute reprehenderit\",\n    \"fighter2PreferedName\": \"sint\",\n    \"fighter2DrawRank\": -10383611,\n    \"fighter2RobinRank\": -16215354,\n    \"fighter2SeedNumber\": -60388048,\n    \"fighter2AthleteId\": \"ipsum occaecat nulla\",\n    \"fighter2PersonId\": \"Ut sint\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -74121322,\n    \"fighter2IsInjured\": true,\n    \"result\": \"non reprehenderit\",\n    \"victoryType\": \"minim iru\",\n    \"endTime\": -84120596,\n    \"endDate\": \"dolor laboris nostrud et\",\n    \"expectedDateStart\": \"do occaecat cupidatat officia\",\n    \"expectedStartDate\": \"eiusmod commodo mollit\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"adipisicing id ut sit\",\n    \"resultText\": \"commodo id Dui\",\n    \"resultTextSmall\": \"minim eu cillum\",\n    \"roundRenamedSmall\": \"Ut veniam\",\n    \"parentFightNumber1\": 45033490,\n    \"parentFightNumber2\": 76648025,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": false,\n    \"id\": \"non sint\",\n    \"parentFight1Id\": \"aute velit in\",\n    \"parentFight2Id\": \"eiusmod laborum anim\",\n    \"fighter1\": \"veniam minim\",\n    \"fighter1RankingPoint\": 8935,\n    \"fighter2\": \"ullamco incididunt laboris cillum ip\",\n    \"fighter2RankingPoint\": 8394,\n    \"refereeGroup\": \"U\",\n    \"sportEventTeam1Id\": \"in velit\",\n    \"sportEventTeam2Id\": \"nisi amet eu\",\n    \"fightMatId\": \"exercitation elit eu\",\n    \"round\": \"moll\",\n    \"qualifying\": true,\n    \"teamFightId\": \"laborum volup\",\n    \"status\": -21922637,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": 36645992,\n    \"fightNumber\": 6255,\n    \"roundWeight\": 3937,\n    \"repechageWeight\": 857,\n    \"repechageSection\": 1853,\n    \"displayOrder\": 7114,\n    \"canceled\": \"et in\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"culpa consequat eiusmod\"\n   },\n   \"isCompeting\": true,\n   \"hasOpenFight\": true,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": true,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"aute sit officia pariatur sint\",\n   \"sportEventWeightCategory\": \"irure mollit\",\n   \"weight\": 379,\n   \"drawNumber\": 116,\n   \"seedNumber\": 15,\n   \"fighterWeight\": 16143581.587376505,\n   \"points\": 37,\n   \"fighterStatus\": 18797428\n  }\n ],\n \"team2Fighters\": [\n  {\n   \"athleteId\": \"enim sit Duis amet\",\n   \"sportEventWeightCategoryId\": \"dolor\",\n   \"weightCategoryFullName\": \"Ut pariatur fugiat dolor ut\",\n   \"weightCategoryShortName\": \"eiusmod\",\n   \"weightCategoryCountFights\": 22647821,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -21079636,\n   \"countFights\": 46856339,\n   \"personId\": \"sint\",\n   \"fullName\": \"aute veniam consectetur\",\n   \"preferedName\": \"cillum Duis dolore\",\n   \"displayName\": \"con\",\n   \"givenName\": \"ex fugiat\",\n   \"familyName\": \"ut exercitation\",\n   \"personPhoto\": \"pariatur Dui\",\n   \"athenaPrintId\": \"nisi est\",\n   \"teamAlternateName\": \"elit mollit\",\n   \"teamName\": \"sint pariatur in\",\n   \"teamCountryFlag\": \"consectetur sint dolore esse\",\n   \"sportEventTeamId\": \"reprehenderit\",\n   \"sportEventId\": \"pariatur consequat in\",\n   \"drawRank\": 79225617,\n   \"robinGroup\": \"Excepteur ut veniam\",\n   \"robinGroupRank\": 80128348,\n   \"teamRankingPoint\": 33631568,\n   \"uwwPoint\": 43293087,\n   \"knockOutStatus\": \"ut velit\",\n   \"hasLostknockOut\": true,\n   \"completed\": -3536638,\n   \"wins\": -93450887,\n   \"losses\": -59351359,\n   \"technicalPointsFor\": -13277043,\n   \"technicalPointsAgainst\": 5516165,\n   \"technicalPointsDiff\": 19458735,\n   \"rankingPointsFor\": -29385301,\n   \"rankingPointsAgainst\": -88852673,\n   \"rankingPointsDiff\": -53984547,\n   \"winsEasy\": 70239790,\n   \"winsSuperiority\": -42823263,\n   \"rank\": -85265566,\n   \"rankRobinGroup\": -96420443,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"id dolor deserunt\",\n    \"sportEventWeightCategoryId\": \"Lorem\",\n    \"fighter1Id\": \"culpa proident Lorem\",\n    \"fighter2Id\": \"officia cupidatat\",\n    \"team1Name\": \"sint labore\",\n    \"team1AlternateName\": \"in dolor Ut elit\",\n    \"team1FullName\": \"tempor mollit in dolor\",\n    \"team1CountryFlag\": \"quis adipisicing\",\n    \"team1CountryFlagScoreboard\": \"in dolore nulla magna aliqua\",\n    \"team1PoolName\": \"Ut anim ad cillum\",\n    \"team1FightByOpponent\": \"elit nisi\",\n    \"team2Name\": \"irure voluptate qui\",\n    \"team2AlternateName\": \"Excepteur quis\",\n    \"team2FullName\": \"culpa consectetur deserunt\",\n    \"team2CountryFlag\": \"mollit sed ut ad\",\n    \"team2CountryFlagScoreboard\": \"veniam\",\n    \"team2PoolName\": \"dolor enim tempor reprehenderit\",\n    \"team2FightByOpponent\": \"voluptate sunt esse paria\",\n    \"roundFriendlyName\": \"proident\",\n    \"displayOrderInRound\": 89632976,\n    \"round1Id\": \"fugiat ut mollit pariatur\",\n    \"round2Id\": \"id a\",\n    \"countReferees\": -51101805,\n    \"sportId\": \"reprehenderit Duis enim aute\",\n    \"athlete1Color\": \"exercitation quis in et\",\n    \"athlete2Color\": \"nulla laboris aliquip anim\",\n    \"athlete1TextColor\": \"reprehenderit sunt\",\n    \"athlete2TextColor\": \"velit consectetur\",\n    \"matName\": \"consectetur commodo velit in\",\n    \"sessionId\": \"nulla proident aliqua\",\n    \"sessionName\": \"Duis occaecat\",\n    \"technicalPoints\": \"mollit\",\n    \"uploaderFightTest\": \"exercitation proident sit\",\n    \"technicalPointDetails\": \"labore in dolore\",\n    \"technicalPointTagStatus\": \"exercitation\",\n    \"technicalPointIds\": \"quis ex\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"irure sit\",\n    \"winnerTeam\": \"in Lorem minim incididunt\",\n    \"winnerTeamAlternateName\": \"consequat aliquip amet\",\n    \"sportEventName\": \"reprehenderit consequat\",\n    \"sportEventStartDate\": \"enim sit\",\n    \"sportEventLogo\": \"in dolore\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"consectetur dolor anim sed\",\n    \"roundsNumber\": 78736094,\n    \"roundDuration\": -25267456,\n    \"sportAlternateName\": \"id sint\",\n    \"weightCategoryName\": \"minim commodo sit dolor\",\n    \"weightCategoryAlternateName\": \"eiusmod magna\",\n    \"weightCategoryShortName\": \"Lorem tempor sit\",\n    \"weightCategoryMaxWeight\": -55669494,\n    \"weightCategoryFullName\": \"Lorem irure cillum ullamco incididunt\",\n    \"weightCategoryAverageDuration\": -29530673,\n    \"weightCategoryColor\": \"eu Excepteur tempor veniam dolo\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"sit do sint\",\n    \"victoryTypesArray\": \"incididunt ut velit dolor\",\n    \"audienceName\": \"consequat voluptate\",\n    \"audienceShortName\": \"id eiusmod sunt voluptate\",\n    \"sportName\": \"dolor Excepteur deserunt\",\n    \"injuryTime\": -59928946,\n    \"warnings\": false,\n    \"cautions\": 21440665,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"Excepteur enim\",\n    \"fighter1DisplayName\": \"non occaecat sint exercitation sunt\",\n    \"fighter1FamilyName\": \"in tempor \",\n    \"fighter1GivenName\": \"laboris\",\n    \"fighter1PreferedName\": \"nostrud eu id cupidatat\",\n    \"fighter1DrawRank\": \"in\",\n    \"fighter1RobinRank\": \"ullamco quis do eiusmod\",\n    \"fighter1SeedNumber\": 70399678,\n    \"fighter1AthleteId\": \"quis in\",\n    \"fighter1PersonId\": \"occaecat aute dolore\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": 93887700,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"sed dolor Duis\",\n    \"fighter2DisplayName\": \"ea\",\n    \"fighter2FamilyName\": \"eu deserunt\",\n    \"fighter2GivenName\": \"nulla pariatur commodo\",\n    \"fighter2PreferedName\": \"dolore culpa nisi\",\n    \"fighter2DrawRank\": -11042723,\n    \"fighter2RobinRank\": -18111987,\n    \"fighter2SeedNumber\": -55748236,\n    \"fighter2AthleteId\": \"anim est ut\",\n    \"fighter2PersonId\": \"sint Ut do ipsum\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -69309131,\n    \"fighter2IsInjured\": false,\n    \"result\": \"incididunt dolore ex\",\n    \"victoryType\": \"et ipsum id\",\n    \"endTime\": 83373315,\n    \"endDate\": \"velit Duis voluptate ipsum\",\n    \"expectedDateStart\": \"labore sit\",\n    \"expectedStartDate\": \"qui aliquip\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"sit dolor occ\",\n    \"resultText\": \"eu laborum sed\",\n    \"resultTextSmall\": \"anim s\",\n    \"roundRenamedSmall\": \"nisi adipisicing\",\n    \"parentFightNumber1\": -27387783,\n    \"parentFightNumber2\": -31926816,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": false,\n    \"id\": \"magna culpa incididunt\",\n    \"parentFight1Id\": \"nisi dolore\",\n    \"parentFight2Id\": \"officia commodo nulla nostrud\",\n    \"fighter1\": \"laboris in Ut aliqua\",\n    \"fighter1RankingPoint\": 7039,\n    \"fighter2\": \"sit non Lorem\",\n    \"fighter2RankingPoint\": 5537,\n    \"refereeGroup\": \"p\",\n    \"sportEventTeam1Id\": \"dolore\",\n    \"sportEventTeam2Id\": \"laboris Ut\",\n    \"fightMatId\": \"ipsum do\",\n    \"round\": \"ut i\",\n    \"qualifying\": false,\n    \"teamFightId\": \"pariatur in\",\n    \"status\": -40027213,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": -87677151,\n    \"fightNumber\": 2098,\n    \"roundWeight\": 2329,\n    \"repechageWeight\": 289,\n    \"repechageSection\": 2775,\n    \"displayOrder\": 2031,\n    \"canceled\": \"enim et in eu\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"sint est velit\"\n   },\n   \"isCompeting\": true,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": true,\n   \"isNotRanked\": false,\n   \"isInjured\": true,\n   \"isForfeit\": true,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"id Lorem\",\n   \"sportEventWeightCategory\": \"consectetur officia laboris\",\n   \"weight\": 71,\n   \"drawNumber\": 233,\n   \"seedNumber\": 9,\n   \"fighterWeight\": 37079934.39887276,\n   \"points\": 368,\n   \"fighterStatus\": -2121922\n  },\n  {\n   \"athleteId\": \"velit dolor sunt Duis\",\n   \"sportEventWeightCategoryId\": \"anim ipsum\",\n   \"weightCategoryFullName\": \"aliqua esse\",\n   \"weightCategoryShortName\": \"Ut fugiat ad\",\n   \"weightCategoryCountFights\": -47738792,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": -27231735,\n   \"countFights\": 75258614,\n   \"personId\": \"ullamco amet proident commodo magna\",\n   \"fullName\": \"dolor do velit sed\",\n   \"preferedName\": \"reprehenderit eu Excepteur dolore ad\",\n   \"displayName\": \"enim\",\n   \"givenName\": \"consequat in eu eiusmod pariatur\",\n   \"familyName\": \"Duis elit reprehenderit cupidatat\",\n   \"personPhoto\": \"culpa elit ex aliqua\",\n   \"athenaPrintId\": \"consectetur\",\n   \"teamAlternateName\": \"c\",\n   \"teamName\": \"cupidatat consectetur in\",\n   \"teamCountryFlag\": \"nisi tempor\",\n   \"sportEventTeamId\": \"anim exercitation nostrud sint\",\n   \"sportEventId\": \"ea reprehenderit\",\n   \"drawRank\": -76579260,\n   \"robinGroup\": \"do laborum qui nostrud\",\n   \"robinGroupRank\": 27845830,\n   \"teamRankingPoint\": -66818670,\n   \"uwwPoint\": -65019220,\n   \"knockOutStatus\": \"nisi est magna veniam cupidatat\",\n   \"hasLostknockOut\": true,\n   \"completed\": -30418149,\n   \"wins\": -285000,\n   \"losses\": -78251818,\n   \"technicalPointsFor\": -3924738,\n   \"technicalPointsAgainst\": 71276539,\n   \"technicalPointsDiff\": -14679820,\n   \"rankingPointsFor\": -37203769,\n   \"rankingPointsAgainst\": 77192010,\n   \"rankingPointsDiff\": -5720741,\n   \"winsEasy\": -49705601,\n   \"winsSuperiority\": 42257606,\n   \"rank\": -69976802,\n   \"rankRobinGroup\": -84582679,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"ea irure\",\n    \"sportEventWeightCategoryId\": \"nulla aliquip\",\n    \"fighter1Id\": \"qui nostrud nisi\",\n    \"fighter2Id\": \"proident\",\n    \"team1Name\": \"id nulla labore ea\",\n    \"team1AlternateName\": \"id ipsum enim aute dolor\",\n    \"team1FullName\": \"esse proident ullamco irure\",\n    \"team1CountryFlag\": \"reprehenderit officia exercitation\",\n    \"team1CountryFlagScoreboard\": \"in in magna occaecat\",\n    \"team1PoolName\": \"dolor eiusmod Excepteur exercitation\",\n    \"team1FightByOpponent\": \"aute pariatur\",\n    \"team2Name\": \"ut nulla\",\n    \"team2AlternateName\": \"consectetur culpa in\",\n    \"team2FullName\": \"Lorem dolore ex\",\n    \"team2CountryFlag\": \"in\",\n    \"team2CountryFlagScoreboard\": \"deserunt do esse\",\n    \"team2PoolName\": \"nulla irure reprehenderit anim dolor\",\n    \"team2FightByOpponent\": \"pariatur sed\",\n    \"roundFriendlyName\": \"sint ex ullamco ea\",\n    \"displayOrderInRound\": 5939084,\n    \"round1Id\": \"proident\",\n    \"round2Id\": \"occaecat aute eiusmod commodo nulla\",\n    \"countReferees\": 70329375,\n    \"sportId\": \"sunt ex\",\n    \"athlete1Color\": \"non veniam fugiat\",\n    \"athlete2Color\": \"fugiat voluptate in magna cupidatat\",\n    \"athlete1TextColor\": \"consectetur Duis veniam culpa\",\n    \"athlete2TextColor\": \"velit officia Lorem\",\n    \"matName\": \"sint labore est\",\n    \"sessionId\": \"dolor qui Duis\",\n    \"sessionName\": \"tempor non qui ipsum\",\n    \"technicalPoints\": \"ex ut voluptate ad\",\n    \"uploaderFightTest\": \"enim ipsum aute Ut mollit\",\n    \"technicalPointDetails\": \"pariatur commodo enim \",\n    \"technicalPointTagStatus\": \"ex commodo\",\n    \"technicalPointIds\": \"Lorem ut reprehenderit occaecat\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"dolor sint labore et\",\n    \"winnerTeam\": \"sit\",\n    \"winnerTeamAlternateName\": \"pariatur deserunt\",\n    \"sportEventName\": \"velit ut veniam\",\n    \"sportEventStartDate\": \"id\",\n    \"sportEventLogo\": \"nisi reprehenderit\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"Duis Ut cillum\",\n    \"roundsNumber\": 28586660,\n    \"roundDuration\": 73711782,\n    \"sportAlternateName\": \"esse ad sit\",\n    \"weightCategoryName\": \"aute voluptate ad dolor\",\n    \"weightCategoryAlternateName\": \"sint reprehenderit in\",\n    \"weightCategoryShortName\": \"consectetur en\",\n    \"weightCategoryMaxWeight\": 98813292,\n    \"weightCategoryFullName\": \"ex tempor aliquip id\",\n    \"weightCategoryAverageDuration\": 23523629,\n    \"weightCategoryColor\": \"ea Duis in adipisicing\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"et voluptate\",\n    \"victoryTypesArray\": \"ut aliquip\",\n    \"audienceName\": \"consectetur aliquip esse ullamco anim\",\n    \"audienceShortName\": \"do\",\n    \"sportName\": \"Lorem in laboris nisi\",\n    \"injuryTime\": -43826605,\n    \"warnings\": true,\n    \"cautions\": -16815617,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"officia exercitation labore reprehenderit\",\n    \"fighter1DisplayName\": \"Excepteur aliquip elit\",\n    \"fighter1FamilyName\": \"ad laborum \",\n    \"fighter1GivenName\": \"dolor pariatur incididunt Ex\",\n    \"fighter1PreferedName\": \"exercitation est Duis sint in\",\n    \"fighter1DrawRank\": \"nisi quis\",\n    \"fighter1RobinRank\": \"ipsum cupidatat cul\",\n    \"fighter1SeedNumber\": -82373197,\n    \"fighter1AthleteId\": \"nisi laborum commodo exercitation\",\n    \"fighter1PersonId\": \"amet et\",\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": 97237310,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"ullamco incididunt nostrud\",\n    \"fighter2DisplayName\": \"aliqua nostrud enim eu irure\",\n    \"fighter2FamilyName\": \"labor\",\n    \"fighter2GivenName\": \"ex\",\n    \"fighter2PreferedName\": \"dolor eu\",\n    \"fighter2DrawRank\": -11025208,\n    \"fighter2RobinRank\": 28266098,\n    \"fighter2SeedNumber\": 27348374,\n    \"fighter2AthleteId\": \"ullamco proident\",\n    \"fighter2PersonId\": \"Excepteur Ut r\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -38412376,\n    \"fighter2IsInjured\": false,\n    \"result\": \"labor\",\n    \"victoryType\": \"sunt qui et id ipsum\",\n    \"endTime\": 12911324,\n    \"endDate\": \"qui enim ea deserunt\",\n    \"expectedDateStart\": \"nulla aute\",\n    \"expectedStartDate\": \"pariatur laborum irure id\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"adipisicing sunt laboris fugiat\",\n    \"resultText\": \"ex ullamco culpa\",\n    \"resultTextSmall\": \"esse ullamco\",\n    \"roundRenamedSmall\": \"c\",\n    \"parentFightNumber1\": 71711127,\n    \"parentFightNumber2\": 55811869,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": false,\n    \"isCountdown\": false,\n    \"id\": \"nulla reprehenderit fugiat\",\n    \"parentFight1Id\": \"eu dolor pariatur\",\n    \"parentFight2Id\": \"quis Lorem eu voluptate\",\n    \"fighter1\": \"occaecat in ullamco\",\n    \"fighter1RankingPoint\": 1797,\n    \"fighter2\": \"consequat ipsum\",\n    \"fighter2RankingPoint\": 1265,\n    \"refereeGroup\": \"m\",\n    \"sportEventTeam1Id\": \"irure ut cupidatat voluptate laboris\",\n    \"sportEventTeam2Id\": \"aliquip\",\n    \"fightMatId\": \"amet fugiat eu\",\n    \"round\": \"offi\",\n    \"qualifying\": false,\n    \"teamFightId\": \"nostrud\",\n    \"status\": 16314593,\n    \"rankingCheck\": true,\n    \"technicalCheck\": false,\n    \"weight\": 91942988,\n    \"fightNumber\": 3110,\n    \"roundWeight\": 4767,\n    \"repechageWeight\": 9180,\n    \"repechageSection\": 8791,\n    \"displayOrder\": 5902,\n    \"canceled\": \"do in amet\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"veniam Lorem\"\n   },\n   \"isCompeting\": true,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": false,\n   \"isRobinGroupNotRanked\": true,\n   \"id\": \"cupidatat commodo sunt dolor\",\n   \"sportEventWeightCategory\": \"ad ex\",\n   \"weight\": 419,\n   \"drawNumber\": 237,\n   \"seedNumber\": 22,\n   \"fighterWeight\": -13706903.352045476,\n   \"points\": 244,\n   \"fighterStatus\": -72863162\n  }\n ],\n \"rankingPointNiceName\": \"ipsum veniam\",\n \"resultText\": \"amet non laborum\",\n \"resultTextSmall\": \"cupid\",\n \"roundRenamedSmall\": \"laboris qui amet\",\n \"parentFightNumber1\": 41287922,\n \"parentFightNumber2\": 26928532,\n \"fightRefereesWithRole\": [\n  {\n   \"refereeId\": \"enim voluptate in commodo\",\n   \"fightId\": \"non in ad in ullamco\",\n   \"refereeRole\": \"sed\",\n   \"refereeFullName\": \"cupidatat dolor\",\n   \"refereeDisplayName\": \"esse tempor\",\n   \"refereeNumber\": -33043160,\n   \"refereeTeamAlternateName\": \"enim aliqua null\",\n   \"refereeCountryFlag\": \"ea\",\n   \"refereeFull\": \"Duis do ea\",\n   \"id\": \"consequat et\"\n  },\n  {\n   \"refereeId\": \"deserunt sed\",\n   \"fightId\": \"proident qui eiusmod labore\",\n   \"refereeRole\": \"proident Ut pariatur in\",\n   \"refereeFullName\": \"sunt adipisicing\",\n   \"refereeDisplayName\": \"do voluptate\",\n   \"refereeNumber\": 20286017,\n   \"refereeTeamAlternateName\": \"Duis in consequat\",\n   \"refereeCountryFlag\": \"labore laboris nisi minim\",\n   \"refereeFull\": \"reprehenderit ad elit\",\n   \"id\": \"Lorem\"\n  }\n ],\n \"needsRefresh\": false,\n \"isCountdown\": false,\n \"id\": \"in ea\",\n \"parentFight1Id\": \"ex aliqua in nisi\",\n \"parentFight2Id\": \"id\",\n \"fighter1\": \"do culpa officia ipsum\",\n \"fighter1RankingPoint\": 2227,\n \"fighter2\": \"amet aliquip dolore in\",\n \"fighter2RankingPoint\": 5581,\n \"refereeGroup\": \"e\",\n \"sportEventTeam1Id\": \"dolor velit elit tempor\",\n \"sportEventTeam2Id\": \"aliqua dolore Excepteur reprehenderit\",\n \"fightMatId\": \"in sit dolore\",\n \"round\": \"cupi\",\n \"qualifying\": true,\n \"teamFightId\": \"aliqua sunt ipsum\",\n \"status\": 39483507,\n \"rankingCheck\": true,\n \"technicalCheck\": false,\n \"weight\": -1576602,\n \"fightNumber\": 8273,\n \"roundWeight\": 779,\n \"repechageWeight\": 9845,\n \"repechageSection\": 2246,\n \"displayOrder\": 8131,\n \"canceled\": \"in nisi i\",\n \"fightReferees\": [\n  {\n   \"refereeId\": \"Lorem non in ad\",\n   \"fightId\": \"enim Ut \",\n   \"refereeRole\": \"anim laborum consectetur\",\n   \"refereeFullName\": \"aute ipsum Lorem in amet\",\n   \"refereeDisplayName\": \"cupidatat Duis\",\n   \"refereeNumber\": 32817692,\n   \"refereeTeamAlternateName\": \"eiusmod volup\",\n   \"refereeCountryFlag\": \"dolor sit sint\",\n   \"refereeFull\": \"sint magna\",\n   \"id\": \"Duis\"\n  },\n  {\n   \"refereeId\": \"magna et\",\n   \"fightId\": \"Excepteur \",\n   \"refereeRole\": \"sit nostrud est\",\n   \"refereeFullName\": \"incididunt\",\n   \"refereeDisplayName\": \"mollit irure\",\n   \"refereeNumber\": 29447397,\n   \"refereeTeamAlternateName\": \"laborum ex\",\n   \"refereeCountryFlag\": \"irure\",\n   \"refereeFull\": \"nostrud mollit ut velit\",\n   \"id\": \"cupidatat\"\n  }\n ],\n \"odfCode\": \"consequat in amet\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												":odfCompetitionCode",
												"get",
												":odfWrestler1",
												":odfWrestler2"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "odfCompetitionCode"
												},
												{
													"key": "odfWrestler1"
												},
												{
													"key": "odfWrestler2"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/odf/:odfCompetitionCode/get/:odfWrestler1/:odfWrestler2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												"odf",
												":odfCompetitionCode",
												"get",
												":odfWrestler1",
												":odfWrestler2"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "odfCompetitionCode"
												},
												{
													"key": "odfWrestler1"
												},
												{
													"key": "odfWrestler2"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "reorder",
							"item": [
								{
									"name": "Reorder fights on a given fightMat",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=<string>&fightId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"reorder",
												"individual",
												"fight-mat",
												":fightMatId"
											],
											"query": [
												{
													"key": "position",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "fightId",
													"value": "<string>",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "fightMatId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=<string>&fightId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"individual",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "position",
															"value": "<string>"
														},
														{
															"key": "fightId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "fightMatId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"schema type not provided\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=<string>&fightId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"individual",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "position",
															"value": "<string>"
														},
														{
															"key": "fightId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "fightMatId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/individual/fight-mat/:fightMatId?position=<string>&fightId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"individual",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "position",
															"value": "<string>"
														},
														{
															"key": "fightId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "fightMatId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Reorder Team fights on a given fightMat",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"reorder",
												"fight-mat",
												":fightMatId"
											],
											"query": [
												{
													"key": "teamFightIds",
													"value": "<string>",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "fightMatId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "fightMatId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "fightMatId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"schema type not provided\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/fight-mat/:fightMatId?teamFightIds=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"fight-mat",
														":fightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "fightMatId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Reorder fights on a given mat",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=<string>&teamFightId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"reorder",
												"mat",
												":matId",
												":newFightMatId"
											],
											"query": [
												{
													"key": "teamFightIds",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "teamFightId",
													"value": "<string>",
													"description": "(Required) "
												}
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "matId",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "newFightMatId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns fights",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=<string>&teamFightId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"mat",
														":matId",
														":newFightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "<string>"
														},
														{
															"key": "teamFightId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "matId"
														},
														{
															"key": "newFightMatId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": \"schema type not provided\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=<string>&teamFightId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"mat",
														":matId",
														":newFightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "<string>"
														},
														{
															"key": "teamFightId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "matId"
														},
														{
															"key": "newFightMatId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/reorder/mat/:matId/:newFightMatId?teamFightIds=<string>&teamFightId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"reorder",
														"mat",
														":matId",
														":newFightMatId"
													],
													"query": [
														{
															"key": "teamFightIds",
															"value": "<string>"
														},
														{
															"key": "teamFightId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "matId"
														},
														{
															"key": "newFightMatId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "print",
							"item": [
								{
									"name": "Print qualifying results",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"print",
												"qualifying-results"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"qualifying-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"qualifying-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/qualifying-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"qualifying-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print finals results",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"print",
												"finals-results"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"finals-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"finals-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/finals-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"finals-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										}
									]
								},
								{
									"name": "Print complete results",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"print",
												"complete-results"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Fight not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fight",
														":sportEventId",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get fights",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a fight",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dummy\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dummy\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dummy\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dummy\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"dummy\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fights",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										":status"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "status",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												":status"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "status"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												":status"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "status"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/:status?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												":status"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "status"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fights order by Bracket",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/bracket/:sportEventWeightCategoryId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"bracket",
										":sportEventWeightCategoryId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/bracket/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"bracket",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\",\n \"qualifPairs\": \"ad ut\",\n \"repechages\": \"schema type not provided\",\n \"nbRepechageRoundsTop\": -79143328,\n \"nbRepechageRoundsBottom\": -97772616\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/bracket/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"bracket",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get repechage fights",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"repechage",
										":sportEventWeightCategoryId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"repechage",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"repechage",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/repechage/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"repechage",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\"\n}"
								}
							]
						},
						{
							"name": "Clear scoresheet printed flag on fights",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"global-confirm"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"global-confirm"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"global-confirm"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Count of updated fights",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<string>\",\n    \"<string>\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/global-confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"global-confirm"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"count\": 10429566\n}"
								}
							]
						},
						{
							"name": "Generate fights",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sportEventSessionId\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"generate"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventSessionId\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"generate"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventSessionId\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"generate"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Count of generated fights",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventSessionId\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"generate"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"countFights\": 3491794\n}"
								}
							]
						},
						{
							"name": "Get fights that don't have a mat yet",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"empty-mat"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"empty-mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"empty-mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/empty-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"empty-mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fights completed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"completed"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"completed"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"completed"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/completed",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"completed"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fights scheduled",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"scheduled"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"scheduled"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"scheduled"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/scheduled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"scheduled"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update fightNumbers",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"fight-numbers-update"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns number of fights updated",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"fight-numbers-update"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"countFights\": 3491794\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"fight-numbers-update"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/fight-numbers-update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"fight-numbers-update"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fights",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"quick"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a fight",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fight\": {\n  \"id\": \"minim dolore in culpa\",\n  \"teamFightId\": \"consequat non laboris incididunt\",\n  \"status\": 32148796,\n  \"weight\": 16665431,\n  \"fightNumber\": 768,\n  \"odfCode\": \"in\"\n }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Fight not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/quick",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"quick"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fights by opened sessions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"opened-session"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"opened-session"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"tabSessions\": [\n  \"irure quis\",\n  \"et magna ullamco commodo Duis\"\n ]\n}"
								},
								{
									"name": "Fight not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"opened-session"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/opened-session",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"opened-session"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get results web-formatted",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"complete-results",
										"text"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Fight not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"complete-results",
												"text"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fights",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"complete-results",
												"text"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fights\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/complete-results/text?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"complete-results",
												"text"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get the latest results of an event",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										":sportEventId",
										"latest-results"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>",
											"description": "(Required) Number of fights to return (default = 3)"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a fight",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"latest-results"
											],
											"query": [
												{
													"key": "limit",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fighter1Id\": \"Excep\",\n \"fighter2Id\": \"ipsum eu sit dolor\",\n \"team1Name\": \"Ut sunt reprehenderit pariatur qui\",\n \"team1AlternateName\": \"cillum commodo Excepteur quis aute\",\n \"team1FullName\": \"Lorem mollit\",\n \"team1PoolName\": \"sit sunt eu\",\n \"team2Name\": \"consectetur consequat exercitation\",\n \"team2AlternateName\": \"Lorem ex\",\n \"team2FullName\": \"voluptate eu dolor Lorem irure\",\n \"team2PoolName\": \"sit\",\n \"roundFriendlyName\": \"ex ad\",\n \"displayOrderInRound\": 74058097,\n \"matName\": \"voluptate aliquip culpa sit\",\n \"technicalPoints\": \"ad ex ut in\",\n \"technicalPointDetails\": \"velit cupidatat officia\",\n \"technicalPointTagStatus\": \"sed cillum deserunt magna\",\n \"weightCategoryAlternateName\": \"aliqua est laborum\",\n \"weightCategoryShortName\": \"dolore Duis tempor\",\n \"weightCategoryMaxWeight\": 61984118,\n \"weightCategoryColor\": \"consequat dolore\",\n \"weightCategoryCompleted\": false,\n \"audienceName\": \"quis\",\n \"audienceShortName\": \"est elit\",\n \"sportName\": \"cillum nisi officia Duis\",\n \"fighter1FullName\": \"ut sint laboris enim\",\n \"fighter1DisplayName\": \"sunt proident culpa sit vo\",\n \"fighter1FamilyName\": \"aliqua sit\",\n \"fighter1PreferedName\": \"sunt ex eiusmod fugiat\",\n \"fighter1PersonId\": \"ipsum consectetur sit cillum aliqua\",\n \"fighter2FullName\": \"id ipsum\",\n \"fighter2DisplayName\": \"ullamco ut sunt\",\n \"fighter2FamilyName\": \"irure do consequat sit id\",\n \"fighter2PreferedName\": \"incididunt Lorem\",\n \"fighter2PersonId\": \"in culpa do\",\n \"victoryType\": \"exercitation ea\",\n \"endTime\": -89515881,\n \"rankingPointNiceName\": \"et\",\n \"resultText\": \"nostrud magna dolor\",\n \"resultTextSmall\": \"Lorem aliquip\",\n \"parentFightNumber1\": 50741006,\n \"parentFightNumber2\": -38750551,\n \"fightRefereesWithRole\": [\n  \"occaecat in magna laboris\",\n  \"nostrud ullamco\"\n ],\n \"id\": \"Lorem\",\n \"fighter1RankingPoint\": 5114,\n \"fighter2RankingPoint\": 6248,\n \"refereeGroup\": \"e\",\n \"sportEventTeam1Id\": \"consectetur ea non\",\n \"sportEventTeam2Id\": \"ipsum\",\n \"round\": \"pari\",\n \"qualifying\": false,\n \"teamFightId\": \"culpa amet sit exercitation\",\n \"status\": -61208197,\n \"weight\": 29476525,\n \"fightNumber\": 5632,\n \"canceled\": \"id occaecat in\",\n \"odfCode\": \"proident id laboris\"\n}"
								},
								{
									"name": "Fight not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"latest-results"
											],
											"query": [
												{
													"key": "limit",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight/:sportEventId/latest-results?limit=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight",
												":sportEventId",
												"latest-results"
											],
											"query": [
												{
													"key": "limit",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get video details of a fight",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fight",
								"video",
								":sportEventId",
								"match",
								":fightNumber"
							],
							"variable": [
								{
									"key": "sportEventId",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "fightNumber",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"video",
										":sportEventId",
										"match",
										":fightNumber"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										},
										{
											"key": "fightNumber"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"video",
										":sportEventId",
										"match",
										":fightNumber"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										},
										{
											"key": "fightNumber"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns a fight",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/video/:sportEventId/match/:fightNumber",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"video",
										":sportEventId",
										"match",
										":fightNumber"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										},
										{
											"key": "fightNumber"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fight\": {\n  \"fighter1Id\": \"ullamco qui proident pariatur\",\n  \"fighter2Id\": \"ut mollit deserunt culpa\",\n  \"team1Name\": \"ut labore laborum\",\n  \"team1AlternateName\": \"consequat\",\n  \"team1FullName\": \"ipsum tempor sed\",\n  \"team1PoolName\": \"veniam sint commodo minim\",\n  \"team2Name\": \"Excepteur irure\",\n  \"team2AlternateName\": \"ad elit voluptate\",\n  \"team2FullName\": \"occaecat commodo magna minim\",\n  \"team2PoolName\": \"sunt anim occaecat\",\n  \"roundFriendlyName\": \"dolore laboris cupidatat Duis\",\n  \"displayOrderInRound\": 90782055,\n  \"round1Id\": \"eu aliqua est\",\n  \"round2Id\": \"anim labore esse nisi\",\n  \"matName\": \"Lorem veniam in Duis\",\n  \"technicalPoints\": \"culpa laboris\",\n  \"uploaderFightTest\": \"deserunt sit fugiat proident\",\n  \"technicalPointDetails\": \"ea magn\",\n  \"technicalPointTagStatus\": \"mollit ut\",\n  \"weightCategoryAlternateName\": \"cupidatat dolore ea in labore\",\n  \"weightCategoryShortName\": \"do voluptate id dolore in\",\n  \"weightCategoryMaxWeight\": -27680425,\n  \"weightCategoryColor\": \"labore quis cillum in\",\n  \"weightCategoryCompleted\": true,\n  \"audienceName\": \"labore incididunt\",\n  \"audienceShortName\": \"in nulla officia\",\n  \"sportName\": \"sit tempor magna\",\n  \"fighter1FullName\": \"enim do aute\",\n  \"fighter1DisplayName\": \"exercitation amet\",\n  \"fighter1FamilyName\": \"in aliquip D\",\n  \"fighter1PreferedName\": \"enim in\",\n  \"fighter1PersonId\": \"eu sunt\",\n  \"fighter2FullName\": \"exercitation voluptate commodo do\",\n  \"fighter2DisplayName\": \"culpa sed\",\n  \"fighter2FamilyName\": \"dolor id est\",\n  \"fighter2PreferedName\": \"nulla\",\n  \"fighter2PersonId\": \"tempor dolor culpa\",\n  \"victoryType\": \"magna ullamco in\",\n  \"endTime\": 44432629,\n  \"rankingPointNiceName\": \"est sint\",\n  \"resultText\": \"dolor incididunt\",\n  \"resultTextSmall\": \"ea ad voluptate eu adipisicing\",\n  \"parentFightNumber1\": 22354614,\n  \"parentFightNumber2\": 42453935,\n  \"fightRefereesWithRole\": [\n   \"deserunt aliquip\",\n   \"magna Lorem\"\n  ],\n  \"id\": \"Lorem\",\n  \"fighter1RankingPoint\": 3509,\n  \"fighter2RankingPoint\": 2054,\n  \"refereeGroup\": \"i\",\n  \"sportEventTeam1Id\": \"ut ipsum\",\n  \"sportEventTeam2Id\": \"non proident cupidatat et velit\",\n  \"round\": \"mini\",\n  \"qualifying\": false,\n  \"teamFightId\": \"Lorem\",\n  \"status\": -16223465,\n  \"weight\": 89245843,\n  \"fightNumber\": 6648,\n  \"canceled\": \"ut in\",\n  \"odfCode\": \"culpa in\"\n }\n}"
						}
					]
				},
				{
					"name": "Get not already completed fights by mat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fight",
								"open",
								":sportEventMatId"
							],
							"variable": [
								{
									"key": "sportEventMatId",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"open",
										":sportEventMatId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventMatId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"open",
										":sportEventMatId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventMatId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns fights",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/open/:sportEventMatId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"open",
										":sportEventMatId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventMatId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fights\": \"schema type not provided\"\n}"
						}
					]
				},
				{
					"name": "Get not already completed fights order by mat",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fight",
								"all-open",
								":sportEventId"
							],
							"variable": [
								{
									"key": "sportEventId",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"all-open",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"all-open",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns fights",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight/all-open/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight",
										"all-open",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fights\": \"schema type not provided\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fight-referee",
			"item": [
				{
					"name": "{fight Id}",
					"item": [
						{
							"name": "Get fight referees",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-referee",
										":fightId"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fighters",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightReferees\": {\n  \"refereeId\": \"elit enim qui\",\n  \"fightId\": \"Lorem ma\",\n  \"refereeRole\": \"eu anim\",\n  \"refereeFullName\": \"irure ut elit consequat\",\n  \"refereeDisplayName\": \"dolor\",\n  \"refereeNumber\": 85221989,\n  \"refereeTeamAlternateName\": \"consequat dolor consectetur occaecat anim\",\n  \"refereeCountryFlag\": \"ex laborum exercitation dolor eu\",\n  \"refereeFull\": \"cupidatat L\",\n  \"id\": \"deserunt\"\n }\n}"
								}
							]
						},
						{
							"name": "Add referee to a fight",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refereeId\": \"<string>\",\n    \"refereeRole\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-referee",
										":fightId"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fight referees",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/role/:refereeRole",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-referee",
										":fightId",
										"role",
										":refereeRole"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "refereeRole",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fighters",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/role/:refereeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"role",
												":refereeRole"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												},
												{
													"key": "refereeRole"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightReferees\": {\n  \"refereeId\": \"elit enim qui\",\n  \"fightId\": \"Lorem ma\",\n  \"refereeRole\": \"eu anim\",\n  \"refereeFullName\": \"irure ut elit consequat\",\n  \"refereeDisplayName\": \"dolor\",\n  \"refereeNumber\": 85221989,\n  \"refereeTeamAlternateName\": \"consequat dolor consectetur occaecat anim\",\n  \"refereeCountryFlag\": \"ex laborum exercitation dolor eu\",\n  \"refereeFull\": \"cupidatat L\",\n  \"id\": \"deserunt\"\n }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/role/:refereeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"role",
												":refereeRole"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												},
												{
													"key": "refereeRole"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a fight referee with the referee's number",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refereeId\": \"<string>\",\n    \"refereeRole\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-referee",
										":fightId",
										"number"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"number"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"number"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"number"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/:fightId/number",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												":fightId",
												"number"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a fight referee",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-referee",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fighters",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightReferee\": {\n  \"refereeId\": \"fugiat ut\",\n  \"fightId\": \"tempor ex\",\n  \"refereeRole\": \"anim enim aute in\",\n  \"refereeFullName\": \"commodo enim\",\n  \"refereeDisplayName\": \"nisi in officia reprehenderit\",\n  \"refereeNumber\": -77618309,\n  \"refereeTeamAlternateName\": \"veniam\",\n  \"refereeCountryFlag\": \"irure et adipisicing anim\",\n  \"refereeFull\": \"id pariatur\",\n  \"id\": \"dolore\"\n }\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a fight referee",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refereeId\": \"<string>\",\n    \"refereeRole\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-referee",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a fight referee",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-referee",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fighter",
			"item": [
				{
					"name": "{athlete Id}",
					"item": [
						{
							"name": "Get fighters",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":athleteId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "athleteId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Fighter not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fighters",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fighters\": {\n  \"athleteId\": \"minim Excepteur dolore aliqua\",\n  \"sportEventWeightCategoryId\": \"tempor anim\",\n  \"weightCategoryFullName\": \"elit officia dolore dolor commodo\",\n  \"weightCategoryShortName\": \"non mollit\",\n  \"weightCategoryCountFights\": 94631608,\n  \"hasWeightCategoryBlockchainIds\": true,\n  \"personId\": \"anim culpa mollit\",\n  \"fullName\": \"aliqua dolor\",\n  \"displayName\": \"enim id aliqua\",\n  \"givenName\": \"aute\",\n  \"familyName\": \"fugiat\",\n  \"personPhoto\": \"do eu\",\n  \"athenaPrintId\": \"veniam sit\",\n  \"teamAlternateName\": \"cupidatat fugiat\",\n  \"teamName\": \"ipsum commodo\",\n  \"teamCountryFlag\": \"qui in et anim\",\n  \"sportEventTeamId\": \"in laborum eu esse ex\",\n  \"drawRank\": -59773110,\n  \"robinGroup\": \"mollit reprehenderit aliqua\",\n  \"robinGroupRank\": 30739405,\n  \"knockOutStatus\": \"enim sint exercitation\",\n  \"hasLostknockOut\": true,\n  \"rank\": 21727332,\n  \"isCompeting\": false,\n  \"hasOpenFight\": false,\n  \"isDisqualified\": false,\n  \"isNotRanked\": true,\n  \"id\": \"anim\",\n  \"drawNumber\": 100,\n  \"seedNumber\": 12,\n  \"fighterWeight\": -62869234.28455311,\n  \"fighterStatus\": 71021611\n }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a fighter",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sportEventWeightCategory\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":athleteId"
									],
									"variable": [
										{
											"key": "athleteId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a fighter by AthleteId and SportEventWeightCategoryId",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":athleteId",
										"weight",
										":sportEventWeightCategoryId"
									],
									"variable": [
										{
											"key": "athleteId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId",
												"weight",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a fighter",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId",
												"weight",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"athleteId\": \"proident\",\n \"sportEventWeightCategoryId\": \"voluptate velit in Lorem\",\n \"weightCategoryFullName\": \"proiden\",\n \"weightCategoryShortName\": \"deserunt\",\n \"weightCategoryCountFights\": -10701597,\n \"hasWeightCategoryBlockchainIds\": false,\n \"weightCategoryCountReadyFighters\": 33426534,\n \"countFights\": 35451996,\n \"personId\": \"non minim dolore fugiat\",\n \"fullName\": \"nostrud\",\n \"preferedName\": \"adipisicing\",\n \"displayName\": \"ad occaecat in\",\n \"givenName\": \"labore quis deserunt veniam do\",\n \"familyName\": \"sed dolor\",\n \"personPhoto\": \"Excepteur minim\",\n \"athenaPrintId\": \"mollit cillum Ut dolore ea\",\n \"teamAlternateName\": \"pariatur aute voluptate\",\n \"teamName\": \"in amet dolore do\",\n \"teamCountryFlag\": \"eius\",\n \"sportEventTeamId\": \"fugiat non\",\n \"sportEventId\": \"officia eiusmod sint\",\n \"drawRank\": 52892185,\n \"robinGroup\": \"minim\",\n \"robinGroupRank\": 33829244,\n \"teamRankingPoint\": -87009418,\n \"uwwPoint\": -56872634,\n \"knockOutStatus\": \"officia commodo est Ut\",\n \"hasLostknockOut\": false,\n \"completed\": -41036142,\n \"wins\": -79959551,\n \"losses\": -16948640,\n \"technicalPointsFor\": -81663888,\n \"technicalPointsAgainst\": -75337415,\n \"technicalPointsDiff\": -60906436,\n \"rankingPointsFor\": -12953465,\n \"rankingPointsAgainst\": 11723295,\n \"rankingPointsDiff\": -89398693,\n \"winsEasy\": -3026529,\n \"winsSuperiority\": -60535244,\n \"rank\": 93545383,\n \"rankRobinGroup\": -84486485,\n \"fightByOpponent\": {\n  \"sportEventId\": \"eiusmod dolor aliqua fugiat\",\n  \"sportEventWeightCategoryId\": \"nostrud Excepteur mollit ex\",\n  \"fighter1Id\": \"proident anim amet enim\",\n  \"fighter2Id\": \"aliqua sit minim anim \",\n  \"team1Name\": \"ullamco commod\",\n  \"team1AlternateName\": \"incididunt adipis\",\n  \"team1FullName\": \"ipsum consectetur\",\n  \"team1CountryFlag\": \"mollit tempor\",\n  \"team1CountryFlagScoreboard\": \"quis eu\",\n  \"team1PoolName\": \"ut\",\n  \"team1FightByOpponent\": \"do laboris nostrud irure\",\n  \"team2Name\": \"ullamco ea nostrud\",\n  \"team2AlternateName\": \"amet culpa Ut\",\n  \"team2FullName\": \"commodo eu consequat incididunt\",\n  \"team2CountryFlag\": \"laborum sed\",\n  \"team2CountryFlagScoreboard\": \"veniam exercitation et\",\n  \"team2PoolName\": \"dolore n\",\n  \"team2FightByOpponent\": \"dolor non\",\n  \"roundFriendlyName\": \"consectetur reprehenderit\",\n  \"displayOrderInRound\": 86398878,\n  \"round1Id\": \"est officia ipsum\",\n  \"round2Id\": \"fugiat labore dolore in\",\n  \"countReferees\": -71216369,\n  \"sportId\": \"commodo Ut officia Lorem\",\n  \"athlete1Color\": \"non pariatur ullamco\",\n  \"athlete2Color\": \"incididun\",\n  \"athlete1TextColor\": \"exercitation ea minim\",\n  \"athlete2TextColor\": \"cupidatat laborum\",\n  \"matName\": \"veniam\",\n  \"sessionId\": \"quis magna\",\n  \"sessionName\": \"eiusmod officia\",\n  \"technicalPoints\": \"consectetur in sit\",\n  \"uploaderFightTest\": \"est Excepteur\",\n  \"technicalPointDetails\": \"sit est amet adipisicing Ut\",\n  \"technicalPointTagStatus\": \"Duis aute eu\",\n  \"technicalPointIds\": \"nostrud ea ullamco cupidatat\",\n  \"isCompleted\": true,\n  \"isReady\": true,\n  \"isRobinGroupFight\": false,\n  \"winnerFighter\": \"nulla tempor\",\n  \"winnerTeam\": \"incididunt in\",\n  \"winnerTeamAlternateName\": \"cillum irure dolore\",\n  \"sportEventName\": \"Ut Lorem labore\",\n  \"sportEventStartDate\": \"nisi la\",\n  \"sportEventLogo\": \"sed Lorem \",\n  \"rankingPoint\": {\n   \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n  },\n  \"completedDate\": \"nulla adipisicing occaecat\",\n  \"roundsNumber\": 34839345,\n  \"roundDuration\": 77985765,\n  \"sportAlternateName\": \"adipisicing ex pariatur nulla\",\n  \"weightCategoryName\": \"tempor magna do laborum\",\n  \"weightCategoryAlternateName\": \"pariatur elit mollit\",\n  \"weightCategoryShortName\": \"eiusmod id\",\n  \"weightCategoryMaxWeight\": -83000005,\n  \"weightCategoryFullName\": \"sit laboris veniam aute\",\n  \"weightCategoryAverageDuration\": -30963280,\n  \"weightCategoryColor\": \"dolor irure\",\n  \"weightCategoryCompleted\": true,\n  \"victoryTypes\": \"Excepteur Ut in culpa deserunt\",\n  \"victoryTypesArray\": \"ut proident consectetur\",\n  \"audienceName\": \"ad irure dolore\",\n  \"audienceShortName\": \"exercitation \",\n  \"sportName\": \"deserunt labore sint nostrud\",\n  \"injuryTime\": -58175125,\n  \"warnings\": false,\n  \"cautions\": 68204836,\n  \"legFouls\": false,\n  \"activityTime\": false,\n  \"fighter1FullName\": \"aute sunt\",\n  \"fighter1DisplayName\": \"pariatur fug\",\n  \"fighter1FamilyName\": \"qui est\",\n  \"fighter1GivenName\": \"ipsum do nostrud eiusmod\",\n  \"fighter1PreferedName\": \"magna consequat deserunt ad\",\n  \"fighter1DrawRank\": \"adipisicing sit cupidatat\",\n  \"fighter1RobinRank\": \"deserunt elit tempor\",\n  \"fighter1SeedNumber\": -40296256,\n  \"fighter1AthleteId\": \"irure Ut cillum tempor\",\n  \"fighter1PersonId\": \"eiusmod proident do ad\",\n  \"fighter1IsSeeded\": true,\n  \"fighter1Status\": 65554893,\n  \"fighter1IsInjured\": false,\n  \"fighter2FullName\": \"tempor incididunt do sit irure\",\n  \"fighter2DisplayName\": \"eiusmod dolore\",\n  \"fighter2FamilyName\": \"exercitation non\",\n  \"fighter2GivenName\": \"cupidatat deserunt proident\",\n  \"fighter2PreferedName\": \"consequat eu\",\n  \"fighter2DrawRank\": 4130526,\n  \"fighter2RobinRank\": -47725332,\n  \"fighter2SeedNumber\": -55073318,\n  \"fighter2AthleteId\": \"Ut sint\",\n  \"fighter2PersonId\": \"officia mollit\",\n  \"fighter2IsSeeded\": true,\n  \"fighter2Status\": -77730979,\n  \"fighter2IsInjured\": false,\n  \"result\": \"mollit nostrud\",\n  \"victoryType\": \"cupidatat nulla laborum exercitation\",\n  \"endTime\": 19502804,\n  \"endDate\": \"reprehenderit\",\n  \"expectedDateStart\": \"occaecat sint cu\",\n  \"expectedStartDate\": \"sunt \",\n  \"team1Fighters\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"team2Fighters\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"rankingPointNiceName\": \"ipsum irure sunt\",\n  \"resultText\": \"enim officia\",\n  \"resultTextSmall\": \"mollit cillum nulla ullamco\",\n  \"roundRenamedSmall\": \"et incididunt laborum\",\n  \"parentFightNumber1\": 87675391,\n  \"parentFightNumber2\": -84847672,\n  \"fightRefereesWithRole\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"needsRefresh\": true,\n  \"isCountdown\": false,\n  \"id\": \"dolore velit ipsum elit reprehenderit\",\n  \"parentFight1Id\": \"Excepteur\",\n  \"parentFight2Id\": \"irure cillum qui ipsum\",\n  \"fighter1\": \"minim nulla irure\",\n  \"fighter1RankingPoint\": 6496,\n  \"fighter2\": \"do sint aute\",\n  \"fighter2RankingPoint\": 7919,\n  \"refereeGroup\": \"i\",\n  \"sportEventTeam1Id\": \"officia culpa\",\n  \"sportEventTeam2Id\": \"aliqua\",\n  \"fightMatId\": \"do minim\",\n  \"round\": \"pari\",\n  \"qualifying\": false,\n  \"teamFightId\": \"aute sed\",\n  \"status\": -42423867,\n  \"rankingCheck\": true,\n  \"technicalCheck\": true,\n  \"weight\": -25984207,\n  \"fightNumber\": 7235,\n  \"roundWeight\": 6760,\n  \"repechageWeight\": 5196,\n  \"repechageSection\": 1409,\n  \"displayOrder\": 3244,\n  \"canceled\": \"culpa\",\n  \"fightReferees\": [\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   }\n  ],\n  \"odfCode\": \"in commodo veniam\"\n },\n \"isCompeting\": true,\n \"hasOpenFight\": true,\n \"isDisqualified\": true,\n \"isNotRanked\": false,\n \"isInjured\": false,\n \"isForfeit\": false,\n \"isRobinGroupNotRanked\": false,\n \"id\": \"sunt nostrud commodo quis\",\n \"sportEventWeightCategory\": \"reprehenderit\",\n \"weight\": 174,\n \"drawNumber\": 138,\n \"seedNumber\": 20,\n \"fighterWeight\": -62848773.43519497,\n \"points\": 11,\n \"fighterStatus\": 16904014\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/:athleteId/weight/:sportEventWeightCategoryId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												":athleteId",
												"weight",
												":sportEventWeightCategoryId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "athleteId"
												},
												{
													"key": "sportEventWeightCategoryId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "draw",
									"item": [
										{
											"name": "Update a fighter draw (POST METHOD)",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id",
														"draw"
													],
													"query": [
														{
															"key": "bracket",
															"value": "<boolean>",
															"description": "Return with a redirect to LiveBracket"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Update a fighter draw",
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<float>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id",
														"draw"
													],
													"query": [
														{
															"key": "bracket",
															"value": "<boolean>",
															"description": "Return with a redirect to LiveBracket"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<float>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when invalid parameters are submitted",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<float>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<float>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when successful",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"drawNumber\": \"<integer>\",\n    \"seedNumber\": \"<integer>\",\n    \"fighterWeight\": \"<float>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id/draw?bracket=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"fighter",
																"get",
																":id",
																"draw"
															],
															"query": [
																{
																	"key": "bracket",
																	"value": "<boolean>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "/api/{{_format}}/fighter/get/:id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Fighter not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns a fighter",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"fighter\": {\n  \"athleteId\": \"ullamco nostrud in\",\n  \"sportEventWeightCategoryId\": \"ipsum est dolor anim\",\n  \"weightCategoryFullName\": \"fugiat ad enim sed\",\n  \"weightCategoryShortName\": \"enim non\",\n  \"weightCategoryCountFights\": -5526873,\n  \"hasWeightCategoryBlockchainIds\": true,\n  \"weightCategoryCountReadyFighters\": -83976303,\n  \"countFights\": -76937732,\n  \"personId\": \"est officia quis ut ut\",\n  \"fullName\": \"in elit id esse\",\n  \"preferedName\": \"tempor do dolor enim\",\n  \"displayName\": \"ut aliquip\",\n  \"givenName\": \"nisi\",\n  \"familyName\": \"sed ex ullamco Lorem\",\n  \"personPhoto\": \"ex consequat\",\n  \"athenaPrintId\": \"ullamc\",\n  \"teamAlternateName\": \"minim aute\",\n  \"teamName\": \"nostrud nulla cillum\",\n  \"teamCountryFlag\": \"elit incididunt in\",\n  \"sportEventTeamId\": \"mollit in ut\",\n  \"sportEventId\": \"qui m\",\n  \"drawRank\": 91448899,\n  \"robinGroup\": \"irure do mini\",\n  \"robinGroupRank\": 40585396,\n  \"teamRankingPoint\": 89565760,\n  \"uwwPoint\": -13133163,\n  \"knockOutStatus\": \"cillum quis sit\",\n  \"hasLostknockOut\": true,\n  \"completed\": -98846968,\n  \"wins\": 98024006,\n  \"losses\": 80061649,\n  \"technicalPointsFor\": 70178323,\n  \"technicalPointsAgainst\": 2596410,\n  \"technicalPointsDiff\": 80284642,\n  \"rankingPointsFor\": 80370429,\n  \"rankingPointsAgainst\": 80362626,\n  \"rankingPointsDiff\": -42655483,\n  \"winsEasy\": -44890711,\n  \"winsSuperiority\": -87352641,\n  \"rank\": -14730219,\n  \"rankRobinGroup\": 31677262,\n  \"fightByOpponent\": {\n   \"sportEventId\": \"magna sed pariatur ut\",\n   \"sportEventWeightCategoryId\": \"et\",\n   \"fighter1Id\": \"cillum dolore\",\n   \"fighter2Id\": \"Lorem minim\",\n   \"team1Name\": \"ut magna aliquip laboris\",\n   \"team1AlternateName\": \"sunt consequat ut mollit\",\n   \"team1FullName\": \"mollit\",\n   \"team1CountryFlag\": \"est v\",\n   \"team1CountryFlagScoreboard\": \"magna veniam ut laborum\",\n   \"team1PoolName\": \"magna exercitation ullamco Duis\",\n   \"team1FightByOpponent\": \"magna ea occaecat\",\n   \"team2Name\": \"incididunt\",\n   \"team2AlternateName\": \"id ea labore in\",\n   \"team2FullName\": \"Ut quis enim sunt in\",\n   \"team2CountryFlag\": \"cillum eni\",\n   \"team2CountryFlagScoreboard\": \"sunt\",\n   \"team2PoolName\": \"amet\",\n   \"team2FightByOpponent\": \"minim ut dolor amet\",\n   \"roundFriendlyName\": \"deserunt est et voluptate\",\n   \"displayOrderInRound\": -49023006,\n   \"round1Id\": \"aute dolore non ullamco\",\n   \"round2Id\": \"ut amet\",\n   \"countReferees\": 24265516,\n   \"sportId\": \"in in\",\n   \"athlete1Color\": \"nisi tempor Lorem in officia\",\n   \"athlete2Color\": \"aliqua Lorem culpa sit\",\n   \"athlete1TextColor\": \"ea quis commodo\",\n   \"athlete2TextColor\": \"eiusmod Duis ipsum\",\n   \"matName\": \"aute ex nostrud amet\",\n   \"sessionId\": \"voluptate consectetur proident aliquip\",\n   \"sessionName\": \"reprehenderit ea laboris\",\n   \"technicalPoints\": \"Lorem\",\n   \"uploaderFightTest\": \"sunt dolore tempor\",\n   \"technicalPointDetails\": \"veniam\",\n   \"technicalPointTagStatus\": \"sed ea Ut\",\n   \"technicalPointIds\": \"dolore culpa commodo\",\n   \"isCompleted\": false,\n   \"isReady\": true,\n   \"isRobinGroupFight\": false,\n   \"winnerFighter\": \"id ad aute incididunt mollit\",\n   \"winnerTeam\": \"in sunt\",\n   \"winnerTeamAlternateName\": \"veniam nostrud enim\",\n   \"sportEventName\": \"adipisicing deserunt in eiusmod\",\n   \"sportEventStartDate\": \"aliqua\",\n   \"sportEventLogo\": \"irure dolor magna\",\n   \"rankingPoint\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"completedDate\": \"ullamco proident elit esse\",\n   \"roundsNumber\": -70318629,\n   \"roundDuration\": 58581948,\n   \"sportAlternateName\": \"aute incididunt\",\n   \"weightCategoryName\": \"aute in enim id\",\n   \"weightCategoryAlternateName\": \"Lorem mollit\",\n   \"weightCategoryShortName\": \"deserunt cupidatat voluptate\",\n   \"weightCategoryMaxWeight\": -10480052,\n   \"weightCategoryFullName\": \"in ut nulla in proident\",\n   \"weightCategoryAverageDuration\": 63396837,\n   \"weightCategoryColor\": \"veni\",\n   \"weightCategoryCompleted\": false,\n   \"victoryTypes\": \"nostrud aute\",\n   \"victoryTypesArray\": \"incididunt exercitation mollit elit\",\n   \"audienceName\": \"Lorem nulla\",\n   \"audienceShortName\": \"dolore laboris commodo Lorem\",\n   \"sportName\": \"reprehenderit fugiat\",\n   \"injuryTime\": 46199179,\n   \"warnings\": false,\n   \"cautions\": 22946230,\n   \"legFouls\": true,\n   \"activityTime\": false,\n   \"fighter1FullName\": \"tempor pariatur\",\n   \"fighter1DisplayName\": \"cillum tempor non\",\n   \"fighter1FamilyName\": \"in ullamco\",\n   \"fighter1GivenName\": \"ut\",\n   \"fighter1PreferedName\": \"laborum in Duis\",\n   \"fighter1DrawRank\": \"esse in nostrud aute\",\n   \"fighter1RobinRank\": \"aliquip aliqua\",\n   \"fighter1SeedNumber\": -44909396,\n   \"fighter1AthleteId\": \"eu amet reprehenderit deserunt\",\n   \"fighter1PersonId\": \"irure Ut Duis adipisicing\",\n   \"fighter1IsSeeded\": false,\n   \"fighter1Status\": 13462157,\n   \"fighter1IsInjured\": true,\n   \"fighter2FullName\": \"veniam quis consectetur aliquip\",\n   \"fighter2DisplayName\": \"ullamco laboris\",\n   \"fighter2FamilyName\": \"ullamco\",\n   \"fighter2GivenName\": \"amet qui non tempor\",\n   \"fighter2PreferedName\": \"irure ex culpa sit\",\n   \"fighter2DrawRank\": -48852634,\n   \"fighter2RobinRank\": 26876934,\n   \"fighter2SeedNumber\": -72674994,\n   \"fighter2AthleteId\": \"fugiat\",\n   \"fighter2PersonId\": \"reprehenderit sunt ipsum occaecat\",\n   \"fighter2IsSeeded\": true,\n   \"fighter2Status\": 10842392,\n   \"fighter2IsInjured\": true,\n   \"result\": \"aute Excepteur\",\n   \"victoryType\": \"ut\",\n   \"endTime\": 73864810,\n   \"endDate\": \"laborum et aute in\",\n   \"expectedDateStart\": \"eiusmod minim\",\n   \"expectedStartDate\": \"est id cupidatat\",\n   \"team1Fighters\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"team2Fighters\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"rankingPointNiceName\": \"ut eu quis laborum veniam\",\n   \"resultText\": \"eiusmod officia culpa\",\n   \"resultTextSmall\": \"non aliquip commodo eu\",\n   \"roundRenamedSmall\": \"id culpa\",\n   \"parentFightNumber1\": -35986176,\n   \"parentFightNumber2\": -23547222,\n   \"fightRefereesWithRole\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"needsRefresh\": false,\n   \"isCountdown\": false,\n   \"id\": \"eu do\",\n   \"parentFight1Id\": \"non nulla voluptate\",\n   \"parentFight2Id\": \"tempor Excepteur con\",\n   \"fighter1\": \"ullamco id proident\",\n   \"fighter1RankingPoint\": 2936,\n   \"fighter2\": \"sunt Duis cupidatat\",\n   \"fighter2RankingPoint\": 5266,\n   \"refereeGroup\": \"e\",\n   \"sportEventTeam1Id\": \"dolore\",\n   \"sportEventTeam2Id\": \"nisi sed dolor\",\n   \"fightMatId\": \"n\",\n   \"round\": \"pari\",\n   \"qualifying\": false,\n   \"teamFightId\": \"commodo mollit quis\",\n   \"status\": 14271573,\n   \"rankingCheck\": true,\n   \"technicalCheck\": true,\n   \"weight\": 21577264,\n   \"fightNumber\": 9708,\n   \"roundWeight\": 2417,\n   \"repechageWeight\": 6119,\n   \"repechageSection\": 2383,\n   \"displayOrder\": 2670,\n   \"canceled\": \"mollit in commodo sint\",\n   \"fightReferees\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"odfCode\": \"irure officia\"\n  },\n  \"isCompeting\": false,\n  \"hasOpenFight\": true,\n  \"isDisqualified\": false,\n  \"isNotRanked\": false,\n  \"isInjured\": true,\n  \"isForfeit\": true,\n  \"isRobinGroupNotRanked\": false,\n  \"id\": \"irure deserunt ut et\",\n  \"sportEventWeightCategory\": \"et\",\n  \"weight\": 223,\n  \"drawNumber\": 125,\n  \"seedNumber\": 9,\n  \"fighterWeight\": -2365319.00893797,\n  \"points\": 425,\n  \"fighterStatus\": -89247046\n }\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a fighter",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventWeightCategory\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete a fighter",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"fighter",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear a fighter draw",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										"get",
										":fighter",
										"draw",
										"clear"
									],
									"query": [
										{
											"key": "bracket",
											"value": "<boolean>",
											"description": "Return with a redirect to LiveBracket"
										}
									],
									"variable": [
										{
											"key": "fighter",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"get",
												":fighter",
												"draw",
												"clear"
											],
											"query": [
												{
													"key": "bracket",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fighter"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"get",
												":fighter",
												"draw",
												"clear"
											],
											"query": [
												{
													"key": "bracket",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fighter"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"error\": \"nulla ad\",\n \"success\": \"proident pariatur\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fighter/get/:fighter/draw/clear?bracket=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fighter",
												"get",
												":fighter",
												"draw",
												"clear"
											],
											"query": [
												{
													"key": "bracket",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fighter"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get fighters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fighter",
								""
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns fighters",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fighters\": {\n  \"athleteId\": \"minim Excepteur dolore aliqua\",\n  \"sportEventWeightCategoryId\": \"tempor anim\",\n  \"weightCategoryFullName\": \"elit officia dolore dolor commodo\",\n  \"weightCategoryShortName\": \"non mollit\",\n  \"weightCategoryCountFights\": 94631608,\n  \"hasWeightCategoryBlockchainIds\": true,\n  \"personId\": \"anim culpa mollit\",\n  \"fullName\": \"aliqua dolor\",\n  \"displayName\": \"enim id aliqua\",\n  \"givenName\": \"aute\",\n  \"familyName\": \"fugiat\",\n  \"personPhoto\": \"do eu\",\n  \"athenaPrintId\": \"veniam sit\",\n  \"teamAlternateName\": \"cupidatat fugiat\",\n  \"teamName\": \"ipsum commodo\",\n  \"teamCountryFlag\": \"qui in et anim\",\n  \"sportEventTeamId\": \"in laborum eu esse ex\",\n  \"drawRank\": -59773110,\n  \"robinGroup\": \"mollit reprehenderit aliqua\",\n  \"robinGroupRank\": 30739405,\n  \"knockOutStatus\": \"enim sint exercitation\",\n  \"hasLostknockOut\": true,\n  \"rank\": 21727332,\n  \"isCompeting\": false,\n  \"hasOpenFight\": false,\n  \"isDisqualified\": false,\n  \"isNotRanked\": true,\n  \"id\": \"anim\",\n  \"drawNumber\": 100,\n  \"seedNumber\": 12,\n  \"fighterWeight\": -62869234.28455311,\n  \"fighterStatus\": 71021611\n }\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Fighter not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "List all fighters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fighter/list?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fighter",
								"list"
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/list?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns fighters",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/list?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fighters\": \"schema type not provided\"\n}"
						}
					]
				},
				{
					"name": "Update a fighter's qualification status",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fighter",
								":id",
								"status"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when invalid parameters are submitted",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:id/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":id",
										"status"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Create a new fighter via quick form",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\",\n    \"sportEventWeightCategory\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fighter",
								":sportEventId",
								"quick"
							],
							"variable": [
								{
									"key": "sportEventId",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when invalid parameters are submitted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\",\n    \"sportEventWeightCategory\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":sportEventId",
										"quick"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\",\n    \"sportEventWeightCategory\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":sportEventId",
										"quick"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\",\n    \"sportEventWeightCategory\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":sportEventId",
										"quick"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\",\n    \"sportEventWeightCategory\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fighter/:sportEventId/quick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fighter",
										":sportEventId",
										"quick"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "fight-mat",
			"item": [
				{
					"name": "{sport Event Session Id}",
					"item": [
						{
							"name": "Get fight mats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										":sportEventSessionId"
									],
									"variable": [
										{
											"key": "sportEventSessionId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fightMats",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightMats\": \"schema type not provided\",\n \"sportEventId\": \"Excepteur velit\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a fight mat",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sportEventMatId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										":sportEventSessionId"
									],
									"variable": [
										{
											"key": "sportEventSessionId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get fight mats (faster - no fights)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										":sportEventSessionId",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventSessionId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns fightMats",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSessionId/list?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												":sportEventSessionId",
												"list"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventSessionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightMats\": \"schema type not provided\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a fight mat",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a fightMat",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"matName\": \"velit sunt nisi occaecat\",\n \"sessionName\": \"sit laboris enim\",\n \"sessionStartDate\": \"labore pariatur\",\n \"sessionEndDate\": \"consectetur occaecat\",\n \"countSessionFightMats\": 49990800,\n \"sportEventId\": \"enim dolor esse do non\",\n \"matStreaming\": \"Duis culpa Lorem dolore\",\n \"id\": \"laborum culpa\",\n \"sportEventSessionId\": \"dolor Ut\",\n \"sportEventMatId\": \"adipisicing commodo est\",\n \"fights\": [\n  {\n   \"sportEventId\": \"non\",\n   \"sportEventWeightCategoryId\": \"dolore officia\",\n   \"fighter1Id\": \"\",\n   \"fighter2Id\": \"velit sint\",\n   \"team1Name\": \"sint volup\",\n   \"team1AlternateName\": \"veniam\",\n   \"team1FullName\": \"eu nostrud\",\n   \"team1CountryFlag\": \"minim id mollit\",\n   \"team1CountryFlagScoreboard\": \"sint magna qui\",\n   \"team1PoolName\": \"incididunt\",\n   \"team1FightByOpponent\": \"irure ame\",\n   \"team2Name\": \"irure\",\n   \"team2AlternateName\": \"eiusmod esse eu\",\n   \"team2FullName\": \"ad tempor\",\n   \"team2CountryFlag\": \"nulla in Ut quis\",\n   \"team2CountryFlagScoreboard\": \"sit sint nulla id\",\n   \"team2PoolName\": \"dolore\",\n   \"team2FightByOpponent\": \"in nisi esse proiden\",\n   \"roundFriendlyName\": \"cillum veniam aliquip\",\n   \"displayOrderInRound\": -70446111,\n   \"round1Id\": \"cillum velit quis\",\n   \"round2Id\": \"Lorem laborum d\",\n   \"countReferees\": 59177544,\n   \"sportId\": \"Ut pariatur\",\n   \"athlete1Color\": \"sint Ut tempor magna dolor\",\n   \"athlete2Color\": \"sit ea\",\n   \"athlete1TextColor\": \"eiusmod do Excepteur dolor\",\n   \"athlete2TextColor\": \"magna ut deserunt veniam\",\n   \"matName\": \"qui\",\n   \"sessionId\": \"in\",\n   \"sessionName\": \"est id dolore magna occaecat\",\n   \"technicalPoints\": \"ea sint deserunt labore \",\n   \"uploaderFightTest\": \"et anim\",\n   \"technicalPointDetails\": \"proident ea sint\",\n   \"technicalPointTagStatus\": \"in ipsum quis velit\",\n   \"technicalPointIds\": \"velit ullamco consectetur cillum non\",\n   \"isCompleted\": false,\n   \"isReady\": true,\n   \"isRobinGroupFight\": true,\n   \"winnerFighter\": \"id incididunt sit elit\",\n   \"winnerTeam\": \"incididunt Duis eiusmod cillum sed\",\n   \"winnerTeamAlternateName\": \"cillum incididunt\",\n   \"sportEventName\": \"enim tempor elit in\",\n   \"sportEventStartDate\": \"in\",\n   \"sportEventLogo\": \"minim\",\n   \"rankingPoint\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"completedDate\": \"fugiat mini\",\n   \"roundsNumber\": -95465601,\n   \"roundDuration\": -42206671,\n   \"sportAlternateName\": \"dolore exercitation irure amet nulla\",\n   \"weightCategoryName\": \"id sunt\",\n   \"weightCategoryAlternateName\": \"dolore commodo quis ad\",\n   \"weightCategoryShortName\": \"anim veniam volup\",\n   \"weightCategoryMaxWeight\": -9147466,\n   \"weightCategoryFullName\": \"dolore Ut non cillum\",\n   \"weightCategoryAverageDuration\": -4055395,\n   \"weightCategoryColor\": \"velit dolore qui esse nisi\",\n   \"weightCategoryCompleted\": false,\n   \"victoryTypes\": \"consequat Duis\",\n   \"victoryTypesArray\": \"cillum elit in\",\n   \"audienceName\": \"ad ipsum sed aliqua\",\n   \"audienceShortName\": \"adipisicing incididun\",\n   \"sportName\": \"u\",\n   \"injuryTime\": -52732824,\n   \"warnings\": true,\n   \"cautions\": 29652730,\n   \"legFouls\": true,\n   \"activityTime\": false,\n   \"fighter1FullName\": \"ut labore\",\n   \"fighter1DisplayName\": \"velit\",\n   \"fighter1FamilyName\": \"in reprehenderit dolor\",\n   \"fighter1GivenName\": \"amet ess\",\n   \"fighter1PreferedName\": \"amet fugiat\",\n   \"fighter1DrawRank\": \"minim dolor\",\n   \"fighter1RobinRank\": \"c\",\n   \"fighter1SeedNumber\": -34726555,\n   \"fighter1AthleteId\": \"Ut dolor fugiat proident\",\n   \"fighter1PersonId\": \"nulla anim\",\n   \"fighter1IsSeeded\": false,\n   \"fighter1Status\": -56333908,\n   \"fighter1IsInjured\": false,\n   \"fighter2FullName\": \"non\",\n   \"fighter2DisplayName\": \"ullamco ex\",\n   \"fighter2FamilyName\": \"aliquip nostrud anim ad\",\n   \"fighter2GivenName\": \"officia aliqua deserunt voluptate\",\n   \"fighter2PreferedName\": \"reprehenderit eiusmod aute\",\n   \"fighter2DrawRank\": 75363340,\n   \"fighter2RobinRank\": -87174600,\n   \"fighter2SeedNumber\": -41642999,\n   \"fighter2AthleteId\": \"minim\",\n   \"fighter2PersonId\": \"enim\",\n   \"fighter2IsSeeded\": false,\n   \"fighter2Status\": -9589371,\n   \"fighter2IsInjured\": true,\n   \"result\": \"Excepteur eiusmod non\",\n   \"victoryType\": \"culpa in laboris proident\",\n   \"endTime\": -60207551,\n   \"endDate\": \"elit exercitation ut cupidatat\",\n   \"expectedDateStart\": \"consectetur magna no\",\n   \"expectedStartDate\": \"amet ad sed\",\n   \"team1Fighters\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"team2Fighters\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"rankingPointNiceName\": \"fu\",\n   \"resultText\": \"et\",\n   \"resultTextSmall\": \"fugiat proident Lorem\",\n   \"roundRenamedSmall\": \"do nostrud sunt quis amet\",\n   \"parentFightNumber1\": 4905037,\n   \"parentFightNumber2\": -93879351,\n   \"fightRefereesWithRole\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"needsRefresh\": false,\n   \"isCountdown\": false,\n   \"id\": \"ex in laborum\",\n   \"parentFight1Id\": \"non fugiat\",\n   \"parentFight2Id\": \"cupidatat voluptate\",\n   \"fighter1\": \"sint exercitation\",\n   \"fighter1RankingPoint\": 1665,\n   \"fighter2\": \"esse exercitation proident tempor\",\n   \"fighter2RankingPoint\": 9854,\n   \"refereeGroup\": \"u\",\n   \"sportEventTeam1Id\": \"cupidatat\",\n   \"sportEventTeam2Id\": \"dolore sed\",\n   \"fightMatId\": \"ea sint\",\n   \"round\": \"non \",\n   \"qualifying\": false,\n   \"teamFightId\": \"consequat quis aute al\",\n   \"status\": -66886826,\n   \"rankingCheck\": false,\n   \"technicalCheck\": false,\n   \"weight\": -39883779,\n   \"fightNumber\": 9726,\n   \"roundWeight\": 6470,\n   \"repechageWeight\": 19,\n   \"repechageSection\": 4950,\n   \"displayOrder\": 41,\n   \"canceled\": \"consectetur sed ea velit\",\n   \"fightReferees\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"odfCode\": \"dolor\"\n  },\n  {\n   \"sportEventId\": \"magna in laboris nulla\",\n   \"sportEventWeightCategoryId\": \"in fugiat\",\n   \"fighter1Id\": \"incididunt amet occaecat reprehenderit ut\",\n   \"fighter2Id\": \"culpa sed\",\n   \"team1Name\": \"nisi Ut proident incidid\",\n   \"team1AlternateName\": \"minim sint pariatur\",\n   \"team1FullName\": \"consectetur ut Ut volu\",\n   \"team1CountryFlag\": \"ex aute ut laboris\",\n   \"team1CountryFlagScoreboard\": \"ad\",\n   \"team1PoolName\": \"sed commodo\",\n   \"team1FightByOpponent\": \"irure dolor labo\",\n   \"team2Name\": \"nostrud adipisicing anim Duis ipsum\",\n   \"team2AlternateName\": \"dolore ea in\",\n   \"team2FullName\": \"sit cillum velit incididunt\",\n   \"team2CountryFlag\": \"cupidatat in minim\",\n   \"team2CountryFlagScoreboard\": \"eu magna qui aliqua tempor\",\n   \"team2PoolName\": \"ullamco aute eu\",\n   \"team2FightByOpponent\": \"est incididunt in velit\",\n   \"roundFriendlyName\": \"tempor sunt quis ut\",\n   \"displayOrderInRound\": 13324788,\n   \"round1Id\": \"eu dolor ipsum\",\n   \"round2Id\": \"incididunt Excepteur\",\n   \"countReferees\": -79492291,\n   \"sportId\": \"fugiat deserunt do\",\n   \"athlete1Color\": \"cupidatat eiusmod nulla s\",\n   \"athlete2Color\": \"aliquip dolor\",\n   \"athlete1TextColor\": \"anim quis laboris occaecat\",\n   \"athlete2TextColor\": \"dol\",\n   \"matName\": \"consequat\",\n   \"sessionId\": \"laboris aliquip in ut\",\n   \"sessionName\": \"nulla ut qui\",\n   \"technicalPoints\": \"sed Du\",\n   \"uploaderFightTest\": \"sed est esse labore ex\",\n   \"technicalPointDetails\": \"sint\",\n   \"technicalPointTagStatus\": \"culpa ea pariatur\",\n   \"technicalPointIds\": \"elit officia eiusmod\",\n   \"isCompleted\": false,\n   \"isReady\": true,\n   \"isRobinGroupFight\": true,\n   \"winnerFighter\": \"commodo enim exercitation\",\n   \"winnerTeam\": \"dolore fugiat\",\n   \"winnerTeamAlternateName\": \"in eiusmod reprehenderit\",\n   \"sportEventName\": \"ad minim enim mollit\",\n   \"sportEventStartDate\": \"consequat dolore de\",\n   \"sportEventLogo\": \"eu non in elit\",\n   \"rankingPoint\": {\n    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n   },\n   \"completedDate\": \"do Duis\",\n   \"roundsNumber\": -64863499,\n   \"roundDuration\": -42605672,\n   \"sportAlternateName\": \"ea reprehenderit in magna\",\n   \"weightCategoryName\": \"exercitation in\",\n   \"weightCategoryAlternateName\": \"amet qui magna\",\n   \"weightCategoryShortName\": \"elit consequat velit et dolore\",\n   \"weightCategoryMaxWeight\": 82468697,\n   \"weightCategoryFullName\": \"cillum in\",\n   \"weightCategoryAverageDuration\": -91229615,\n   \"weightCategoryColor\": \"commodo fugiat veniam\",\n   \"weightCategoryCompleted\": false,\n   \"victoryTypes\": \"occaeca\",\n   \"victoryTypesArray\": \"amet do\",\n   \"audienceName\": \"voluptate proident\",\n   \"audienceShortName\": \"esse consectetur veniam laborum\",\n   \"sportName\": \"est officia sunt\",\n   \"injuryTime\": 77764607,\n   \"warnings\": true,\n   \"cautions\": -28126443,\n   \"legFouls\": true,\n   \"activityTime\": false,\n   \"fighter1FullName\": \"dolore ea dolor exercitation Duis\",\n   \"fighter1DisplayName\": \"officia reprehenderit incididunt\",\n   \"fighter1FamilyName\": \"Ut\",\n   \"fighter1GivenName\": \"enim mollit\",\n   \"fighter1PreferedName\": \"cupidatat elit laborum in\",\n   \"fighter1DrawRank\": \"amet deserunt dolor\",\n   \"fighter1RobinRank\": \"in officia\",\n   \"fighter1SeedNumber\": 29013403,\n   \"fighter1AthleteId\": \"dolore velit s\",\n   \"fighter1PersonId\": \"est\",\n   \"fighter1IsSeeded\": true,\n   \"fighter1Status\": 10544866,\n   \"fighter1IsInjured\": false,\n   \"fighter2FullName\": \"nulla velit\",\n   \"fighter2DisplayName\": \"culpa proident ullamco et\",\n   \"fighter2FamilyName\": \"occaecat id adipisicing\",\n   \"fighter2GivenName\": \"et Ut laborum proident\",\n   \"fighter2PreferedName\": \"nostrud cillum dolore in in\",\n   \"fighter2DrawRank\": 38980713,\n   \"fighter2RobinRank\": -65481686,\n   \"fighter2SeedNumber\": -22054941,\n   \"fighter2AthleteId\": \"non eu Excepteur\",\n   \"fighter2PersonId\": \"Duis laborum ni\",\n   \"fighter2IsSeeded\": true,\n   \"fighter2Status\": 64210811,\n   \"fighter2IsInjured\": false,\n   \"result\": \"pariatur culpa exercitation dolor\",\n   \"victoryType\": \"fugiat\",\n   \"endTime\": 67414067,\n   \"endDate\": \"commodo laboris minim dolor\",\n   \"expectedDateStart\": \"labore ullamco nisi anim eu\",\n   \"expectedStartDate\": \"cupidatat\",\n   \"team1Fighters\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"team2Fighters\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"rankingPointNiceName\": \"ullamco exercitation ut eu\",\n   \"resultText\": \"in consequat\",\n   \"resultTextSmall\": \"nulla Ut et\",\n   \"roundRenamedSmall\": \"aliquip nisi irure esse mollit\",\n   \"parentFightNumber1\": -46121913,\n   \"parentFightNumber2\": -5111950,\n   \"fightRefereesWithRole\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"needsRefresh\": true,\n   \"isCountdown\": false,\n   \"id\": \"commodo minim\",\n   \"parentFight1Id\": \"laboris eu reprehenderit consectetur mollit\",\n   \"parentFight2Id\": \"aliquip sed\",\n   \"fighter1\": \"dolor aliqua mollit Ut\",\n   \"fighter1RankingPoint\": 2402,\n   \"fighter2\": \"dolor qui nostrud\",\n   \"fighter2RankingPoint\": 1547,\n   \"refereeGroup\": \"c\",\n   \"sportEventTeam1Id\": \"dolore magna\",\n   \"sportEventTeam2Id\": \"minim mollit nisi eu et\",\n   \"fightMatId\": \"amet est voluptate consectetur\",\n   \"round\": \"adip\",\n   \"qualifying\": false,\n   \"teamFightId\": \"est sed \",\n   \"status\": -8319788,\n   \"rankingCheck\": true,\n   \"technicalCheck\": false,\n   \"weight\": -98777934,\n   \"fightNumber\": 8937,\n   \"roundWeight\": 5805,\n   \"repechageWeight\": 5742,\n   \"repechageSection\": 9757,\n   \"displayOrder\": 7227,\n   \"canceled\": \"laboris d\",\n   \"fightReferees\": [\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n   ],\n   \"odfCode\": \"velit veniam\"\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a fight mat",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sportEventMatId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a fight mat",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Start list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"get",
										":id",
										"start-list"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns StartList for a Mat",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id",
												"start-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sportEvent\": \"enim exercitation pariatur\",\n \"fightMat\": {\n  \"matName\": \"ut dolor consectetur pariatur\",\n  \"sessionName\": \"reprehenderit\",\n  \"sessionStartDate\": \"veniam culpa aute\",\n  \"sessionEndDate\": \"irure nostrud ut voluptate\",\n  \"countSessionFightMats\": -89635986,\n  \"sportEventId\": \"anim incididunt\",\n  \"matStreaming\": \"nisi min\",\n  \"id\": \"culpa veniam tempor\",\n  \"sportEventSessionId\": \"ul\",\n  \"sportEventMatId\": \"qui non eiusmod\",\n  \"fights\": [\n   {\n    \"sportEventId\": \"do\",\n    \"sportEventWeightCategoryId\": \"in\",\n    \"fighter1Id\": \"tempor\",\n    \"fighter2Id\": \"do non\",\n    \"team1Name\": \"officia ullamco exercitation\",\n    \"team1AlternateName\": \"esse commodo dolor aliqua\",\n    \"team1FullName\": \"dolore culpa quis ex\",\n    \"team1CountryFlag\": \"ea\",\n    \"team1CountryFlagScoreboard\": \"officia consequat\",\n    \"team1PoolName\": \"occaecat nulla consequat deserunt\",\n    \"team1FightByOpponent\": \"est id irure nulla\",\n    \"team2Name\": \"ut aliquip et\",\n    \"team2AlternateName\": \"incididunt in officia dolore\",\n    \"team2FullName\": \"sunt velit\",\n    \"team2CountryFlag\": \"adipisicing sit\",\n    \"team2CountryFlagScoreboard\": \"occaecat cillum\",\n    \"team2PoolName\": \"exercitation officia irure adipisicing\",\n    \"team2FightByOpponent\": \"labore sint dolor\",\n    \"roundFriendlyName\": \"aute\",\n    \"displayOrderInRound\": -79102160,\n    \"round1Id\": \"amet\",\n    \"round2Id\": \"labore laboris nisi\",\n    \"countReferees\": 56980832,\n    \"sportId\": \"elit et\",\n    \"athlete1Color\": \"laboris\",\n    \"athlete2Color\": \"elit id sunt do\",\n    \"athlete1TextColor\": \"u\",\n    \"athlete2TextColor\": \"consectetur incididunt labore ut\",\n    \"matName\": \"laboris\",\n    \"sessionId\": \"nisi\",\n    \"sessionName\": \"occaecat officia ut ip\",\n    \"technicalPoints\": \"eu ad aliquip Excepteur\",\n    \"uploaderFightTest\": \"in culpa adipisicing\",\n    \"technicalPointDetails\": \"pariatur dolore magna culpa\",\n    \"technicalPointTagStatus\": \"ullamco ad consectetur ea\",\n    \"technicalPointIds\": \"Duis ad\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": false,\n    \"winnerFighter\": \"Lorem id Excepteur\",\n    \"winnerTeam\": \"nostrud dolore reprehenderit anim\",\n    \"winnerTeamAlternateName\": \"irure ipsum et\",\n    \"sportEventName\": \"sit in ullamco cillum proident\",\n    \"sportEventStartDate\": \"proident mollit incididunt \",\n    \"sportEventLogo\": \"exercitation\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"dolore dolor\",\n    \"roundsNumber\": -96599543,\n    \"roundDuration\": -38002214,\n    \"sportAlternateName\": \"irure labore tempor\",\n    \"weightCategoryName\": \"Ut ad\",\n    \"weightCategoryAlternateName\": \"exercitation cupid\",\n    \"weightCategoryShortName\": \"minim eu in commodo\",\n    \"weightCategoryMaxWeight\": -93524167,\n    \"weightCategoryFullName\": \"Duis quis Ut nulla\",\n    \"weightCategoryAverageDuration\": 67538425,\n    \"weightCategoryColor\": \"sed aliquip in co\",\n    \"weightCategoryCompleted\": true,\n    \"victoryTypes\": \"elit in\",\n    \"victoryTypesArray\": \"magna ut\",\n    \"audienceName\": \"amet dolore\",\n    \"audienceShortName\": \"fugiat qui\",\n    \"sportName\": \"ex non\",\n    \"injuryTime\": -82226209,\n    \"warnings\": true,\n    \"cautions\": -91220338,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"aliquip\",\n    \"fighter1DisplayName\": \"Lorem eu in velit\",\n    \"fighter1FamilyName\": \"minim in\",\n    \"fighter1GivenName\": \"Excepteur reprehenderit esse dolor fugiat\",\n    \"fighter1PreferedName\": \"ut in incididunt Duis voluptate\",\n    \"fighter1DrawRank\": \"ut proident\",\n    \"fighter1RobinRank\": \"nostrud eu elit ullamco\",\n    \"fighter1SeedNumber\": 80775483,\n    \"fighter1AthleteId\": \"laboris occaecat voluptate \",\n    \"fighter1PersonId\": \"voluptate quis\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": -26266750,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"aliqua ea incididunt deserunt\",\n    \"fighter2DisplayName\": \"mollit\",\n    \"fighter2FamilyName\": \"do\",\n    \"fighter2GivenName\": \"eu veniam occaecat dolor dolore\",\n    \"fighter2PreferedName\": \"Lorem nulla do sunt sit\",\n    \"fighter2DrawRank\": -3951070,\n    \"fighter2RobinRank\": -50397798,\n    \"fighter2SeedNumber\": 20560952,\n    \"fighter2AthleteId\": \"Du\",\n    \"fighter2PersonId\": \"nisi velit pariatur\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -67197625,\n    \"fighter2IsInjured\": false,\n    \"result\": \"dolore consequat irure\",\n    \"victoryType\": \"sunt occaecat consequat id\",\n    \"endTime\": 32701342,\n    \"endDate\": \"laboris id consequat culpa\",\n    \"expectedDateStart\": \"laborum exercitation sit\",\n    \"expectedStartDate\": \"in Lorem\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"sit cillum aliquip eiusmod do\",\n    \"resultText\": \"ut commodo voluptate consectetur tempor\",\n    \"resultTextSmall\": \"reprehenderit non Ut exercitation\",\n    \"roundRenamedSmall\": \"culpa consequat do labore\",\n    \"parentFightNumber1\": 85921655,\n    \"parentFightNumber2\": 18686464,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": false,\n    \"isCountdown\": false,\n    \"id\": \"Ut eiusmod ea\",\n    \"parentFight1Id\": \"nulla ut ex\",\n    \"parentFight2Id\": \"nostrud consectetur minim enim\",\n    \"fighter1\": \"dolore dolor pariatur\",\n    \"fighter1RankingPoint\": 6025,\n    \"fighter2\": \"Lorem minim aliqua ut\",\n    \"fighter2RankingPoint\": 6840,\n    \"refereeGroup\": \"a\",\n    \"sportEventTeam1Id\": \"culpa amet eu\",\n    \"sportEventTeam2Id\": \"qu\",\n    \"fightMatId\": \"in dolore dolore consequat\",\n    \"round\": \"id r\",\n    \"qualifying\": true,\n    \"teamFightId\": \"deserunt dolor ipsum\",\n    \"status\": 45932861,\n    \"rankingCheck\": true,\n    \"technicalCheck\": true,\n    \"weight\": -41875851,\n    \"fightNumber\": 2319,\n    \"roundWeight\": 2067,\n    \"repechageWeight\": 7172,\n    \"repechageSection\": 2257,\n    \"displayOrder\": 1718,\n    \"canceled\": \"eu ut dolore\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"consequat magna Lorem proident irure\"\n   },\n   {\n    \"sportEventId\": \"pariatur eu occaecat Ut\",\n    \"sportEventWeightCategoryId\": \"sint in in\",\n    \"fighter1Id\": \"consequat veniam aute\",\n    \"fighter2Id\": \"ex ad ut do\",\n    \"team1Name\": \"pariatur sit est elit\",\n    \"team1AlternateName\": \"ullamc\",\n    \"team1FullName\": \"aliquip\",\n    \"team1CountryFlag\": \"officia consequ\",\n    \"team1CountryFlagScoreboard\": \"laborum quis non\",\n    \"team1PoolName\": \"Excepteur\",\n    \"team1FightByOpponent\": \"sunt anim mini\",\n    \"team2Name\": \"mollit proident nostrud\",\n    \"team2AlternateName\": \"deserunt proident\",\n    \"team2FullName\": \"incididunt\",\n    \"team2CountryFlag\": \"anim\",\n    \"team2CountryFlagScoreboard\": \"dolor veniam incididun\",\n    \"team2PoolName\": \"nostrud velit Ut officia\",\n    \"team2FightByOpponent\": \"exercitation pariatur\",\n    \"roundFriendlyName\": \"cupidatat\",\n    \"displayOrderInRound\": 85872087,\n    \"round1Id\": \"nostrud laborum ut est\",\n    \"round2Id\": \"non tempor cupidatat aute minim\",\n    \"countReferees\": -99490689,\n    \"sportId\": \"consequat pariatur in\",\n    \"athlete1Color\": \"sint sit\",\n    \"athlete2Color\": \"in mi\",\n    \"athlete1TextColor\": \"reprehenderit veniam\",\n    \"athlete2TextColor\": \"culpa nostrud \",\n    \"matName\": \"dolor nisi\",\n    \"sessionId\": \"ea\",\n    \"sessionName\": \"nostrud\",\n    \"technicalPoints\": \"quis exercitation eiusmod consequat ipsum\",\n    \"uploaderFightTest\": \"ut tempor fugiat\",\n    \"technicalPointDetails\": \"deserunt eu\",\n    \"technicalPointTagStatus\": \"laboris ipsum est\",\n    \"technicalPointIds\": \"dolore aliq\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"consectetur sunt dolore amet\",\n    \"winnerTeam\": \"cupidatat non elit amet\",\n    \"winnerTeamAlternateName\": \"exerc\",\n    \"sportEventName\": \"eu ut\",\n    \"sportEventStartDate\": \"tempor nisi nulla veniam\",\n    \"sportEventLogo\": \"elit\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"et consequat\",\n    \"roundsNumber\": 77266367,\n    \"roundDuration\": -30795271,\n    \"sportAlternateName\": \"do exercitation Duis\",\n    \"weightCategoryName\": \"irure ipsum mollit\",\n    \"weightCategoryAlternateName\": \"sed ut aliqua exercitation\",\n    \"weightCategoryShortName\": \"ad ex voluptate\",\n    \"weightCategoryMaxWeight\": 98156137,\n    \"weightCategoryFullName\": \"est ullamco\",\n    \"weightCategoryAverageDuration\": 98308657,\n    \"weightCategoryColor\": \"reprehenderit\",\n    \"weightCategoryCompleted\": true,\n    \"victoryTypes\": \"nisi Lorem dolore enim eiusmod\",\n    \"victoryTypesArray\": \"velit in nisi esse minim\",\n    \"audienceName\": \"ve\",\n    \"audienceShortName\": \"sint dolore\",\n    \"sportName\": \"fugiat minim\",\n    \"injuryTime\": -18046378,\n    \"warnings\": false,\n    \"cautions\": -66641213,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"amet eiusmod\",\n    \"fighter1DisplayName\": \"laboris\",\n    \"fighter1FamilyName\": \"esse tempor\",\n    \"fighter1GivenName\": \"reprehenderit ut\",\n    \"fighter1PreferedName\": \"dolore consectetur sit non Duis\",\n    \"fighter1DrawRank\": \"laboris cupidatat\",\n    \"fighter1RobinRank\": \"in deserunt aliquip sed est\",\n    \"fighter1SeedNumber\": -70882108,\n    \"fighter1AthleteId\": \"incididunt in magna ullamco irure\",\n    \"fighter1PersonId\": \"Lorem laborum fugiat\",\n    \"fighter1IsSeeded\": true,\n    \"fighter1Status\": 54981178,\n    \"fighter1IsInjured\": false,\n    \"fighter2FullName\": \"in eu\",\n    \"fighter2DisplayName\": \"ullamco proident do\",\n    \"fighter2FamilyName\": \"sed\",\n    \"fighter2GivenName\": \"est consequat Lorem voluptate\",\n    \"fighter2PreferedName\": \"Excepteur Ut sit mini\",\n    \"fighter2DrawRank\": -81733716,\n    \"fighter2RobinRank\": -54443538,\n    \"fighter2SeedNumber\": 6787729,\n    \"fighter2AthleteId\": \"dolore sit ipsum\",\n    \"fighter2PersonId\": \"ut do dolore\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -49254174,\n    \"fighter2IsInjured\": false,\n    \"result\": \"est amet officia enim\",\n    \"victoryType\": \"laborum sunt adipisicing laboris\",\n    \"endTime\": -56806978,\n    \"endDate\": \"laboris ad\",\n    \"expectedDateStart\": \"non proident cupidatat in\",\n    \"expectedStartDate\": \"laborum nisi sunt\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"magna adipisicing\",\n    \"resultText\": \"reprehenderit eu\",\n    \"resultTextSmall\": \"et ad\",\n    \"roundRenamedSmall\": \"pariatur commodo est deserunt\",\n    \"parentFightNumber1\": -585346,\n    \"parentFightNumber2\": -86483873,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": false,\n    \"isCountdown\": false,\n    \"id\": \"commodo laboris et\",\n    \"parentFight1Id\": \"culpa\",\n    \"parentFight2Id\": \"quis cupidatat exercitation\",\n    \"fighter1\": \"consectetur commodo\",\n    \"fighter1RankingPoint\": 4267,\n    \"fighter2\": \"ut sunt\",\n    \"fighter2RankingPoint\": 524,\n    \"refereeGroup\": \"v\",\n    \"sportEventTeam1Id\": \"laborum Ut\",\n    \"sportEventTeam2Id\": \"in reprehenderit\",\n    \"fightMatId\": \"cillum Ut in\",\n    \"round\": \"ut n\",\n    \"qualifying\": true,\n    \"teamFightId\": \"commodo est exercitation in nisi\",\n    \"status\": 85721853,\n    \"rankingCheck\": false,\n    \"technicalCheck\": true,\n    \"weight\": -64280856,\n    \"fightNumber\": 6323,\n    \"roundWeight\": 7537,\n    \"repechageWeight\": 6859,\n    \"repechageSection\": 5728,\n    \"displayOrder\": 6997,\n    \"canceled\": \"aliquip adipisicing\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"consectetur dolore\"\n   }\n  ]\n }\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id",
												"start-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/get/:id/start-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"fight-mat",
												"get",
												":id",
												"start-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get fight mats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fight-mat",
								""
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns fightMats",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fightMats\": \"schema type not provided\",\n \"sportEventId\": \"Excepteur velit\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get fight mats by session and mat name",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fight-mat",
								":sportEventSession",
								"name",
								":matName"
							],
							"variable": [
								{
									"key": "sportEventSession",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "matName",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										":sportEventSession",
										"name",
										":matName"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventSession"
										},
										{
											"key": "matName"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns a fightMat",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										":sportEventSession",
										"name",
										":matName"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventSession"
										},
										{
											"key": "matName"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"matName\": \"labore ea\",\n \"sessionName\": \"in qui esse nostrud\",\n \"id\": \"ullamco irure anim\",\n \"sportEventMatId\": \"ea nostrud occaecat labore\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/:sportEventSession/name/:matName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										":sportEventSession",
										"name",
										":matName"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventSession"
										},
										{
											"key": "matName"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get fight mats (faster - no fights)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"fight-mat",
								"list"
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns fightMats",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fightMats\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/fight-mat/list?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"fight-mat",
										"list"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "mat",
			"item": [
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "Get mats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"mat",
										":sportEventId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns filtered result on Mats",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"mats\": \"schema type not provided\"\n}"
								}
							]
						},
						{
							"name": "Add a mat",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"streaming\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"mat",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a mat",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"mat",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns SportEventMat",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"mat\": {\n  \"name\": \"veli\",\n  \"sportEventId\": \"enim non mollit\",\n  \"id\": \"ut nisi incididunt aute\",\n  \"streaming\": \"reprehenderit\"\n }\n}"
								}
							]
						},
						{
							"name": "Update a mat",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"streaming\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"mat",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a mat",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"mat",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/mat/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"mat",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "person",
			"item": [
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a person",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns person",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"person\": {\n  \"preferedName\": \"moll\",\n  \"fullName\": \"ea Duis in\",\n  \"photo\": \"ex in d\",\n  \"id\": \"nisi commodo\",\n  \"familyName\": \"quis\",\n  \"givenName\": \"elit\",\n  \"displayName\": \"fugi\",\n  \"athenaPrintId\": 24775817,\n  \"customId\": \"cupidatat aute\",\n  \"odfCode\": \"cillum ex\"\n }\n}"
								}
							]
						},
						{
							"name": "Update a person",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"preferedName\": \"<string>\",\n    \"familyName\": \"<string>\",\n    \"givenName\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"athenaPrintId\": \"<integer>\",\n    \"customId\": \"<string>\",\n    \"odfCode\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a person",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get athletes",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"get",
										":id",
										"athletes"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id",
												"athletes"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns all athletes of a person",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id",
												"athletes"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"person\": [\n  {\n   \"personId\": \"velit sit\",\n   \"sportEventId\": \"nulla Duis aliquip dolore\",\n   \"personFullName\": \"anim enim\",\n   \"athenaPrintId\": \"tempor anim aute laborum\",\n   \"personFamilyName\": \"enim ullamco id incididunt\",\n   \"personGivenName\": \"velit est\",\n   \"personPhoto\": \"amet\",\n   \"teamFullName\": \"esse anim\",\n   \"teamName\": \"ea dolor dolore\",\n   \"teamAlternateName\": \"anim incididunt\",\n   \"teamCountryFlag\": \"minim nostrud\",\n   \"isCompeting\": true,\n   \"weightCategories\": [\n    {\n     \"name\": \"moll\",\n     \"audience\": \"ullamco\",\n     \"sport\": \"consectetur commodo ullamco enim\",\n     \"minWeight\": 460,\n     \"maxWeight\": 251,\n     \"roundsNumber\": 9,\n     \"roundDuration\": 280,\n     \"overtime\": 54807986,\n     \"tournamentType\": \"Duis eu\",\n     \"sportEventId\": \"irure magna culpa\",\n     \"sportAlternateName\": \"sed id\",\n     \"sportName\": \"est labore proident nostrud\",\n     \"fullName\": \"commodo exercitation\",\n     \"alternateName\": \"eiusmod non\",\n     \"shortName\": \"laboris ut reprehenderit pariatur\",\n     \"sportId\": \"ipsum\",\n     \"audienceId\": \"Excepteur\",\n     \"audienceName\": \"velit quis\",\n     \"isVeteran\": false,\n     \"audienceShortName\": \"ipsum quis officia elit\",\n     \"isSinglebracketTournament\": true,\n     \"isDoublebracketTournament\": false,\n     \"isRoundrobinTournament\": false,\n     \"isBeltWrestlingCategory\": false,\n     \"isKazakhTournament\": true,\n     \"isBeachWrestlingTournament\": true,\n     \"fightersIsReady\": [\n      {\n       \"athleteId\": \"Ut enim ullamco exercitation sit\",\n       \"sportEventWeightCategoryId\": \"labore tempor aliquip minim\",\n       \"weightCategoryFullName\": \"eiusmod\",\n       \"weightCategoryShortName\": \"amet ipsum ullamco dolore\",\n       \"weightCategoryCountFights\": 45434550,\n       \"hasWeightCategoryBlockchainIds\": false,\n       \"weightCategoryCountReadyFighters\": -77558251,\n       \"countFights\": -34792429,\n       \"personId\": \"commodo anim eu\",\n       \"fullName\": \"Ut est\",\n       \"preferedName\": \"qui dolor Duis\",\n       \"displayName\": \"et\",\n       \"givenName\": \"deserunt sunt ullamco\",\n       \"familyName\": \"qui ipsum\",\n       \"personPhoto\": \"quis\",\n       \"athenaPrintId\": \"velit ea magna enim Excepteur\",\n       \"teamAlternateName\": \"laboris consequat in nostrud\",\n       \"teamName\": \"est nulla reprehenderit dolor ex\",\n       \"teamCountryFlag\": \"exercitation esse magna\",\n       \"sportEventTeamId\": \"in laboris\",\n       \"sportEventId\": \"ut ut magna\",\n       \"drawRank\": -93105951,\n       \"robinGroup\": \"consectetur ut nulla\",\n       \"robinGroupRank\": -79318214,\n       \"teamRankingPoint\": 95697731,\n       \"uwwPoint\": -73552465,\n       \"knockOutStatus\": \"aute est\",\n       \"hasLostknockOut\": true,\n       \"completed\": -7374597,\n       \"wins\": -35433718,\n       \"losses\": 19167040,\n       \"technicalPointsFor\": 43254834,\n       \"technicalPointsAgainst\": -96233694,\n       \"technicalPointsDiff\": -92025918,\n       \"rankingPointsFor\": 83619597,\n       \"rankingPointsAgainst\": 9602447,\n       \"rankingPointsDiff\": -10413505,\n       \"winsEasy\": -20514776,\n       \"winsSuperiority\": -48716073,\n       \"rank\": 27486360,\n       \"rankRobinGroup\": 35815129,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"ex\",\n        \"sportEventWeightCategoryId\": \"eiusmod fugiat reprehenderit\",\n        \"fighter1Id\": \"ipsum qui et tempor do\",\n        \"fighter2Id\": \"reprehenderit \",\n        \"team1Name\": \"sunt ut\",\n        \"team1AlternateName\": \"commodo amet labore do\",\n        \"team1FullName\": \"fugiat mollit\",\n        \"team1CountryFlag\": \"est proident in sunt\",\n        \"team1CountryFlagScoreboard\": \"cupidatat in esse nulla\",\n        \"team1PoolName\": \"ut nisi culpa\",\n        \"team1FightByOpponent\": \"consectetur do in\",\n        \"team2Name\": \"minim ut eiusmod in voluptate\",\n        \"team2AlternateName\": \"fugiat ut ut\",\n        \"team2FullName\": \"veniam elit\",\n        \"team2CountryFlag\": \"cillum\",\n        \"team2CountryFlagScoreboard\": \"anim id elit\",\n        \"team2PoolName\": \"sint ma\",\n        \"team2FightByOpponent\": \"Lorem nostrud\",\n        \"roundFriendlyName\": \"occaecat minim\",\n        \"displayOrderInRound\": 605773,\n        \"round1Id\": \"sit proident incididunt id\",\n        \"round2Id\": \"anim officia Ut non\",\n        \"countReferees\": 19367595,\n        \"sportId\": \"non\",\n        \"athlete1Color\": \"consectetur dolor\",\n        \"athlete2Color\": \"dolore do\",\n        \"athlete1TextColor\": \"veniam Excepteur pariatur\",\n        \"athlete2TextColor\": \"irure mollit velit\",\n        \"matName\": \"laboris Excepteur cupidatat\",\n        \"sessionId\": \"Ut minim Duis\",\n        \"sessionName\": \"quis et\",\n        \"technicalPoints\": \"occaecat esse deserunt\",\n        \"uploaderFightTest\": \"aute est qui\",\n        \"technicalPointDetails\": \"ad proident ea\",\n        \"technicalPointTagStatus\": \"anim Excepteur in irure do\",\n        \"technicalPointIds\": \"s\",\n        \"isCompleted\": false,\n        \"isReady\": true,\n        \"isRobinGroupFight\": false,\n        \"winnerFighter\": \"adipisicing sit ex nostrud\",\n        \"winnerTeam\": \"esse occaecat cillum\",\n        \"winnerTeamAlternateName\": \"aliquip velit eu\",\n        \"sportEventName\": \"minim Lorem laboris\",\n        \"sportEventStartDate\": \"irure pariatur cillum\",\n        \"sportEventLogo\": \"Lorem\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"elit est\",\n        \"roundsNumber\": 69974758,\n        \"roundDuration\": 24132895,\n        \"sportAlternateName\": \"mollit Excepteur non dolor\",\n        \"weightCategoryName\": \"aute proident nostrud\",\n        \"weightCategoryAlternateName\": \"aliqua Excepteur nostrud Ut\",\n        \"weightCategoryShortName\": \"esse sunt aliqua qui\",\n        \"weightCategoryMaxWeight\": 23954827,\n        \"weightCategoryFullName\": \"irure ut Duis velit\",\n        \"weightCategoryAverageDuration\": 43230142,\n        \"weightCategoryColor\": \"magna Lorem en\",\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": \"irure occaecat m\",\n        \"victoryTypesArray\": \"ullamco non commodo\",\n        \"audienceName\": \"sunt Duis\",\n        \"audienceShortName\": \"fugiat cillum velit do\",\n        \"sportName\": \"laboris est\",\n        \"injuryTime\": 52449983,\n        \"warnings\": true,\n        \"cautions\": 28333552,\n        \"legFouls\": true,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"sit\",\n        \"fighter1DisplayName\": \"labore irure consectetur\",\n        \"fighter1FamilyName\": \"nostrud\",\n        \"fighter1GivenName\": \"ut qui sunt in\",\n        \"fighter1PreferedName\": \"qui culpa ex ut\",\n        \"fighter1DrawRank\": \"amet et ut labore pariatur\",\n        \"fighter1RobinRank\": \"in aliquip consectetur consequat\",\n        \"fighter1SeedNumber\": -77836290,\n        \"fighter1AthleteId\": \"Duis elit\",\n        \"fighter1PersonId\": \"in\",\n        \"fighter1IsSeeded\": false,\n        \"fighter1Status\": 85228156,\n        \"fighter1IsInjured\": true,\n        \"fighter2FullName\": \"est Lorem occaecat\",\n        \"fighter2DisplayName\": \"iru\",\n        \"fighter2FamilyName\": \"est amet\",\n        \"fighter2GivenName\": \"ullamco\",\n        \"fighter2PreferedName\": \"qui ad\",\n        \"fighter2DrawRank\": -72829313,\n        \"fighter2RobinRank\": -7074001,\n        \"fighter2SeedNumber\": -30841219,\n        \"fighter2AthleteId\": \"nulla anim\",\n        \"fighter2PersonId\": \"velit\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": -70747039,\n        \"fighter2IsInjured\": true,\n        \"result\": \"labore enim\",\n        \"victoryType\": \"nostrud dolore exercitation proident\",\n        \"endTime\": 89647325,\n        \"endDate\": \"fugiat\",\n        \"expectedDateStart\": \"mollit est\",\n        \"expectedStartDate\": \"non culpa\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"in Duis commodo\",\n        \"resultText\": \"Excepte\",\n        \"resultTextSmall\": \"ea quis aliqua\",\n        \"roundRenamedSmall\": \"in reprehenderit labore cupidatat\",\n        \"parentFightNumber1\": 20628582,\n        \"parentFightNumber2\": -13184511,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": true,\n        \"id\": \"amet\",\n        \"parentFight1Id\": \"ut Lorem qui quis\",\n        \"parentFight2Id\": \"Lorem\",\n        \"fighter1\": \"nisi esse Excepteur\",\n        \"fighter1RankingPoint\": 3277,\n        \"fighter2\": \"labore fugiat sit\",\n        \"fighter2RankingPoint\": 8420,\n        \"refereeGroup\": \"i\",\n        \"sportEventTeam1Id\": \"in deserunt Ut nostrud\",\n        \"sportEventTeam2Id\": \"sit aliquip laboris\",\n        \"fightMatId\": \"dolor ipsum labore\",\n        \"round\": \"ipsu\",\n        \"qualifying\": false,\n        \"teamFightId\": \"Duis aute exercitation ex do\",\n        \"status\": -40944833,\n        \"rankingCheck\": true,\n        \"technicalCheck\": false,\n        \"weight\": 179311,\n        \"fightNumber\": 4982,\n        \"roundWeight\": 6963,\n        \"repechageWeight\": 6366,\n        \"repechageSection\": 4593,\n        \"displayOrder\": 370,\n        \"canceled\": \"tempor dolor laboris\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"minim elit culpa\"\n       },\n       \"isCompeting\": true,\n       \"hasOpenFight\": true,\n       \"isDisqualified\": true,\n       \"isNotRanked\": false,\n       \"isInjured\": false,\n       \"isForfeit\": true,\n       \"isRobinGroupNotRanked\": true,\n       \"id\": \"sed qui\",\n       \"sportEventWeightCategory\": \"incididunt in\",\n       \"weight\": 24,\n       \"drawNumber\": 186,\n       \"seedNumber\": 8,\n       \"fighterWeight\": -27812428.88378808,\n       \"points\": 50,\n       \"fighterStatus\": 80124470\n      },\n      {\n       \"athleteId\": \"voluptate sit aliqua\",\n       \"sportEventWeightCategoryId\": \"sint culpa Ut ut\",\n       \"weightCategoryFullName\": \"consequat aliquip sunt et\",\n       \"weightCategoryShortName\": \"in Ut dolor ut anim\",\n       \"weightCategoryCountFights\": -49972941,\n       \"hasWeightCategoryBlockchainIds\": false,\n       \"weightCategoryCountReadyFighters\": -95510924,\n       \"countFights\": -40073211,\n       \"personId\": \"non id laboris\",\n       \"fullName\": \"sed elit mollit commodo\",\n       \"preferedName\": \"ut eiusmod esse\",\n       \"displayName\": \"aliqua officia elit\",\n       \"givenName\": \"aliquip ut et\",\n       \"familyName\": \"do eiusmod\",\n       \"personPhoto\": \"nisi do\",\n       \"athenaPrintId\": \"exercitation consequat e\",\n       \"teamAlternateName\": \"ullamco consequ\",\n       \"teamName\": \"anim est irure ut\",\n       \"teamCountryFlag\": \"ipsum voluptate incididu\",\n       \"sportEventTeamId\": \"aliqua consectetur ex volupta\",\n       \"sportEventId\": \"ut ipsum minim elit\",\n       \"drawRank\": 42533795,\n       \"robinGroup\": \"dolore adipisicing irure in quis\",\n       \"robinGroupRank\": -77750305,\n       \"teamRankingPoint\": -71851066,\n       \"uwwPoint\": 50196538,\n       \"knockOutStatus\": \"qui aliquip sint i\",\n       \"hasLostknockOut\": false,\n       \"completed\": -8915199,\n       \"wins\": 15463600,\n       \"losses\": -77435251,\n       \"technicalPointsFor\": 38796442,\n       \"technicalPointsAgainst\": -44391600,\n       \"technicalPointsDiff\": 36577301,\n       \"rankingPointsFor\": 67450271,\n       \"rankingPointsAgainst\": -39263709,\n       \"rankingPointsDiff\": 36290441,\n       \"winsEasy\": 47786941,\n       \"winsSuperiority\": -66396751,\n       \"rank\": -63089818,\n       \"rankRobinGroup\": 5090816,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"tempor\",\n        \"sportEventWeightCategoryId\": \"in laboris incididunt occaecat\",\n        \"fighter1Id\": \"cupidatat veniam\",\n        \"fighter2Id\": \"dolore labore culpa\",\n        \"team1Name\": \"do Excepteur\",\n        \"team1AlternateName\": \"dolor sunt anim\",\n        \"team1FullName\": \"irure in deserunt\",\n        \"team1CountryFlag\": \"proident officia\",\n        \"team1CountryFlagScoreboard\": \"sunt dolor Ut sint velit\",\n        \"team1PoolName\": \"consectetur officia\",\n        \"team1FightByOpponent\": \"ipsum amet quis consequat\",\n        \"team2Name\": \"eu quis\",\n        \"team2AlternateName\": \"occaecat\",\n        \"team2FullName\": \"do\",\n        \"team2CountryFlag\": \"culpa pariatur irure quis sunt\",\n        \"team2CountryFlagScoreboard\": \"ea tempor Ut dolore\",\n        \"team2PoolName\": \"ad Excepteur incididunt deserunt\",\n        \"team2FightByOpponent\": \"in velit tempor eiusmod\",\n        \"roundFriendlyName\": \"mollit et non\",\n        \"displayOrderInRound\": 98609984,\n        \"round1Id\": \"pariatur ut ad irure\",\n        \"round2Id\": \"labore laborum dolore\",\n        \"countReferees\": 86888763,\n        \"sportId\": \"dolor Ut\",\n        \"athlete1Color\": \"est voluptate\",\n        \"athlete2Color\": \"pariatur occaecat sit\",\n        \"athlete1TextColor\": \"voluptate velit in sint nostrud\",\n        \"athlete2TextColor\": \"in\",\n        \"matName\": \"ut cillum occaecat\",\n        \"sessionId\": \"sunt velit\",\n        \"sessionName\": \"dolore Duis mollit voluptate eu\",\n        \"technicalPoints\": \"occaecat aliquip veniam\",\n        \"uploaderFightTest\": \"Excepteur aute dolore\",\n        \"technicalPointDetails\": \"eu irure\",\n        \"technicalPointTagStatus\": \"nisi voluptate\",\n        \"technicalPointIds\": \"aliqua sit cillum dolore\",\n        \"isCompleted\": true,\n        \"isReady\": false,\n        \"isRobinGroupFight\": false,\n        \"winnerFighter\": \"dolor proident cupidatat irure eiusmod\",\n        \"winnerTeam\": \"laboris sed\",\n        \"winnerTeamAlternateName\": \"sed aute cupidatat aliquip do\",\n        \"sportEventName\": \"dolor Lorem exercitation ea Excepte\",\n        \"sportEventStartDate\": \"t\",\n        \"sportEventLogo\": \"amet\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"elit\",\n        \"roundsNumber\": 47340211,\n        \"roundDuration\": -76451456,\n        \"sportAlternateName\": \"officia quis dolore ullamco\",\n        \"weightCategoryName\": \"cillum ad\",\n        \"weightCategoryAlternateName\": \"ex officia\",\n        \"weightCategoryShortName\": \"sed aliqua laboris elit in\",\n        \"weightCategoryMaxWeight\": 1959953,\n        \"weightCategoryFullName\": \"proident cillum voluptate sed\",\n        \"weightCategoryAverageDuration\": 16488050,\n        \"weightCategoryColor\": \"sit sunt officia\",\n        \"weightCategoryCompleted\": true,\n        \"victoryTypes\": \"dolor exercitation ullamco Duis\",\n        \"victoryTypesArray\": \"exercitation ad do deserunt\",\n        \"audienceName\": \"ullamco et\",\n        \"audienceShortName\": \"ipsum adipisicing culpa\",\n        \"sportName\": \"fugiat Ut nulla et veniam\",\n        \"injuryTime\": 97044838,\n        \"warnings\": true,\n        \"cautions\": 52077061,\n        \"legFouls\": false,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"sit nulla adipisicing\",\n        \"fighter1DisplayName\": \"qui\",\n        \"fighter1FamilyName\": \"tempor esse velit non\",\n        \"fighter1GivenName\": \"adipisicing ipsum ut nul\",\n        \"fighter1PreferedName\": \"laborum nostrud\",\n        \"fighter1DrawRank\": \"esse dolore Lorem dolore cupidatat\",\n        \"fighter1RobinRank\": \"nulla labore dolor occaecat id\",\n        \"fighter1SeedNumber\": 99889665,\n        \"fighter1AthleteId\": \"cupidatat\",\n        \"fighter1PersonId\": \"elit nostrud deserunt\",\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": 85347629,\n        \"fighter1IsInjured\": false,\n        \"fighter2FullName\": \"Ut dolore ad\",\n        \"fighter2DisplayName\": \"adipisicing minim magna ea\",\n        \"fighter2FamilyName\": \"minim id labore\",\n        \"fighter2GivenName\": \"Lorem in\",\n        \"fighter2PreferedName\": \"sunt aliqua ipsum incididunt\",\n        \"fighter2DrawRank\": -78970098,\n        \"fighter2RobinRank\": 98583251,\n        \"fighter2SeedNumber\": 33393433,\n        \"fighter2AthleteId\": \"quis veniam ad tempor nulla\",\n        \"fighter2PersonId\": \"irure ut\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": -15834378,\n        \"fighter2IsInjured\": true,\n        \"result\": \"eiusmod pariatur\",\n        \"victoryType\": \"comm\",\n        \"endTime\": 79563212,\n        \"endDate\": \"enim in ut\",\n        \"expectedDateStart\": \"dolor cupidatat Duis id\",\n        \"expectedStartDate\": \"incididunt aliquip\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"fugiat\",\n        \"resultText\": \"in ullamco exe\",\n        \"resultTextSmall\": \"in incididunt Duis consectetur\",\n        \"roundRenamedSmall\": \"sed ipsum Ut in\",\n        \"parentFightNumber1\": -80383888,\n        \"parentFightNumber2\": 88341167,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"id\": \"exercitation nulla a\",\n        \"parentFight1Id\": \"incididunt commodo\",\n        \"parentFight2Id\": \"quis laboris Lorem aute\",\n        \"fighter1\": \"laborum\",\n        \"fighter1RankingPoint\": 4612,\n        \"fighter2\": \"pariatur ad dolor consectetur dolor\",\n        \"fighter2RankingPoint\": 6966,\n        \"refereeGroup\": \"e\",\n        \"sportEventTeam1Id\": \"occaecat voluptate ullamco\",\n        \"sportEventTeam2Id\": \"occaecat voluptate dolore\",\n        \"fightMatId\": \"ut exercitation\",\n        \"round\": \"moll\",\n        \"qualifying\": false,\n        \"teamFightId\": \"elit occaecat enim\",\n        \"status\": -61791055,\n        \"rankingCheck\": true,\n        \"technicalCheck\": true,\n        \"weight\": 81592376,\n        \"fightNumber\": 2609,\n        \"roundWeight\": 1514,\n        \"repechageWeight\": 5733,\n        \"repechageSection\": 5613,\n        \"displayOrder\": 6744,\n        \"canceled\": \"anim officia\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"do eu dolor\"\n       },\n       \"isCompeting\": true,\n       \"hasOpenFight\": false,\n       \"isDisqualified\": false,\n       \"isNotRanked\": false,\n       \"isInjured\": true,\n       \"isForfeit\": true,\n       \"isRobinGroupNotRanked\": true,\n       \"id\": \"adipisicing nostrud et\",\n       \"sportEventWeightCategory\": \"in cupidatat est quis aliqua\",\n       \"weight\": 398,\n       \"drawNumber\": 36,\n       \"seedNumber\": 12,\n       \"fighterWeight\": -42113730.88744152,\n       \"points\": 240,\n       \"fighterStatus\": 61787147\n      }\n     ],\n     \"countReadyTeams\": 44717176,\n     \"countReadyFighters\": 14328409,\n     \"countReadySeededFighters\": -55503788,\n     \"countSeededFighters\": -28440309,\n     \"countFighters\": 80146532,\n     \"isRepechageSet\": true,\n     \"countTeams\": -70184020,\n     \"countFights\": -93609889,\n     \"perfectNumber\": 2663326,\n     \"isRobin\": true,\n     \"isRobinGrouped\": false,\n     \"id\": \"non elit ut\",\n     \"averageDuration\": 58572655,\n     \"color\": \"lab\",\n     \"odfCode\": \"pariatu\",\n     \"uwwRanking\": false,\n     \"blockchainIds\": \"est laboris proident in\",\n     \"sessionStartDay\": 88816659,\n     \"matAssignment\": -28883087,\n     \"fightersUpdated\": \"ex velit\"\n    },\n    {\n     \"name\": \"ad l\",\n     \"audience\": \"nulla quis aliqua\",\n     \"sport\": \"id minim\",\n     \"minWeight\": 481,\n     \"maxWeight\": 208,\n     \"roundsNumber\": 4,\n     \"roundDuration\": 598,\n     \"overtime\": 31549409,\n     \"tournamentType\": \"dolore ea velit voluptate non\",\n     \"sportEventId\": \"minim do dolor \",\n     \"sportAlternateName\": \"sit voluptate\",\n     \"sportName\": \"velit commodo\",\n     \"fullName\": \"in quis ex aute reprehenderit\",\n     \"alternateName\": \"minim ut esse elit\",\n     \"shortName\": \"exercitation incididunt consectetur Duis\",\n     \"sportId\": \"adipisicing\",\n     \"audienceId\": \"ex qui aute\",\n     \"audienceName\": \"in Ut sint nisi\",\n     \"isVeteran\": true,\n     \"audienceShortName\": \"occaecat aliquip voluptate Duis velit\",\n     \"isSinglebracketTournament\": false,\n     \"isDoublebracketTournament\": false,\n     \"isRoundrobinTournament\": true,\n     \"isBeltWrestlingCategory\": true,\n     \"isKazakhTournament\": true,\n     \"isBeachWrestlingTournament\": false,\n     \"fightersIsReady\": [\n      {\n       \"athleteId\": \"Lorem commodo adipisicing\",\n       \"sportEventWeightCategoryId\": \"in labore\",\n       \"weightCategoryFullName\": \"labore aliquip in laboris in\",\n       \"weightCategoryShortName\": \"elit occaecat\",\n       \"weightCategoryCountFights\": 3919757,\n       \"hasWeightCategoryBlockchainIds\": false,\n       \"weightCategoryCountReadyFighters\": 92882807,\n       \"countFights\": -94056239,\n       \"personId\": \"adipisicing do l\",\n       \"fullName\": \"minim ut\",\n       \"preferedName\": \"sunt deserunt ea sint\",\n       \"displayName\": \"ad aliquip pariatur\",\n       \"givenName\": \"irure incididunt Duis\",\n       \"familyName\": \"ea Lorem nulla\",\n       \"personPhoto\": \"eu\",\n       \"athenaPrintId\": \"magna Ut aliqua\",\n       \"teamAlternateName\": \"nostrud commodo do\",\n       \"teamName\": \"ullamco ipsum sit consequat\",\n       \"teamCountryFlag\": \"aliquip qui sunt fugiat exercitation\",\n       \"sportEventTeamId\": \"mollit\",\n       \"sportEventId\": \"fugiat anim\",\n       \"drawRank\": 38957603,\n       \"robinGroup\": \"culpa amet tempor mollit\",\n       \"robinGroupRank\": 37202842,\n       \"teamRankingPoint\": 10951257,\n       \"uwwPoint\": -17625205,\n       \"knockOutStatus\": \"incididunt esse\",\n       \"hasLostknockOut\": true,\n       \"completed\": 60788994,\n       \"wins\": 33022719,\n       \"losses\": 58427957,\n       \"technicalPointsFor\": 15414597,\n       \"technicalPointsAgainst\": -56414070,\n       \"technicalPointsDiff\": -53626037,\n       \"rankingPointsFor\": 11859232,\n       \"rankingPointsAgainst\": -5439464,\n       \"rankingPointsDiff\": -23012722,\n       \"winsEasy\": 28142176,\n       \"winsSuperiority\": 20944318,\n       \"rank\": -37213659,\n       \"rankRobinGroup\": 52094108,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"ut qui tempor sunt in\",\n        \"sportEventWeightCategoryId\": \"aliqua Ut irure cupidatat voluptate\",\n        \"fighter1Id\": \"laborum proident reprehenderit Lorem Ut\",\n        \"fighter2Id\": \"exercitation aliquip adipisicing ipsum sunt\",\n        \"team1Name\": \"in veniam do\",\n        \"team1AlternateName\": \"reprehenderit adipisicing aliqua\",\n        \"team1FullName\": \"id dolor\",\n        \"team1CountryFlag\": \"voluptate sed Ut\",\n        \"team1CountryFlagScoreboard\": \"sunt laborum\",\n        \"team1PoolName\": \"aliquip minim\",\n        \"team1FightByOpponent\": \"aliqua\",\n        \"team2Name\": \"cupidatat aute\",\n        \"team2AlternateName\": \"Excepteur incididunt cillum sunt\",\n        \"team2FullName\": \"voluptate\",\n        \"team2CountryFlag\": \"culpa eu\",\n        \"team2CountryFlagScoreboard\": \"exercitation ut ut reprehenderit\",\n        \"team2PoolName\": \"est dolor\",\n        \"team2FightByOpponent\": \"minim\",\n        \"roundFriendlyName\": \"deserunt proident commodo ex\",\n        \"displayOrderInRound\": -60625988,\n        \"round1Id\": \"in do esse velit\",\n        \"round2Id\": \"esse laboris ut quis\",\n        \"countReferees\": -43725470,\n        \"sportId\": \"commodo minim mollit\",\n        \"athlete1Color\": \"Lorem cillum\",\n        \"athlete2Color\": \"amet sed\",\n        \"athlete1TextColor\": \"eiusmod nulla ex ut id\",\n        \"athlete2TextColor\": \"dolor velit\",\n        \"matName\": \"incididunt\",\n        \"sessionId\": \"est sint consequat qui\",\n        \"sessionName\": \"ullamco\",\n        \"technicalPoints\": \"deserunt sed quis qui\",\n        \"uploaderFightTest\": \"sunt tempor laboris consequat in\",\n        \"technicalPointDetails\": \"ex\",\n        \"technicalPointTagStatus\": \"in enim sed amet elit\",\n        \"technicalPointIds\": \"incididunt voluptate\",\n        \"isCompleted\": true,\n        \"isReady\": true,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"ullamc\",\n        \"winnerTeam\": \"cillum sint adipisicing\",\n        \"winnerTeamAlternateName\": \"Lorem fugiat elit\",\n        \"sportEventName\": \"aliqua eiusmod ut\",\n        \"sportEventStartDate\": \"in aliqua\",\n        \"sportEventLogo\": \"dolor\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"eu in minim\",\n        \"roundsNumber\": -54995859,\n        \"roundDuration\": 56814556,\n        \"sportAlternateName\": \"pariatur consectet\",\n        \"weightCategoryName\": \"ad dolore\",\n        \"weightCategoryAlternateName\": \"adipisicing in\",\n        \"weightCategoryShortName\": \"voluptate amet aute\",\n        \"weightCategoryMaxWeight\": 9504645,\n        \"weightCategoryFullName\": \"dolore\",\n        \"weightCategoryAverageDuration\": 30108361,\n        \"weightCategoryColor\": \"adipisicing esse\",\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": \"sunt in\",\n        \"victoryTypesArray\": \"consequat dolor aute mollit\",\n        \"audienceName\": \"adipisicing in deserunt pariatur enim\",\n        \"audienceShortName\": \"dolore dolor\",\n        \"sportName\": \"amet in\",\n        \"injuryTime\": 58434934,\n        \"warnings\": false,\n        \"cautions\": 63647031,\n        \"legFouls\": true,\n        \"activityTime\": false,\n        \"fighter1FullName\": \"consequat voluptate Lorem anim\",\n        \"fighter1DisplayName\": \"fugiat quis nulla\",\n        \"fighter1FamilyName\": \"aliqua est pariatur\",\n        \"fighter1GivenName\": \"ut sunt fugiat in occaecat\",\n        \"fighter1PreferedName\": \"Duis aute non\",\n        \"fighter1DrawRank\": \"sunt in consectetur aute\",\n        \"fighter1RobinRank\": \"exercitation sed in cillum commodo\",\n        \"fighter1SeedNumber\": -73988875,\n        \"fighter1AthleteId\": \"incididunt nulla ea laborum aute\",\n        \"fighter1PersonId\": \"consequat sed esse dolor quis\",\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": 25866447,\n        \"fighter1IsInjured\": false,\n        \"fighter2FullName\": \"culpa\",\n        \"fighter2DisplayName\": \"voluptate labo\",\n        \"fighter2FamilyName\": \"Ut adipisicing\",\n        \"fighter2GivenName\": \"ut culpa esse sit\",\n        \"fighter2PreferedName\": \"ea aliqua\",\n        \"fighter2DrawRank\": 27921865,\n        \"fighter2RobinRank\": 27620461,\n        \"fighter2SeedNumber\": -31000173,\n        \"fighter2AthleteId\": \"nulla amet incididunt velit\",\n        \"fighter2PersonId\": \"sint minim quis\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": 77196563,\n        \"fighter2IsInjured\": true,\n        \"result\": \"ex laboris magna aute\",\n        \"victoryType\": \"elit in\",\n        \"endTime\": 8499755,\n        \"endDate\": \"fugiat labore aute\",\n        \"expectedDateStart\": \"culpa in\",\n        \"expectedStartDate\": \"esse commodo voluptate\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"aliquip\",\n        \"resultText\": \"aute Lorem Ut amet quis\",\n        \"resultTextSmall\": \"esse dolor sed laborum\",\n        \"roundRenamedSmall\": \"exercitation ipsum minim\",\n        \"parentFightNumber1\": 46066202,\n        \"parentFightNumber2\": 78721295,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": true,\n        \"id\": \"nulla elit eiusmod aute\",\n        \"parentFight1Id\": \"aliqua enim ad ut\",\n        \"parentFight2Id\": \"dolore laboris\",\n        \"fighter1\": \"Excepteur anim\",\n        \"fighter1RankingPoint\": 6474,\n        \"fighter2\": \"Excepteur dolor ut in\",\n        \"fighter2RankingPoint\": 3698,\n        \"refereeGroup\": \"e\",\n        \"sportEventTeam1Id\": \"quis exercitation\",\n        \"sportEventTeam2Id\": \"Duis\",\n        \"fightMatId\": \"in adipisicing velit esse\",\n        \"round\": \"Lore\",\n        \"qualifying\": true,\n        \"teamFightId\": \"sit cupidatat\",\n        \"status\": -84369429,\n        \"rankingCheck\": true,\n        \"technicalCheck\": true,\n        \"weight\": -87953400,\n        \"fightNumber\": 1235,\n        \"roundWeight\": 9178,\n        \"repechageWeight\": 3451,\n        \"repechageSection\": 6267,\n        \"displayOrder\": 367,\n        \"canceled\": \"do minim Lorem proident\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"sed esse quis sunt exercitation\"\n       },\n       \"isCompeting\": false,\n       \"hasOpenFight\": false,\n       \"isDisqualified\": true,\n       \"isNotRanked\": true,\n       \"isInjured\": true,\n       \"isForfeit\": false,\n       \"isRobinGroupNotRanked\": false,\n       \"id\": \"pariatur\",\n       \"sportEventWeightCategory\": \"nostrud\",\n       \"weight\": 443,\n       \"drawNumber\": 22,\n       \"seedNumber\": 15,\n       \"fighterWeight\": -27141341.308029562,\n       \"points\": 434,\n       \"fighterStatus\": -73637848\n      },\n      {\n       \"athleteId\": \"sit velit mollit ipsum aute\",\n       \"sportEventWeightCategoryId\": \"enim officia\",\n       \"weightCategoryFullName\": \"mollit exercitation ea\",\n       \"weightCategoryShortName\": \"quis deserunt ut\",\n       \"weightCategoryCountFights\": 1602896,\n       \"hasWeightCategoryBlockchainIds\": true,\n       \"weightCategoryCountReadyFighters\": -10956680,\n       \"countFights\": 50701856,\n       \"personId\": \"sunt\",\n       \"fullName\": \"ullamco dolore\",\n       \"preferedName\": \"dolore do elit ad\",\n       \"displayName\": \"cupidatat ipsum esse reprehenderit\",\n       \"givenName\": \"ex reprehenderit Ut sint\",\n       \"familyName\": \"tempor sint minim in irure\",\n       \"personPhoto\": \"ut dolore\",\n       \"athenaPrintId\": \"sit aute inci\",\n       \"teamAlternateName\": \"nostrud deserunt sunt elit mollit\",\n       \"teamName\": \"in proident\",\n       \"teamCountryFlag\": \"mollit\",\n       \"sportEventTeamId\": \"quis labore minim\",\n       \"sportEventId\": \"qui ut cillum\",\n       \"drawRank\": 36276553,\n       \"robinGroup\": \"aliquip\",\n       \"robinGroupRank\": -11438732,\n       \"teamRankingPoint\": -16512813,\n       \"uwwPoint\": 98514673,\n       \"knockOutStatus\": \"proident n\",\n       \"hasLostknockOut\": true,\n       \"completed\": -48353195,\n       \"wins\": -67526006,\n       \"losses\": -31154479,\n       \"technicalPointsFor\": -52363050,\n       \"technicalPointsAgainst\": 15234087,\n       \"technicalPointsDiff\": -29453786,\n       \"rankingPointsFor\": -98395912,\n       \"rankingPointsAgainst\": 44417652,\n       \"rankingPointsDiff\": 40585344,\n       \"winsEasy\": 30658918,\n       \"winsSuperiority\": -52300934,\n       \"rank\": -57628714,\n       \"rankRobinGroup\": 97556197,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"sit dolore\",\n        \"sportEventWeightCategoryId\": \"occaecat sit dolore ut\",\n        \"fighter1Id\": \"ex culpa Ut mollit velit\",\n        \"fighter2Id\": \"ut ut adipisicing\",\n        \"team1Name\": \"qui ipsum sed\",\n        \"team1AlternateName\": \"sunt adipisicing cupidatat Duis\",\n        \"team1FullName\": \"ullamco exercitation sit magna pariatur\",\n        \"team1CountryFlag\": \"anim ipsum ex id\",\n        \"team1CountryFlagScoreboard\": \"id consequat voluptate elit\",\n        \"team1PoolName\": \"dolor veniam sint adipisicing\",\n        \"team1FightByOpponent\": \"Lorem Excepteur\",\n        \"team2Name\": \"dolore sed\",\n        \"team2AlternateName\": \"eiusmod\",\n        \"team2FullName\": \"dolore\",\n        \"team2CountryFlag\": \"consequat et eiusmod fugiat\",\n        \"team2CountryFlagScoreboard\": \"in nulla\",\n        \"team2PoolName\": \"con\",\n        \"team2FightByOpponent\": \"nostrud do Duis anim reprehenderi\",\n        \"roundFriendlyName\": \"quis ullamco dolore adipisicing do\",\n        \"displayOrderInRound\": 69971838,\n        \"round1Id\": \"sit incididunt molli\",\n        \"round2Id\": \"Lorem\",\n        \"countReferees\": 57413048,\n        \"sportId\": \"ipsum et Lorem\",\n        \"athlete1Color\": \"laborum irure\",\n        \"athlete2Color\": \"est minim exercitation\",\n        \"athlete1TextColor\": \"sit ut\",\n        \"athlete2TextColor\": \"in Ut\",\n        \"matName\": \"incididunt labore\",\n        \"sessionId\": \"in fugiat dolore\",\n        \"sessionName\": \"dolor ea tempor cillu\",\n        \"technicalPoints\": \"anim in exercitation nisi\",\n        \"uploaderFightTest\": \"adipisicing m\",\n        \"technicalPointDetails\": \"incididunt nisi sit\",\n        \"technicalPointTagStatus\": \"commodo fugiat exercitation anim\",\n        \"technicalPointIds\": \"anim proident elit\",\n        \"isCompleted\": true,\n        \"isReady\": false,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"aliquip occaecat ut\",\n        \"winnerTeam\": \"ut\",\n        \"winnerTeamAlternateName\": \"cupidatat Duis tempor\",\n        \"sportEventName\": \"incidi\",\n        \"sportEventStartDate\": \"aliquip aliqua\",\n        \"sportEventLogo\": \"ea ut dolore\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"pariatur tempor\",\n        \"roundsNumber\": 29843094,\n        \"roundDuration\": 71128013,\n        \"sportAlternateName\": \"elit do\",\n        \"weightCategoryName\": \"ipsum\",\n        \"weightCategoryAlternateName\": \"magna reprehenderit Duis\",\n        \"weightCategoryShortName\": \"proident Ut sunt ut pariatur\",\n        \"weightCategoryMaxWeight\": -78685705,\n        \"weightCategoryFullName\": \"voluptate fugiat\",\n        \"weightCategoryAverageDuration\": -31443878,\n        \"weightCategoryColor\": \"adipisicing Excepteur sed\",\n        \"weightCategoryCompleted\": true,\n        \"victoryTypes\": \"eiusmod amet laborum cillum do\",\n        \"victoryTypesArray\": \"non\",\n        \"audienceName\": \"nisi proident sint incididunt ut\",\n        \"audienceShortName\": \"enim dolore aute nisi\",\n        \"sportName\": \"labore\",\n        \"injuryTime\": -767999,\n        \"warnings\": false,\n        \"cautions\": 60460833,\n        \"legFouls\": false,\n        \"activityTime\": true,\n        \"fighter1FullName\": \"consectetur laborum\",\n        \"fighter1DisplayName\": \"exercitation amet\",\n        \"fighter1FamilyName\": \"officia occaecat\",\n        \"fighter1GivenName\": \"magna Lorem tempor Duis mollit\",\n        \"fighter1PreferedName\": \"dolor consectetur aliquip et\",\n        \"fighter1DrawRank\": \"occaecat magna pariatur\",\n        \"fighter1RobinRank\": \"voluptate\",\n        \"fighter1SeedNumber\": -29301649,\n        \"fighter1AthleteId\": \"ut irure Excepteur\",\n        \"fighter1PersonId\": \"irure Excepteur\",\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": 17540012,\n        \"fighter1IsInjured\": false,\n        \"fighter2FullName\": \"c\",\n        \"fighter2DisplayName\": \"ipsum sunt sit\",\n        \"fighter2FamilyName\": \"ipsum dolore\",\n        \"fighter2GivenName\": \"qui esse irure ipsum anim\",\n        \"fighter2PreferedName\": \"eu cupidatat aute sint\",\n        \"fighter2DrawRank\": 66408704,\n        \"fighter2RobinRank\": 53683683,\n        \"fighter2SeedNumber\": -43596473,\n        \"fighter2AthleteId\": \"ea ad\",\n        \"fighter2PersonId\": \"laborum laboris nulla aliquip\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": 53173430,\n        \"fighter2IsInjured\": true,\n        \"result\": \"ut\",\n        \"victoryType\": \"fugiat dolor in Duis\",\n        \"endTime\": -48166111,\n        \"endDate\": \"in commodo aliquip\",\n        \"expectedDateStart\": \"anim enim consequat ut\",\n        \"expectedStartDate\": \"dolore commodo\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"id pariatur\",\n        \"resultText\": \"anim voluptate amet nulla minim\",\n        \"resultTextSmall\": \"cupidatat Ut proident cillum\",\n        \"roundRenamedSmall\": \"quis nulla\",\n        \"parentFightNumber1\": -50625268,\n        \"parentFightNumber2\": -26454491,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": false,\n        \"id\": \"incididunt enim\",\n        \"parentFight1Id\": \"adipisicing culpa Ut magna\",\n        \"parentFight2Id\": \"voluptate\",\n        \"fighter1\": \"voluptate et\",\n        \"fighter1RankingPoint\": 4731,\n        \"fighter2\": \"id exercitation\",\n        \"fighter2RankingPoint\": 8465,\n        \"refereeGroup\": \"i\",\n        \"sportEventTeam1Id\": \"ad \",\n        \"sportEventTeam2Id\": \"occaecat sint laboris esse nisi\",\n        \"fightMatId\": \"non Excepteur\",\n        \"round\": \"et u\",\n        \"qualifying\": false,\n        \"teamFightId\": \"eiusmod quis est aute\",\n        \"status\": -32695086,\n        \"rankingCheck\": false,\n        \"technicalCheck\": false,\n        \"weight\": 697586,\n        \"fightNumber\": 6675,\n        \"roundWeight\": 9015,\n        \"repechageWeight\": 9354,\n        \"repechageSection\": 3074,\n        \"displayOrder\": 6970,\n        \"canceled\": \"in non\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"mollit dolor \"\n       },\n       \"isCompeting\": true,\n       \"hasOpenFight\": false,\n       \"isDisqualified\": false,\n       \"isNotRanked\": false,\n       \"isInjured\": true,\n       \"isForfeit\": true,\n       \"isRobinGroupNotRanked\": true,\n       \"id\": \"veniam do\",\n       \"sportEventWeightCategory\": \"pariatur exercitation voluptate\",\n       \"weight\": 472,\n       \"drawNumber\": 179,\n       \"seedNumber\": 18,\n       \"fighterWeight\": -4200568.016788825,\n       \"points\": 117,\n       \"fighterStatus\": -80698881\n      }\n     ],\n     \"countReadyTeams\": -68255131,\n     \"countReadyFighters\": 60795713,\n     \"countReadySeededFighters\": -83279870,\n     \"countSeededFighters\": -81155731,\n     \"countFighters\": 83934860,\n     \"isRepechageSet\": false,\n     \"countTeams\": -84948524,\n     \"countFights\": -91435628,\n     \"perfectNumber\": 7079396,\n     \"isRobin\": false,\n     \"isRobinGrouped\": false,\n     \"id\": \"labore fugiat non Duis\",\n     \"averageDuration\": -55502484,\n     \"color\": \"\",\n     \"odfCode\": \"sint laboris aute occaecat\",\n     \"uwwRanking\": false,\n     \"blockchainIds\": \"deserunt qui ipsum\",\n     \"sessionStartDay\": 86655812,\n     \"matAssignment\": 77656933,\n     \"fightersUpdated\": \"ea labor\"\n    }\n   ],\n   \"id\": \"Lorem laboris veniam\",\n   \"sportEventTeamId\": \"amet qui fugiat eu\",\n   \"disqualified\": true\n  },\n  {\n   \"personId\": \"in Ut Duis ut ad\",\n   \"sportEventId\": \"Ut Lorem cillum incididunt\",\n   \"personFullName\": \"Excepteur\",\n   \"athenaPrintId\": \"eu Excepteur velit labore in\",\n   \"personFamilyName\": \"magna mollit irure ea\",\n   \"personGivenName\": \"aute ullamco\",\n   \"personPhoto\": \"do id voluptate co\",\n   \"teamFullName\": \"laboris exercitation et nostrud\",\n   \"teamName\": \"eiusmod \",\n   \"teamAlternateName\": \"ullamco\",\n   \"teamCountryFlag\": \"Ut d\",\n   \"isCompeting\": true,\n   \"weightCategories\": [\n    {\n     \"name\": \"proi\",\n     \"audience\": \"officia et\",\n     \"sport\": \"fugiat commodo\",\n     \"minWeight\": 482,\n     \"maxWeight\": 38,\n     \"roundsNumber\": 5,\n     \"roundDuration\": 277,\n     \"overtime\": 97827025,\n     \"tournamentType\": \"in\",\n     \"sportEventId\": \"ea nulla id sed fugiat\",\n     \"sportAlternateName\": \"l\",\n     \"sportName\": \"ipsum exercitation\",\n     \"fullName\": \"nostrud Duis sunt\",\n     \"alternateName\": \"Ut laborum veniam\",\n     \"shortName\": \"irure sed et\",\n     \"sportId\": \"dolore quis\",\n     \"audienceId\": \"id do consequa\",\n     \"audienceName\": \"esse officia fugiat\",\n     \"isVeteran\": true,\n     \"audienceShortName\": \"esse ea aliqua elit\",\n     \"isSinglebracketTournament\": true,\n     \"isDoublebracketTournament\": false,\n     \"isRoundrobinTournament\": true,\n     \"isBeltWrestlingCategory\": true,\n     \"isKazakhTournament\": true,\n     \"isBeachWrestlingTournament\": true,\n     \"fightersIsReady\": [\n      {\n       \"athleteId\": \"veniam la\",\n       \"sportEventWeightCategoryId\": \"do in consequat\",\n       \"weightCategoryFullName\": \"officia nostrud\",\n       \"weightCategoryShortName\": \"reprehenderit ea ad consectetur veniam\",\n       \"weightCategoryCountFights\": 67105013,\n       \"hasWeightCategoryBlockchainIds\": true,\n       \"weightCategoryCountReadyFighters\": 14959175,\n       \"countFights\": -67185662,\n       \"personId\": \"reprehenderit qui\",\n       \"fullName\": \"irure aliqua mollit\",\n       \"preferedName\": \"sed minim\",\n       \"displayName\": \"commodo sed quis in\",\n       \"givenName\": \"officia ullamco ip\",\n       \"familyName\": \"consectetur enim veniam\",\n       \"personPhoto\": \"esse irure\",\n       \"athenaPrintId\": \"est aliqua id\",\n       \"teamAlternateName\": \"voluptate\",\n       \"teamName\": \"in cupidatat quis amet pariatur\",\n       \"teamCountryFlag\": \"cillum tempor\",\n       \"sportEventTeamId\": \"adipisicing sit ut eu\",\n       \"sportEventId\": \"mollit eu ut sit\",\n       \"drawRank\": 73721733,\n       \"robinGroup\": \"ex est\",\n       \"robinGroupRank\": 49189940,\n       \"teamRankingPoint\": -85897692,\n       \"uwwPoint\": 66498946,\n       \"knockOutStatus\": \"qui anim\",\n       \"hasLostknockOut\": true,\n       \"completed\": -46050637,\n       \"wins\": 5203863,\n       \"losses\": -51499637,\n       \"technicalPointsFor\": 45649677,\n       \"technicalPointsAgainst\": 2407875,\n       \"technicalPointsDiff\": -39044900,\n       \"rankingPointsFor\": 28369644,\n       \"rankingPointsAgainst\": -1765618,\n       \"rankingPointsDiff\": -60850442,\n       \"winsEasy\": -84820815,\n       \"winsSuperiority\": -37234000,\n       \"rank\": -34961186,\n       \"rankRobinGroup\": -59154761,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"Duis mollit eiusmod sed\",\n        \"sportEventWeightCategoryId\": \"ut labore aliqua\",\n        \"fighter1Id\": \"in cillum\",\n        \"fighter2Id\": \"sint aliqua officia consequat\",\n        \"team1Name\": \"sunt amet Lorem ad\",\n        \"team1AlternateName\": \"id cillum nisi dolor nostrud\",\n        \"team1FullName\": \"officia quis\",\n        \"team1CountryFlag\": \"aliqua tempor in est adipisicing\",\n        \"team1CountryFlagScoreboard\": \"consequat aliquip deserunt\",\n        \"team1PoolName\": \"nisi Ut consequat\",\n        \"team1FightByOpponent\": \"enim in ea\",\n        \"team2Name\": \"nulla\",\n        \"team2AlternateName\": \"ex dolor aliquip quis\",\n        \"team2FullName\": \"voluptate ex\",\n        \"team2CountryFlag\": \"Duis qui aliquip\",\n        \"team2CountryFlagScoreboard\": \"dolore dolor incididunt do ad\",\n        \"team2PoolName\": \"proident\",\n        \"team2FightByOpponent\": \"ad enim\",\n        \"roundFriendlyName\": \"Duis Lorem adipisicing deserunt\",\n        \"displayOrderInRound\": -66570365,\n        \"round1Id\": \"labore nostrud e\",\n        \"round2Id\": \"aliquip nulla Excepteur\",\n        \"countReferees\": 74837483,\n        \"sportId\": \"in Duis non incididunt\",\n        \"athlete1Color\": \"magna id ut qui\",\n        \"athlete2Color\": \"culpa eni\",\n        \"athlete1TextColor\": \"reprehenderit ut cupidatat sit\",\n        \"athlete2TextColor\": \"aliquip\",\n        \"matName\": \"proident non occaecat ut\",\n        \"sessionId\": \"a\",\n        \"sessionName\": \"in id commodo sed\",\n        \"technicalPoints\": \"anim sint enim officia\",\n        \"uploaderFightTest\": \"deserunt labore veniam\",\n        \"technicalPointDetails\": \"Duis incididunt minim nulla\",\n        \"technicalPointTagStatus\": \"do commodo\",\n        \"technicalPointIds\": \"id anim\",\n        \"isCompleted\": true,\n        \"isReady\": false,\n        \"isRobinGroupFight\": false,\n        \"winnerFighter\": \"Duis\",\n        \"winnerTeam\": \"adipisicing nisi reprehenderit irure sunt\",\n        \"winnerTeamAlternateName\": \"exercitatio\",\n        \"sportEventName\": \"dolor aliquip officia\",\n        \"sportEventStartDate\": \"anim\",\n        \"sportEventLogo\": \"est in in ut\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"nulla amet anim nostrud\",\n        \"roundsNumber\": 20386667,\n        \"roundDuration\": -57271628,\n        \"sportAlternateName\": \"incididunt cillum\",\n        \"weightCategoryName\": \"sed officia aliquip occaecat\",\n        \"weightCategoryAlternateName\": \"consequat in deserunt\",\n        \"weightCategoryShortName\": \"non consectetur\",\n        \"weightCategoryMaxWeight\": -49655686,\n        \"weightCategoryFullName\": \"nostrud irure ut aliqua\",\n        \"weightCategoryAverageDuration\": -9211422,\n        \"weightCategoryColor\": \"labore proident et\",\n        \"weightCategoryCompleted\": true,\n        \"victoryTypes\": \"consequat ea enim minim u\",\n        \"victoryTypesArray\": \"sint veniam proident\",\n        \"audienceName\": \"deserunt reprehenderit non sed ipsum\",\n        \"audienceShortName\": \"adipisicing\",\n        \"sportName\": \"ipsum es\",\n        \"injuryTime\": -51720238,\n        \"warnings\": false,\n        \"cautions\": 51764736,\n        \"legFouls\": false,\n        \"activityTime\": false,\n        \"fighter1FullName\": \"laboris nostrud\",\n        \"fighter1DisplayName\": \"occaecat sint sed\",\n        \"fighter1FamilyName\": \"nulla proident dolor\",\n        \"fighter1GivenName\": \"anim ut\",\n        \"fighter1PreferedName\": \"laborum ad\",\n        \"fighter1DrawRank\": \"ex aliqua \",\n        \"fighter1RobinRank\": \"aliqua do ut irure reprehenderit\",\n        \"fighter1SeedNumber\": 89827254,\n        \"fighter1AthleteId\": \"sunt nulla aute voluptate esse\",\n        \"fighter1PersonId\": \"aute est\",\n        \"fighter1IsSeeded\": false,\n        \"fighter1Status\": 56323980,\n        \"fighter1IsInjured\": false,\n        \"fighter2FullName\": \"qui cupidatat o\",\n        \"fighter2DisplayName\": \"occaecat\",\n        \"fighter2FamilyName\": \"sit ullamco minim\",\n        \"fighter2GivenName\": \"cupidatat do Excepteur\",\n        \"fighter2PreferedName\": \"deser\",\n        \"fighter2DrawRank\": 99629545,\n        \"fighter2RobinRank\": -21842227,\n        \"fighter2SeedNumber\": -90654739,\n        \"fighter2AthleteId\": \"nulla sit aliqua labore\",\n        \"fighter2PersonId\": \"sint reprehenderit eiusmod Excepteur\",\n        \"fighter2IsSeeded\": false,\n        \"fighter2Status\": -54911701,\n        \"fighter2IsInjured\": false,\n        \"result\": \"minim enim voluptate\",\n        \"victoryType\": \"in magna\",\n        \"endTime\": 55338448,\n        \"endDate\": \"adipisicing\",\n        \"expectedDateStart\": \"ex\",\n        \"expectedStartDate\": \"voluptate reprehenderit\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"sint velit\",\n        \"resultText\": \"labore irure sunt eu et\",\n        \"resultTextSmall\": \"dolore non laborum veniam\",\n        \"roundRenamedSmall\": \"laboris sint quis\",\n        \"parentFightNumber1\": -14447411,\n        \"parentFightNumber2\": 17159059,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": false,\n        \"isCountdown\": false,\n        \"id\": \"nisi incididunt in deserunt\",\n        \"parentFight1Id\": \"dolore voluptate velit dolor\",\n        \"parentFight2Id\": \"proident deserunt\",\n        \"fighter1\": \"velit\",\n        \"fighter1RankingPoint\": 9017,\n        \"fighter2\": \"ipsum sunt\",\n        \"fighter2RankingPoint\": 6708,\n        \"refereeGroup\": \"e\",\n        \"sportEventTeam1Id\": \"al\",\n        \"sportEventTeam2Id\": \"laborum non qu\",\n        \"fightMatId\": \"mollit cupidatat\",\n        \"round\": \"non \",\n        \"qualifying\": true,\n        \"teamFightId\": \"dolor laboris ex\",\n        \"status\": -65540358,\n        \"rankingCheck\": false,\n        \"technicalCheck\": false,\n        \"weight\": -63070729,\n        \"fightNumber\": 9301,\n        \"roundWeight\": 71,\n        \"repechageWeight\": 5529,\n        \"repechageSection\": 3954,\n        \"displayOrder\": 2668,\n        \"canceled\": \"proident nisi\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"voluptate\"\n       },\n       \"isCompeting\": true,\n       \"hasOpenFight\": false,\n       \"isDisqualified\": false,\n       \"isNotRanked\": false,\n       \"isInjured\": true,\n       \"isForfeit\": true,\n       \"isRobinGroupNotRanked\": false,\n       \"id\": \"tempor proident aute quis\",\n       \"sportEventWeightCategory\": \"reprehenderit laboris dolor\",\n       \"weight\": 407,\n       \"drawNumber\": 105,\n       \"seedNumber\": 4,\n       \"fighterWeight\": 19342936.376258105,\n       \"points\": 202,\n       \"fighterStatus\": -66341322\n      },\n      {\n       \"athleteId\": \"sunt minim sint\",\n       \"sportEventWeightCategoryId\": \"ad sed eu\",\n       \"weightCategoryFullName\": \"Du\",\n       \"weightCategoryShortName\": \"qui exercitation\",\n       \"weightCategoryCountFights\": -97496240,\n       \"hasWeightCategoryBlockchainIds\": true,\n       \"weightCategoryCountReadyFighters\": 40992557,\n       \"countFights\": -59130983,\n       \"personId\": \"quis nulla mollit\",\n       \"fullName\": \"veniam magna Ut sint\",\n       \"preferedName\": \"Duis culpa dolor\",\n       \"displayName\": \"ut commodo id\",\n       \"givenName\": \"Excepteur eu qui exercitation\",\n       \"familyName\": \"ut quis adipisicing\",\n       \"personPhoto\": \"anim Duis officia\",\n       \"athenaPrintId\": \"voluptate dolor ut aliqua Duis\",\n       \"teamAlternateName\": \"Lorem nulla\",\n       \"teamName\": \"occaeca\",\n       \"teamCountryFlag\": \"in deserunt commodo\",\n       \"sportEventTeamId\": \"mollit in deserunt laborum ipsum\",\n       \"sportEventId\": \"pariatur\",\n       \"drawRank\": 16948126,\n       \"robinGroup\": \"tempor nulla pariatur veniam\",\n       \"robinGroupRank\": 47990473,\n       \"teamRankingPoint\": -1733247,\n       \"uwwPoint\": 38607653,\n       \"knockOutStatus\": \"aute velit quis\",\n       \"hasLostknockOut\": false,\n       \"completed\": -13733046,\n       \"wins\": -96085156,\n       \"losses\": 39762012,\n       \"technicalPointsFor\": -6572382,\n       \"technicalPointsAgainst\": -20379057,\n       \"technicalPointsDiff\": -25934413,\n       \"rankingPointsFor\": -55151450,\n       \"rankingPointsAgainst\": 88904507,\n       \"rankingPointsDiff\": -89586877,\n       \"winsEasy\": 80218408,\n       \"winsSuperiority\": -35368747,\n       \"rank\": -96166757,\n       \"rankRobinGroup\": -99877908,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"culpa quis tempor\",\n        \"sportEventWeightCategoryId\": \"laborum in elit\",\n        \"fighter1Id\": \"ut\",\n        \"fighter2Id\": \"irure velit Lorem id\",\n        \"team1Name\": \"dolore\",\n        \"team1AlternateName\": \"minim nostrud sint\",\n        \"team1FullName\": \"nisi exercitation ut cupidatat occaecat\",\n        \"team1CountryFlag\": \"anim dolore\",\n        \"team1CountryFlagScoreboard\": \"consequat commodo\",\n        \"team1PoolName\": \"in culpa laboris ullamco ut\",\n        \"team1FightByOpponent\": \"in sunt Ut consectetur dolor\",\n        \"team2Name\": \"incididunt voluptate\",\n        \"team2AlternateName\": \"ut aute cillum Excepteur quis\",\n        \"team2FullName\": \"consectetur Lorem non fugiat\",\n        \"team2CountryFlag\": \"incididunt tempor\",\n        \"team2CountryFlagScoreboard\": \"cupida\",\n        \"team2PoolName\": \"anim ut est\",\n        \"team2FightByOpponent\": \"sed anim veniam proident dolore\",\n        \"roundFriendlyName\": \"nulla \",\n        \"displayOrderInRound\": -92375754,\n        \"round1Id\": \"ea\",\n        \"round2Id\": \"exercitation laborum dolor\",\n        \"countReferees\": 13224042,\n        \"sportId\": \"id labore consectetur\",\n        \"athlete1Color\": \"aliqua\",\n        \"athlete2Color\": \"ut magna\",\n        \"athlete1TextColor\": \"dolor\",\n        \"athlete2TextColor\": \"deserunt proident\",\n        \"matName\": \"officia in\",\n        \"sessionId\": \"id laborum proident\",\n        \"sessionName\": \"fugiat sunt ullamco labore do\",\n        \"technicalPoints\": \"Excepteur consectetur\",\n        \"uploaderFightTest\": \"sunt\",\n        \"technicalPointDetails\": \"tempor sit ut in\",\n        \"technicalPointTagStatus\": \"reprehenderit tempor sed pariatur\",\n        \"technicalPointIds\": \"qui sint culpa non\",\n        \"isCompleted\": false,\n        \"isReady\": true,\n        \"isRobinGroupFight\": false,\n        \"winnerFighter\": \"eu dolor Lorem culpa\",\n        \"winnerTeam\": \"veniam sed\",\n        \"winnerTeamAlternateName\": \"dolore\",\n        \"sportEventName\": \"culpa\",\n        \"sportEventStartDate\": \"id sit\",\n        \"sportEventLogo\": \"voluptate Ut aliqua\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"nulla aute velit\",\n        \"roundsNumber\": 85189287,\n        \"roundDuration\": -5684049,\n        \"sportAlternateName\": \"do velit aute ut\",\n        \"weightCategoryName\": \"do laboris fugiat\",\n        \"weightCategoryAlternateName\": \"velit ut eu\",\n        \"weightCategoryShortName\": \"consectetur elit\",\n        \"weightCategoryMaxWeight\": 58528012,\n        \"weightCategoryFullName\": \"consequat\",\n        \"weightCategoryAverageDuration\": 4536044,\n        \"weightCategoryColor\": \"velit ut sit Lorem\",\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": \"in dolore et ipsum\",\n        \"victoryTypesArray\": \"ad si\",\n        \"audienceName\": \"elit eu cillum consectetur dolor\",\n        \"audienceShortName\": \"aute incididunt\",\n        \"sportName\": \"Lorem proident velit ullamco\",\n        \"injuryTime\": -73785666,\n        \"warnings\": false,\n        \"cautions\": 62145661,\n        \"legFouls\": true,\n        \"activityTime\": false,\n        \"fighter1FullName\": \"magna cupidatat\",\n        \"fighter1DisplayName\": \"ullamco labore ex\",\n        \"fighter1FamilyName\": \"Ut ipsum do\",\n        \"fighter1GivenName\": \"mollit do\",\n        \"fighter1PreferedName\": \"id dolor\",\n        \"fighter1DrawRank\": \"laborum veniam\",\n        \"fighter1RobinRank\": \"aute in in Excepteur\",\n        \"fighter1SeedNumber\": 96503263,\n        \"fighter1AthleteId\": \"labore anim\",\n        \"fighter1PersonId\": \"ad\",\n        \"fighter1IsSeeded\": false,\n        \"fighter1Status\": 98215241,\n        \"fighter1IsInjured\": true,\n        \"fighter2FullName\": \"elit in\",\n        \"fighter2DisplayName\": \"dolore sunt elit\",\n        \"fighter2FamilyName\": \"eiusmod dolore ullamco cillum nisi\",\n        \"fighter2GivenName\": \"reprehenderit sint\",\n        \"fighter2PreferedName\": \"labore\",\n        \"fighter2DrawRank\": -70525918,\n        \"fighter2RobinRank\": 85781194,\n        \"fighter2SeedNumber\": 48406094,\n        \"fighter2AthleteId\": \"cupidatat cillum\",\n        \"fighter2PersonId\": \"Duis nulla\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": -10276838,\n        \"fighter2IsInjured\": true,\n        \"result\": \"tempor et laborum est anim\",\n        \"victoryType\": \"Ut Lorem ullamco culpa quis\",\n        \"endTime\": 12659010,\n        \"endDate\": \"nulla aliquip eu officia amet\",\n        \"expectedDateStart\": \"fugiat amet\",\n        \"expectedStartDate\": \"laboris\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"cillum laboris\",\n        \"resultText\": \"cul\",\n        \"resultTextSmall\": \"pariatur aliquip Excepteur\",\n        \"roundRenamedSmall\": \"sed nulla\",\n        \"parentFightNumber1\": 57371238,\n        \"parentFightNumber2\": -93107822,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": true,\n        \"isCountdown\": true,\n        \"id\": \"ci\",\n        \"parentFight1Id\": \"est\",\n        \"parentFight2Id\": \"cillum voluptate et\",\n        \"fighter1\": \"dolor amet eu consectetur ea\",\n        \"fighter1RankingPoint\": 5940,\n        \"fighter2\": \"adipisicing in\",\n        \"fighter2RankingPoint\": 3981,\n        \"refereeGroup\": \"q\",\n        \"sportEventTeam1Id\": \"proident anim dolor non\",\n        \"sportEventTeam2Id\": \"anim tempor nostrud \",\n        \"fightMatId\": \"adipisicing\",\n        \"round\": \"sint\",\n        \"qualifying\": true,\n        \"teamFightId\": \"nulla voluptate\",\n        \"status\": 63624229,\n        \"rankingCheck\": false,\n        \"technicalCheck\": false,\n        \"weight\": 2365456,\n        \"fightNumber\": 3666,\n        \"roundWeight\": 7516,\n        \"repechageWeight\": 9424,\n        \"repechageSection\": 2216,\n        \"displayOrder\": 3211,\n        \"canceled\": \"cillum cupid\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"elit\"\n       },\n       \"isCompeting\": false,\n       \"hasOpenFight\": false,\n       \"isDisqualified\": true,\n       \"isNotRanked\": true,\n       \"isInjured\": false,\n       \"isForfeit\": false,\n       \"isRobinGroupNotRanked\": true,\n       \"id\": \"culpa sunt nisi laboris\",\n       \"sportEventWeightCategory\": \"exercitation nostrud aliquip ut\",\n       \"weight\": 180,\n       \"drawNumber\": 245,\n       \"seedNumber\": 12,\n       \"fighterWeight\": -66510260.22427833,\n       \"points\": 72,\n       \"fighterStatus\": 5265066\n      }\n     ],\n     \"countReadyTeams\": 81904316,\n     \"countReadyFighters\": -13902260,\n     \"countReadySeededFighters\": 12799059,\n     \"countSeededFighters\": -425033,\n     \"countFighters\": -57100999,\n     \"isRepechageSet\": false,\n     \"countTeams\": 77736968,\n     \"countFights\": -43008906,\n     \"perfectNumber\": 96783227,\n     \"isRobin\": true,\n     \"isRobinGrouped\": false,\n     \"id\": \"aute in in\",\n     \"averageDuration\": 84095630,\n     \"color\": \"sed\",\n     \"odfCode\": \"officia ipsum\",\n     \"uwwRanking\": false,\n     \"blockchainIds\": \"ut velit voluptate veniam et\",\n     \"sessionStartDay\": 15702907,\n     \"matAssignment\": -67707649,\n     \"fightersUpdated\": \"ullamco\"\n    },\n    {\n     \"name\": \"moll\",\n     \"audience\": \"occaecat\",\n     \"sport\": \"ex\",\n     \"minWeight\": 390,\n     \"maxWeight\": 388,\n     \"roundsNumber\": 7,\n     \"roundDuration\": 129,\n     \"overtime\": -53945521,\n     \"tournamentType\": \"Excepteur officia qui non\",\n     \"sportEventId\": \"minim adipisicing\",\n     \"sportAlternateName\": \"elit reprehenderit laboris occaecat\",\n     \"sportName\": \"consectetur cillum fugiat\",\n     \"fullName\": \"aliquip ex\",\n     \"alternateName\": \"Excepteur esse\",\n     \"shortName\": \"aliqua et mollit ipsum\",\n     \"sportId\": \"aliqua\",\n     \"audienceId\": \"aute in anim\",\n     \"audienceName\": \"esse amet eu Duis nulla\",\n     \"isVeteran\": false,\n     \"audienceShortName\": \"ut aliqua nisi esse\",\n     \"isSinglebracketTournament\": false,\n     \"isDoublebracketTournament\": true,\n     \"isRoundrobinTournament\": true,\n     \"isBeltWrestlingCategory\": false,\n     \"isKazakhTournament\": true,\n     \"isBeachWrestlingTournament\": false,\n     \"fightersIsReady\": [\n      {\n       \"athleteId\": \"quis\",\n       \"sportEventWeightCategoryId\": \"Ut aute ea re\",\n       \"weightCategoryFullName\": \"irure magna tempor\",\n       \"weightCategoryShortName\": \"in pariatur\",\n       \"weightCategoryCountFights\": -6333041,\n       \"hasWeightCategoryBlockchainIds\": true,\n       \"weightCategoryCountReadyFighters\": 80380853,\n       \"countFights\": -72237241,\n       \"personId\": \"aute magna adipisicing esse nisi\",\n       \"fullName\": \"anim reprehenderit occaecat elit\",\n       \"preferedName\": \"et\",\n       \"displayName\": \"ip\",\n       \"givenName\": \"ad eiusmod sunt Lorem\",\n       \"familyName\": \"pariatur nostrud qui quis\",\n       \"personPhoto\": \"occaecat dolore dolore\",\n       \"athenaPrintId\": \"proident\",\n       \"teamAlternateName\": \"fugiat culpa ut laborum\",\n       \"teamName\": \"Lorem et do\",\n       \"teamCountryFlag\": \"ex aute\",\n       \"sportEventTeamId\": \"ut minim\",\n       \"sportEventId\": \"commodo sit\",\n       \"drawRank\": -23359978,\n       \"robinGroup\": \"et consectetur \",\n       \"robinGroupRank\": -40110405,\n       \"teamRankingPoint\": 16214155,\n       \"uwwPoint\": 15323642,\n       \"knockOutStatus\": \"esse\",\n       \"hasLostknockOut\": true,\n       \"completed\": 25942337,\n       \"wins\": -25782241,\n       \"losses\": -35887838,\n       \"technicalPointsFor\": 11987682,\n       \"technicalPointsAgainst\": -60619846,\n       \"technicalPointsDiff\": -88962812,\n       \"rankingPointsFor\": -37641588,\n       \"rankingPointsAgainst\": -79687918,\n       \"rankingPointsDiff\": -29199892,\n       \"winsEasy\": 43887730,\n       \"winsSuperiority\": -52566652,\n       \"rank\": 94636912,\n       \"rankRobinGroup\": -59997057,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"consequat Ut et officia\",\n        \"sportEventWeightCategoryId\": \"cupidatat pariatur\",\n        \"fighter1Id\": \"esse sunt dolore\",\n        \"fighter2Id\": \"amet aliquip anim\",\n        \"team1Name\": \"id est\",\n        \"team1AlternateName\": \"tempor ipsum\",\n        \"team1FullName\": \"eu veniam\",\n        \"team1CountryFlag\": \"in anim ullamco\",\n        \"team1CountryFlagScoreboard\": \"dolore magna proident\",\n        \"team1PoolName\": \"officia Lorem ea\",\n        \"team1FightByOpponent\": \"in mollit Duis\",\n        \"team2Name\": \"qui amet Lorem exercitation anim\",\n        \"team2AlternateName\": \"reprehenderit consequat sint sit\",\n        \"team2FullName\": \"tempor ea occaecat\",\n        \"team2CountryFlag\": \"aute elit aliqua sint\",\n        \"team2CountryFlagScoreboard\": \"esse incididunt cupidatat sint sit\",\n        \"team2PoolName\": \"sit officia\",\n        \"team2FightByOpponent\": \"irure sed commodo ullamco\",\n        \"roundFriendlyName\": \"voluptate nostrud et\",\n        \"displayOrderInRound\": -93315610,\n        \"round1Id\": \"enim deserunt\",\n        \"round2Id\": \"incididunt nostrud ipsum sunt dolor\",\n        \"countReferees\": -7528500,\n        \"sportId\": \"com\",\n        \"athlete1Color\": \"Duis cupidatat esse\",\n        \"athlete2Color\": \"labore irure qui\",\n        \"athlete1TextColor\": \"ut qui irure Ut\",\n        \"athlete2TextColor\": \"exercitation culpa fugiat adipisicing\",\n        \"matName\": \"ex sed sint aliquip laboris\",\n        \"sessionId\": \"dolore dolor non\",\n        \"sessionName\": \"aute\",\n        \"technicalPoints\": \"dolore in nulla sed\",\n        \"uploaderFightTest\": \"Ut\",\n        \"technicalPointDetails\": \"Exc\",\n        \"technicalPointTagStatus\": \"ut nisi ad anim\",\n        \"technicalPointIds\": \"eiusmod aliqua magna fugiat\",\n        \"isCompleted\": true,\n        \"isReady\": true,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"commodo\",\n        \"winnerTeam\": \"nisi\",\n        \"winnerTeamAlternateName\": \"reprehenderit voluptate tempor laboris\",\n        \"sportEventName\": \"enim ut in\",\n        \"sportEventStartDate\": \"sed ut\",\n        \"sportEventLogo\": \"tempor enim\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"sunt commodo\",\n        \"roundsNumber\": -11727921,\n        \"roundDuration\": 17423500,\n        \"sportAlternateName\": \"qui id\",\n        \"weightCategoryName\": \"amet tempor irure\",\n        \"weightCategoryAlternateName\": \"tempor occaecat Ut\",\n        \"weightCategoryShortName\": \"minim mollit esse adipisicing dolor\",\n        \"weightCategoryMaxWeight\": 52057616,\n        \"weightCategoryFullName\": \"quis ad sunt aliqua id\",\n        \"weightCategoryAverageDuration\": -60103416,\n        \"weightCategoryColor\": \"id esse\",\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": \"ex l\",\n        \"victoryTypesArray\": \"n\",\n        \"audienceName\": \"Lorem ip\",\n        \"audienceShortName\": \"velit eu do incididunt\",\n        \"sportName\": \"tempor irure mollit\",\n        \"injuryTime\": -48617242,\n        \"warnings\": false,\n        \"cautions\": 21203921,\n        \"legFouls\": true,\n        \"activityTime\": false,\n        \"fighter1FullName\": \"adipisicing voluptate ullamco enim\",\n        \"fighter1DisplayName\": \"Lorem sit\",\n        \"fighter1FamilyName\": \"magna mollit consequat\",\n        \"fighter1GivenName\": \"proident mollit i\",\n        \"fighter1PreferedName\": \"laboris incididunt\",\n        \"fighter1DrawRank\": \"qui sint ex\",\n        \"fighter1RobinRank\": \"in l\",\n        \"fighter1SeedNumber\": -43616495,\n        \"fighter1AthleteId\": \"id laboru\",\n        \"fighter1PersonId\": \"eu veniam ad\",\n        \"fighter1IsSeeded\": true,\n        \"fighter1Status\": 61099633,\n        \"fighter1IsInjured\": false,\n        \"fighter2FullName\": \"Duis aliquip ex Ut\",\n        \"fighter2DisplayName\": \"eiu\",\n        \"fighter2FamilyName\": \"sint ea pariatur\",\n        \"fighter2GivenName\": \"incididunt elit pariatur\",\n        \"fighter2PreferedName\": \"consequat velit sunt dolore\",\n        \"fighter2DrawRank\": 92717171,\n        \"fighter2RobinRank\": 70200675,\n        \"fighter2SeedNumber\": -7999419,\n        \"fighter2AthleteId\": \"Lorem eiusmod\",\n        \"fighter2PersonId\": \"nisi veniam ut dolore\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": -86060144,\n        \"fighter2IsInjured\": true,\n        \"result\": \"cillum dolor magna\",\n        \"victoryType\": \"exercitation nisi ut\",\n        \"endTime\": -19396108,\n        \"endDate\": \"elit tempor ex sint\",\n        \"expectedDateStart\": \"la\",\n        \"expectedStartDate\": \"ipsum Excepteur id voluptate reprehenderit\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"Except\",\n        \"resultText\": \"aute et\",\n        \"resultTextSmall\": \"do Lorem anim consequat\",\n        \"roundRenamedSmall\": \"eu aliqua est\",\n        \"parentFightNumber1\": -43349907,\n        \"parentFightNumber2\": -11596010,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": false,\n        \"isCountdown\": true,\n        \"id\": \"aute sit cupidatat eiusmod laboris\",\n        \"parentFight1Id\": \"anim pariatur irure nisi\",\n        \"parentFight2Id\": \"nostrud in reprehenderit nisi\",\n        \"fighter1\": \"sint ullamco\",\n        \"fighter1RankingPoint\": 3810,\n        \"fighter2\": \"voluptate esse Lorem\",\n        \"fighter2RankingPoint\": 3139,\n        \"refereeGroup\": \"e\",\n        \"sportEventTeam1Id\": \"culpa\",\n        \"sportEventTeam2Id\": \"ut nisi\",\n        \"fightMatId\": \"cillum dolore incididunt\",\n        \"round\": \"id E\",\n        \"qualifying\": false,\n        \"teamFightId\": \"culpa minim laboris\",\n        \"status\": 92372835,\n        \"rankingCheck\": false,\n        \"technicalCheck\": true,\n        \"weight\": 72715390,\n        \"fightNumber\": 3145,\n        \"roundWeight\": 4950,\n        \"repechageWeight\": 192,\n        \"repechageSection\": 8790,\n        \"displayOrder\": 275,\n        \"canceled\": \"labore in\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"magna aliquip enim\"\n       },\n       \"isCompeting\": false,\n       \"hasOpenFight\": true,\n       \"isDisqualified\": false,\n       \"isNotRanked\": true,\n       \"isInjured\": true,\n       \"isForfeit\": false,\n       \"isRobinGroupNotRanked\": false,\n       \"id\": \"aliqua aute Excepteur id\",\n       \"sportEventWeightCategory\": \"officia dolore nulla velit\",\n       \"weight\": 317,\n       \"drawNumber\": 184,\n       \"seedNumber\": 17,\n       \"fighterWeight\": 23976247.455929086,\n       \"points\": 44,\n       \"fighterStatus\": 14228891\n      },\n      {\n       \"athleteId\": \"quis sit ut\",\n       \"sportEventWeightCategoryId\": \"laboris deserunt Excepteur\",\n       \"weightCategoryFullName\": \"non a\",\n       \"weightCategoryShortName\": \"ullamco in cillum\",\n       \"weightCategoryCountFights\": 91465186,\n       \"hasWeightCategoryBlockchainIds\": false,\n       \"weightCategoryCountReadyFighters\": 57783577,\n       \"countFights\": 75754012,\n       \"personId\": \"dolore incididunt in ut eu\",\n       \"fullName\": \"officia occaecat\",\n       \"preferedName\": \"in fugiat et dolor\",\n       \"displayName\": \"quis dolore minim ut\",\n       \"givenName\": \"ut mollit nisi ad\",\n       \"familyName\": \"laboris cillum\",\n       \"personPhoto\": \"et eiusmod dolore\",\n       \"athenaPrintId\": \"nisi elit\",\n       \"teamAlternateName\": \"ullamco\",\n       \"teamName\": \"dol\",\n       \"teamCountryFlag\": \"dolore proident elit aute magna\",\n       \"sportEventTeamId\": \"cillum in sit adipisicing\",\n       \"sportEventId\": \"culpa aute\",\n       \"drawRank\": -96592688,\n       \"robinGroup\": \"dolor ad sed qui\",\n       \"robinGroupRank\": 98743286,\n       \"teamRankingPoint\": -8934915,\n       \"uwwPoint\": 41595370,\n       \"knockOutStatus\": \"ex Duis\",\n       \"hasLostknockOut\": true,\n       \"completed\": 77685852,\n       \"wins\": 78703314,\n       \"losses\": 87948254,\n       \"technicalPointsFor\": 67465200,\n       \"technicalPointsAgainst\": 53973968,\n       \"technicalPointsDiff\": -36407751,\n       \"rankingPointsFor\": 35396061,\n       \"rankingPointsAgainst\": -31809653,\n       \"rankingPointsDiff\": -60287417,\n       \"winsEasy\": -40269447,\n       \"winsSuperiority\": -1964825,\n       \"rank\": -95700281,\n       \"rankRobinGroup\": 73420377,\n       \"fightByOpponent\": {\n        \"sportEventId\": \"aliquip aute cupidatat\",\n        \"sportEventWeightCategoryId\": \"laborum \",\n        \"fighter1Id\": \"mollit sed ad deserunt\",\n        \"fighter2Id\": \"exercitation deserunt\",\n        \"team1Name\": \"et anim in\",\n        \"team1AlternateName\": \"eiusmod ipsum\",\n        \"team1FullName\": \"veniam tempor aliquip do\",\n        \"team1CountryFlag\": \"qui deserunt magna\",\n        \"team1CountryFlagScoreboard\": \"mollit magna\",\n        \"team1PoolName\": \"cupidatat consequat nisi\",\n        \"team1FightByOpponent\": \"laboris in et sit\",\n        \"team2Name\": \"sit Duis\",\n        \"team2AlternateName\": \"deserunt\",\n        \"team2FullName\": \"labore sunt Excepteur exercitation\",\n        \"team2CountryFlag\": \"in labore\",\n        \"team2CountryFlagScoreboard\": \"aliquip fugiat enim\",\n        \"team2PoolName\": \"voluptate non exercitation\",\n        \"team2FightByOpponent\": \"culpa aliqua\",\n        \"roundFriendlyName\": \"occaecat sint proident\",\n        \"displayOrderInRound\": -41354571,\n        \"round1Id\": \"in non ut commodo\",\n        \"round2Id\": \"velit voluptate id fugiat\",\n        \"countReferees\": 73076795,\n        \"sportId\": \"cupidatat dolore pariatur\",\n        \"athlete1Color\": \"nostrud amet labore Excepteur\",\n        \"athlete2Color\": \"in ea sed\",\n        \"athlete1TextColor\": \"Ut Duis sit in\",\n        \"athlete2TextColor\": \"ex\",\n        \"matName\": \"dolore pariatur enim incididunt\",\n        \"sessionId\": \"do ex aute\",\n        \"sessionName\": \"officia \",\n        \"technicalPoints\": \"reprehenderit exercitation aliqu\",\n        \"uploaderFightTest\": \"consequat aute ullamco veniam\",\n        \"technicalPointDetails\": \"officia velit nulla ut\",\n        \"technicalPointTagStatus\": \"ut anim occaecat velit\",\n        \"technicalPointIds\": \"sed aliqua enim\",\n        \"isCompleted\": true,\n        \"isReady\": false,\n        \"isRobinGroupFight\": true,\n        \"winnerFighter\": \"velit enim adipisicing\",\n        \"winnerTeam\": \"velit\",\n        \"winnerTeamAlternateName\": \"amet pariatur consequat voluptate ut\",\n        \"sportEventName\": \"in velit reprehenderit non\",\n        \"sportEventStartDate\": \"ut irure\",\n        \"sportEventLogo\": \"adipisicing consectetur consequat cillum\",\n        \"rankingPoint\": {\n         \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"completedDate\": \"ullamco amet non\",\n        \"roundsNumber\": 77159363,\n        \"roundDuration\": 86144996,\n        \"sportAlternateName\": \"et incididunt\",\n        \"weightCategoryName\": \"sit Ut sint veniam\",\n        \"weightCategoryAlternateName\": \"aute\",\n        \"weightCategoryShortName\": \"cupidatat adipisicing incididunt laborum consectetur\",\n        \"weightCategoryMaxWeight\": 23412638,\n        \"weightCategoryFullName\": \"ut sunt et in\",\n        \"weightCategoryAverageDuration\": 12824282,\n        \"weightCategoryColor\": \"tempor qui\",\n        \"weightCategoryCompleted\": false,\n        \"victoryTypes\": \"nulla\",\n        \"victoryTypesArray\": \"nisi\",\n        \"audienceName\": \"dolore ad\",\n        \"audienceShortName\": \"dolor aute Ut veniam eiusmod\",\n        \"sportName\": \"aliqua Lorem eu dolore\",\n        \"injuryTime\": -37327636,\n        \"warnings\": true,\n        \"cautions\": 87363608,\n        \"legFouls\": false,\n        \"activityTime\": false,\n        \"fighter1FullName\": \"in eu cupidatat\",\n        \"fighter1DisplayName\": \"ut tempor in\",\n        \"fighter1FamilyName\": \"deserunt velit reprehenderit\",\n        \"fighter1GivenName\": \"et\",\n        \"fighter1PreferedName\": \"qui sunt laboris velit\",\n        \"fighter1DrawRank\": \"enim eiusmod fugiat sint\",\n        \"fighter1RobinRank\": \"minim aliquip proident id\",\n        \"fighter1SeedNumber\": 66996268,\n        \"fighter1AthleteId\": \"veniam\",\n        \"fighter1PersonId\": \"voluptate\",\n        \"fighter1IsSeeded\": false,\n        \"fighter1Status\": -59572708,\n        \"fighter1IsInjured\": false,\n        \"fighter2FullName\": \"ea esse in incididunt\",\n        \"fighter2DisplayName\": \"ad dolor\",\n        \"fighter2FamilyName\": \"ipsum Lorem incididunt enim\",\n        \"fighter2GivenName\": \"ut elit\",\n        \"fighter2PreferedName\": \"ad sunt ipsum\",\n        \"fighter2DrawRank\": 92318442,\n        \"fighter2RobinRank\": 65362960,\n        \"fighter2SeedNumber\": 40709459,\n        \"fighter2AthleteId\": \"incididunt Ut sunt commodo\",\n        \"fighter2PersonId\": \"reprehenderit do sit ex\",\n        \"fighter2IsSeeded\": true,\n        \"fighter2Status\": 92884092,\n        \"fighter2IsInjured\": false,\n        \"result\": \"laboris Lorem Excepteur officia\",\n        \"victoryType\": \"labore\",\n        \"endTime\": 53877679,\n        \"endDate\": \"aliquip anim\",\n        \"expectedDateStart\": \"amet officia ut minim ullamco\",\n        \"expectedStartDate\": \"ullamco quis aute id\",\n        \"team1Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"team2Fighters\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"rankingPointNiceName\": \"aliquip nisi dolor\",\n        \"resultText\": \"nostrud e\",\n        \"resultTextSmall\": \"dol\",\n        \"roundRenamedSmall\": \"ut voluptate ut dolore consectetur\",\n        \"parentFightNumber1\": 35908326,\n        \"parentFightNumber2\": 5819015,\n        \"fightRefereesWithRole\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"needsRefresh\": false,\n        \"isCountdown\": true,\n        \"id\": \"amet offici\",\n        \"parentFight1Id\": \"Ut laborum nulla quis\",\n        \"parentFight2Id\": \"\",\n        \"fighter1\": \"in pariatur labore eu\",\n        \"fighter1RankingPoint\": 1097,\n        \"fighter2\": \"exercitati\",\n        \"fighter2RankingPoint\": 5687,\n        \"refereeGroup\": \"q\",\n        \"sportEventTeam1Id\": \"irure mag\",\n        \"sportEventTeam2Id\": \"ut in in est amet\",\n        \"fightMatId\": \"ex labore quis in\",\n        \"round\": \"nisi\",\n        \"qualifying\": false,\n        \"teamFightId\": \"elit mollit pariatur minim\",\n        \"status\": 17934701,\n        \"rankingCheck\": false,\n        \"technicalCheck\": false,\n        \"weight\": -79576822,\n        \"fightNumber\": 8430,\n        \"roundWeight\": 5813,\n        \"repechageWeight\": 7754,\n        \"repechageSection\": 6257,\n        \"displayOrder\": 2575,\n        \"canceled\": \"commodo nostrud Excepteur eu\",\n        \"fightReferees\": [\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         },\n         {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n         }\n        ],\n        \"odfCode\": \"aute ad proident\"\n       },\n       \"isCompeting\": true,\n       \"hasOpenFight\": true,\n       \"isDisqualified\": true,\n       \"isNotRanked\": true,\n       \"isInjured\": true,\n       \"isForfeit\": false,\n       \"isRobinGroupNotRanked\": true,\n       \"id\": \"pariatur minim amet\",\n       \"sportEventWeightCategory\": \"consequat nulla sed\",\n       \"weight\": 397,\n       \"drawNumber\": 212,\n       \"seedNumber\": 17,\n       \"fighterWeight\": -77893613.44904196,\n       \"points\": 474,\n       \"fighterStatus\": -72121526\n      }\n     ],\n     \"countReadyTeams\": -66139774,\n     \"countReadyFighters\": -21183067,\n     \"countReadySeededFighters\": -97840720,\n     \"countSeededFighters\": 30366589,\n     \"countFighters\": -47834562,\n     \"isRepechageSet\": false,\n     \"countTeams\": 82382862,\n     \"countFights\": 15277207,\n     \"perfectNumber\": 31299203,\n     \"isRobin\": false,\n     \"isRobinGrouped\": true,\n     \"id\": \"voluptate labore\",\n     \"averageDuration\": -45916936,\n     \"color\": \"\",\n     \"odfCode\": \"sed quis non id sint\",\n     \"uwwRanking\": false,\n     \"blockchainIds\": \"aliquip consequat\",\n     \"sessionStartDay\": -50313744,\n     \"matAssignment\": 81658319,\n     \"fightersUpdated\": \"magna\"\n    }\n   ],\n   \"id\": \"deserunt incididunt\",\n   \"sportEventTeamId\": \"cul\",\n   \"disqualified\": true\n  }\n ]\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/person/get/:id/athletes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"person",
												"get",
												":id",
												"athletes"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get people",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/person/?filters=<string>&start=<number>&limit=<number>&paginate=<boolean>&page=<number>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"person",
								""
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								},
								{
									"key": "start",
									"value": "<number>",
									"description": "Range start"
								},
								{
									"key": "limit",
									"value": "<number>",
									"description": "Number of records to return"
								},
								{
									"key": "paginate",
									"value": "<boolean>",
									"description": "Use pagination"
								},
								{
									"key": "page",
									"value": "<number>",
									"description": "Page number"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/?filters=<string>&start=<number>&limit=<number>&paginate=<boolean>&page=<number>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										},
										{
											"key": "start",
											"value": "<number>"
										},
										{
											"key": "limit",
											"value": "<number>"
										},
										{
											"key": "paginate",
											"value": "<boolean>"
										},
										{
											"key": "page",
											"value": "<number>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns people",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/?filters=<string>&start=<number>&limit=<number>&paginate=<boolean>&page=<number>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										},
										{
											"key": "start",
											"value": "<number>"
										},
										{
											"key": "limit",
											"value": "<number>"
										},
										{
											"key": "paginate",
											"value": "<boolean>"
										},
										{
											"key": "page",
											"value": "<number>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"people\": \"schema type not provided\"\n}"
						}
					]
				},
				{
					"name": "Add a person",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"preferedName\": \"<string>\",\n    \"familyName\": \"<string>\",\n    \"givenName\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"athenaPrintId\": \"<integer>\",\n    \"customId\": \"<string>\",\n    \"odfCode\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/person/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"person",
								""
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when invalid parameters are submitted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Count people",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/person/count?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"person",
								"count"
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns people count",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/count?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"count"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"count\": 62027607.85788262\n}"
						}
					]
				},
				{
					"name": "Get a person by ODF code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"person",
								"odf",
								"get",
								":odfCode"
							],
							"variable": [
								{
									"key": "odfCode",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns person",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"preferedName\": \"dolo\",\n \"fullName\": \"laboris nulla amet\",\n \"photo\": \"adipisicing dolor ut eiusmod\",\n \"id\": \"in culpa\",\n \"familyName\": \"in u\",\n \"givenName\": \"nisi\",\n \"displayName\": \"ulla\",\n \"athenaPrintId\": 81249853,\n \"customId\": \"irure est tempor sed\",\n \"odfCode\": \"nisi Excepteur\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get UWW rank by Athena ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"person",
								"athena",
								":athenaId",
								"{{type}}-ranking",
								":audience",
								":sport",
								":maxWeight"
							],
							"variable": [
								{
									"key": "athenaId",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "audience",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sport",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "maxWeight",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns all athletes of a person",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"athena",
										":athenaId",
										"{{type}}-ranking",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "athenaId"
										},
										{
											"key": "audience"
										},
										{
											"key": "sport"
										},
										{
											"key": "maxWeight"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"nisi ad\""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"athena",
										":athenaId",
										"{{type}}-ranking",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "athenaId"
										},
										{
											"key": "audience"
										},
										{
											"key": "sport"
										},
										{
											"key": "maxWeight"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/person/athena/:athenaId/{{type}}-ranking/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"person",
										"athena",
										":athenaId",
										"{{type}}-ranking",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "athenaId"
										},
										{
											"key": "audience"
										},
										{
											"key": "sport"
										},
										{
											"key": "maxWeight"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "pool",
			"item": [
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "Get pools",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"pool",
										":sportEventId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns filtered result on Pools",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pools\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a pool",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"pool",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get pools rankings",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"pool",
										":sportEventId",
										"rankings"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns filtered result on Pools",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"rankings"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pools\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"rankings"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/rankings?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"rankings"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Print list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"pool",
										":sportEventId",
										"print"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return the PDF path to the Pool List",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/:sportEventId/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												":sportEventId",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a pool",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"pool",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns SportEventPool",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"mat\": {\n  \"name\": \"sit \",\n  \"sportEventId\": \"reprehenderit proident culpa in\",\n  \"teamsOrderByRank\": \"incididunt fugiat adipisicing in pariatur\",\n  \"id\": \"amet adipisicing cupidatat Ut\",\n  \"teams\": [\n   {\n    \"name\": \"ulla\",\n    \"alternateName\": \"cupi\",\n    \"sportEventId\": \"amet\",\n    \"countryCioName\": \"labore sint\",\n    \"countryFlag\": \"eu elit\",\n    \"countryFlagScoreboard\": \"sed in\",\n    \"fullName\": \"dolor qui\",\n    \"poolName\": \"laboris Lorem dolor\",\n    \"sportEventWeightCategories\": \"in esse in\",\n    \"completed\": 5946566,\n    \"wins\": -12881962,\n    \"losses\": -11182162,\n    \"points\": 49757676,\n    \"technicalPointsFor\": -13284317,\n    \"technicalPointsAgainst\": 21717470,\n    \"technicalPointsDiff\": 81466038,\n    \"rankingPointsFor\": 72861202,\n    \"rankingPointsAgainst\": 23923259,\n    \"rankingPointsDiff\": 97617815,\n    \"winsEasy\": 30376898,\n    \"winsSuperiority\": 10791638,\n    \"rank\": 54013304,\n    \"finalRank\": 23702701,\n    \"fightByOpponent\": \"commodo deserunt voluptate consequat\",\n    \"id\": \"nisi laborum tempor\",\n    \"countryCioId\": 12025518,\n    \"logo\": \"anim velit quis ad\",\n    \"sportEventPoolId\": \"enim in Duis eu\",\n    \"drawNumber\": 42,\n    \"continent\": \"in n\"\n   },\n   {\n    \"name\": \"dolo\",\n    \"alternateName\": \"elit\",\n    \"sportEventId\": \"irure exercitation aliquip\",\n    \"countryCioName\": \"proident exercitation adipisici\",\n    \"countryFlag\": \"occaecat ipsum qui velit cillum\",\n    \"countryFlagScoreboard\": \"mollit\",\n    \"fullName\": \"ea id sunt\",\n    \"poolName\": \"minim \",\n    \"sportEventWeightCategories\": \"eiusmod mollit cillum\",\n    \"completed\": 10886221,\n    \"wins\": 37236881,\n    \"losses\": 52464496,\n    \"points\": -94717267,\n    \"technicalPointsFor\": 85087416,\n    \"technicalPointsAgainst\": 93642083,\n    \"technicalPointsDiff\": -37962185,\n    \"rankingPointsFor\": 28011880,\n    \"rankingPointsAgainst\": -3473117,\n    \"rankingPointsDiff\": -56751609,\n    \"winsEasy\": 1376361,\n    \"winsSuperiority\": 74269574,\n    \"rank\": 23378325,\n    \"finalRank\": 34318505,\n    \"fightByOpponent\": \"enim consectetur nisi eiusmod officia\",\n    \"id\": \"aute Duis aliqua\",\n    \"countryCioId\": 76845103,\n    \"logo\": \"exercitation laboris\",\n    \"sportEventPoolId\": \"amet\",\n    \"drawNumber\": 12,\n    \"continent\": \"cupi\"\n   }\n  ]\n }\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a pool",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"pool",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a pool",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"pool",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/pool/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"pool",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ranking-point",
			"item": [
				{
					"name": "{fight Id}",
					"item": [
						{
							"name": "Get fight ranking points",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"ranking-point",
										":fightId"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns fight ranking points",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightRankingPoints\": {\n  \"fightId\": \"nulla consectetur amet sunt laborum\",\n  \"victoryType\": \"anim\",\n  \"fighterId\": \"aliquip qui Ut Duis\",\n  \"fighterFullName\": \"irure est ut nisi\",\n  \"victoryTypeId\": \"in occaecat velit\",\n  \"victoryTypeName\": \"dolore sit velit\",\n  \"victoryTypeNiceName\": \"Lorem elit proident eu\",\n  \"sportId\": \"in u\",\n  \"sportEventId\": \"reprehenderit in nulla dolor\",\n  \"id\": \"Ut deserunt ad\",\n  \"fighter\": \"dolore eu\",\n  \"second\": 51761\n },\n \"sportEvent\": \"occaecat consequat\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a fight ranking point",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"victoryType\": \"<string>\",\n    \"fighter\": \"<string>\",\n    \"second\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"ranking-point",
										":fightId"
									],
									"query": [
										{
											"key": "checked",
											"value": "<boolean>",
											"description": "Checked or not"
										}
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when create successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"query": [
												{
													"key": "checked",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"query": [
												{
													"key": "checked",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the current ranking point (if already set)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"query": [
												{
													"key": "checked",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightId\": \"aliqua ex\",\n \"victoryType\": \"eu quis laboris\",\n \"fighterId\": \"exercitation pariatur aliqua\",\n \"fighterFullName\": \"adipisicing\",\n \"victoryTypeId\": \"non exercitation nisi ex\",\n \"victoryTypeName\": \"eu\",\n \"victoryTypeNiceName\": \"reprehenderit\",\n \"sportId\": \"fugiat pariatur ullamco culpa ex\",\n \"sportEventId\": \"laboris minim voluptate qui\",\n \"id\": \"sint Duis anim\",\n \"fighter\": \"aute enim\",\n \"second\": 78529\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"query": [
												{
													"key": "checked",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/:fightId?checked=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												":fightId"
											],
											"query": [
												{
													"key": "checked",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a fight ranking point",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"ranking-point",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a fightRankingPoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightRankingPoint\": {\n  \"fightId\": \"laborum Duis veniam velit\",\n  \"victoryType\": \"est dolore cupidatat velit\",\n  \"fighterId\": \"sit\",\n  \"fighterFullName\": \"dolore minim commodo velit\",\n  \"victoryTypeId\": \"ullamco dolore anim\",\n  \"victoryTypeName\": \"irure proident laborum\",\n  \"victoryTypeNiceName\": \"tempor consequat\",\n  \"sportId\": \"in nulla nostrud sun\",\n  \"sportEventId\": \"consectetur dolor\",\n  \"id\": \"est\",\n  \"fighter\": \"Ut exercitation Excepteur\",\n  \"second\": 84313\n }\n}"
								}
							]
						},
						{
							"name": "Update a fight ranking point",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"victoryType\": \"<string>\",\n    \"fighter\": \"<string>\",\n    \"second\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"ranking-point",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when update successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a fight ranking point",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"ranking-point",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when create successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/ranking-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"ranking-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "referee",
			"item": [
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "draw",
							"item": [
								{
									"name": "Get referee numbers remaining",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"draw",
												""
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														""
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														""
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Remaining numbers for draw",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														""
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"numbers\": [\n  -68603217,\n  9929832\n ]\n}"
										}
									]
								},
								{
									"name": "Get referee numbers remaining",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"draw",
												":refereeId"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "refereeId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Remaining numbers for draw",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														":refereeId"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "refereeId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"numbers\": [\n  -68603217,\n  9929832\n ]\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														":refereeId"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "refereeId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/draw/:refereeId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														":sportEventId",
														"draw",
														":refereeId"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														},
														{
															"key": "refereeId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get referees",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEventId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns referees",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"referees\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a referee",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\",\n    \"number\": \"<integer>\",\n    \"refereeLevel\": \"<string>\",\n    \"delegate\": \"<boolean>\",\n    \"matchairman\": \"<boolean>\",\n    \"referee\": \"<boolean>\",\n    \"deactivated\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Rotate referees across mats",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEventId",
										"rotatemat"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"rotatemat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"rotatemat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/rotatemat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"rotatemat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get referee numbers remaining",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEventId",
										"print"
									],
									"query": [
										{
											"key": "matId",
											"value": "<string>",
											"description": "Filter for Mat if provided"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"print"
											],
											"query": [
												{
													"key": "matId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"print"
											],
											"query": [
												{
													"key": "matId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEventId/print?matId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												":sportEventId",
												"print"
											],
											"query": [
												{
													"key": "matId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "team",
							"item": [
								{
									"name": "Set a sport team",
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id",
												"team"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"sportEventTeamId\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Remove sport team",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id",
												"team",
												"unset"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/team/unset",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"referee",
														"get",
														":id",
														"team",
														"unset"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get a referee",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns a referee",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"referee\": {\n  \"sportEventId\": \"proident\",\n  \"personId\": \"labore anim\",\n  \"sportEventTeamId\": \"consectetur enim laborum anim adipisicing\",\n  \"matName\": \"est Excepteur\",\n  \"origins\": \"sit laborum\",\n  \"languages\": \"id dolore Duis eu\",\n  \"familyName\": \"voluptate cillum\",\n  \"givenName\": \"ea nostrud laboris velit\",\n  \"fullName\": \"pariatur labore i\",\n  \"displayName\": \"ut nisi\",\n  \"teamFullName\": \"deserunt elit ut\",\n  \"teamName\": \"commodo ullamco n\",\n  \"teamAlternateName\": \"Lorem in sunt irure\",\n  \"teamCountryFlag\": \"sint dolore adipisicing velit\",\n  \"full\": \"proident cillum amet\",\n  \"id\": \"culpa est\",\n  \"number\": 3834,\n  \"refereeLevel\": \"labo\",\n  \"refereeGroup\": \"s\",\n  \"delegate\": true,\n  \"matchairman\": false,\n  \"referee\": true,\n  \"sportEventMatId\": \"nu\",\n  \"deactivated\": true\n }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a referee",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personId\": \"<string>\",\n    \"sportEventTeamId\": \"<string>\",\n    \"number\": \"<integer>\",\n    \"refereeLevel\": \"<string>\",\n    \"delegate\": \"<boolean>\",\n    \"matchairman\": \"<boolean>\",\n    \"referee\": \"<boolean>\",\n    \"deactivated\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a referee",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set Mat for referee",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"matId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										"get",
										":id",
										"mat"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"matId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id",
												"mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"matId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id",
												"mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns SportEventMat",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"matId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/referee/get/:id/mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"referee",
												"get",
												":id",
												"mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"amet\",\n \"sportEventId\": \"consectetur reprehenderit laboris\",\n \"id\": \"do in\",\n \"streaming\": \"laboris voluptat\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get a referee by Competition and Person",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"referee",
								":sportEvent",
								"get",
								":person"
							],
							"variable": [
								{
									"key": "sportEvent",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "person",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns a referee",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEvent",
										"get",
										":person"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEvent"
										},
										{
											"key": "person"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"sportEventId\": \"in qui veniam nisi\",\n \"personId\": \"dolore dolor\",\n \"sportEventTeamId\": \"aliqua cupidatat ullamco\",\n \"matName\": \"elit ad Ut\",\n \"origins\": \"Excepteur ut culpa\",\n \"languages\": \"in dolore magna sint\",\n \"familyName\": \"esse \",\n \"givenName\": \"pariatur consequat quis ipsum\",\n \"fullName\": \"labore dolore dolore sed\",\n \"displayName\": \"aute sunt est in\",\n \"teamFullName\": \"adipisicing pariatur eiusmod\",\n \"teamName\": \"id\",\n \"teamAlternateName\": \"in\",\n \"teamCountryFlag\": \"labo\",\n \"full\": \"dolor Duis\",\n \"id\": \"incididunt fugiat exercitation quis\",\n \"number\": 8449,\n \"refereeLevel\": \"non \",\n \"refereeGroup\": \"e\",\n \"delegate\": true,\n \"matchairman\": true,\n \"referee\": false,\n \"sportEventMatId\": \"nostrud nulla\",\n \"deactivated\": true\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEvent",
										"get",
										":person"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEvent"
										},
										{
											"key": "person"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Referee not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/referee/:sportEvent/get/:person",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"referee",
										":sportEvent",
										"get",
										":person"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEvent"
										},
										{
											"key": "person"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "remote",
			"item": [
				{
					"name": "get/{remote}",
					"item": [
						{
							"name": "Get a Remote",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										"get",
										":remote"
									],
									"variable": [
										{
											"key": "remote",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns remotes",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": -90136716,\n \"apiUrl\": \"esse\",\n \"clientId\": \"minim in\",\n \"clientSecret\": \"sit cupidatat\",\n \"apiKey\": \"nulla et sint\",\n \"available\": false,\n \"paused\": false,\n \"timeout\": 36764603\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a Remote",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"apiUrl\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"clientSecret\": \"<string>\",\n    \"apiKey\": \"<string>\",\n    \"available\": \"<boolean>\",\n    \"paused\": \"<boolean>\",\n    \"timeout\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										"get",
										":remote"
									],
									"variable": [
										{
											"key": "remote",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a Remote",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										"get",
										":remote"
									],
									"variable": [
										{
											"key": "remote",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get all SportEvent associated with a Remote",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote/athletes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										"get",
										":remote",
										"athletes"
									],
									"variable": [
										{
											"key": "remote",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote/athletes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote",
												"athletes"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns SportEvents",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/get/:remote/athletes",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												"get",
												":remote",
												"athletes"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n {\n  \"country\": {\n   \"flag\": \"est voluptate eu\",\n   \"id\": 37087106,\n   \"name\": \"sunt veniam\",\n   \"alternateName\": \"commodo aliquip eiusmod Excepteur esse\",\n   \"isoCode\": \"do sed consequa\",\n   \"isoName\": \"voluptate consectetur Duis\",\n   \"continent\": \"cons\",\n   \"officialLanguages\": \"sed sunt consequat ex\"\n  },\n  \"name\": \"sunt\",\n  \"startDate\": \"consequat\",\n  \"endDate\": \"cillum esse ea sunt\",\n  \"rankingType\": \"elit id ullamco\",\n  \"tournamentType\": \"enim eiusmod eu nulla\",\n  \"sessionType\": \"Excepteur consectetur\",\n  \"eventType\": \"nostrud eu dolore\",\n  \"continent\": \"elit in anim aliqua incididunt\",\n  \"scoreboardType\": \"labore sed aliquip\",\n  \"timezone\": \"do ad aute in\",\n  \"fullName\": \"voluptate in irure laboris\",\n  \"date\": \"deserunt sed\",\n  \"address\": \"eu exercitation Lorem\",\n  \"fullAddress\": \"occaecat ad\",\n  \"isIndividualEvent\": false,\n  \"isIndividualLegacyEvent\": true,\n  \"isTeamEvent\": false,\n  \"isSinglebracketTournament\": false,\n  \"isDoublebracketTournament\": true,\n  \"isRoundrobinTournament\": true,\n  \"isUwwRankingEvent\": true,\n  \"isBeachWrestlingTournament\": false,\n  \"isWorldChampionships\": true,\n  \"shorterNames\": false,\n  \"timezoneTimeOffset\": 40306693,\n  \"isSyncEnabled\": false,\n  \"countReferees\": -40552391,\n  \"countFights\": -54145886,\n  \"countWeightCategories\": 41111599,\n  \"sports\": \"consectetur\",\n  \"countWeightCategoriesBySport\": \"tempor veniam labore id\",\n  \"audiences\": \"ex\",\n  \"countTeams\": 42531009,\n  \"countSessions\": 23424348,\n  \"countMats\": 20510846,\n  \"countPools\": 49579384,\n  \"countryIsoCode\": \"magna adipisicing dolore reprehenderit sed\",\n  \"logo\": \"sed minim Duis sit\",\n  \"athlete1Color\": \"id eu anim dolore\",\n  \"athlete1TextColor\": \"dolore c\",\n  \"athlete2Color\": \"aliquip Ut anim nisi culpa\",\n  \"athlete2TextColor\": \"occaecat eiusmod\",\n  \"id\": \"adipisicing dolor reprehenderit\",\n  \"addressLocality\": \"veli\",\n  \"uwwRankingType\": \"velit nisi ullamco\",\n  \"image\": \"labore ea officia cillum\",\n  \"restTime\": 63500334,\n  \"countdown\": true,\n  \"lightScoresheet\": false,\n  \"copyScoresheet\": 46528131,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": false,\n  \"visible\": false,\n  \"localClient\": {\n   \"fullname\": \"in officia incididunt non\",\n   \"id\": \"aliqua nisi veniam minim\",\n   \"email\": \"fugiat sed\",\n   \"name\": \"sint\",\n   \"organization\": \"veli\",\n   \"version\": \"cupidatat incididunt\",\n   \"remoteVersion\": \"id minim ad\",\n   \"maintenance\": true,\n   \"trusted\": false,\n   \"created\": \"aliqua ut ullamco\",\n   \"updated\": \"reprehenderit culpa eu\"\n  },\n  \"remote\": {\n   \"id\": 80103758,\n   \"apiUrl\": \"enim est ut aliqua\",\n   \"clientId\": \"in velit p\",\n   \"clientSecret\": \"ullamco mollit Ut\",\n   \"apiKey\": \"ad labore voluptate\",\n   \"available\": true,\n   \"paused\": false,\n   \"timeout\": -20198358\n  },\n  \"remoteStatus\": \"ut aliquip\",\n  \"mats\": [\n   {\n    \"name\": \"labo\",\n    \"sportEventId\": \"Lorem quis esse pariatur ex\",\n    \"id\": \"velit pariatur esse irure\",\n    \"streaming\": \"dolor sunt\"\n   },\n   {\n    \"name\": \"culp\",\n    \"sportEventId\": \"sint aliqua eiusmod consectetur\",\n    \"id\": \"dolor ex\",\n    \"streaming\": \"Duis adipisicing\"\n   }\n  ],\n  \"odfCode\": \"minim eiusmod ut\"\n },\n {\n  \"country\": {\n   \"flag\": \"dolore do deserunt\",\n   \"id\": 39275251,\n   \"name\": \"dolore ad aute sunt\",\n   \"alternateName\": \"occaecat ex ullamco ad\",\n   \"isoCode\": \"dolore nisi\",\n   \"isoName\": \"adipisicing\",\n   \"continent\": \"dolo\",\n   \"officialLanguages\": \"ea ut nulla voluptate ipsum\"\n  },\n  \"name\": \"nost\",\n  \"startDate\": \"occaecat irure cupidatat eu fugiat\",\n  \"endDate\": \"laborum esse\",\n  \"rankingType\": \"pariatur veniam ex\",\n  \"tournamentType\": \"proident minim elit est ut\",\n  \"sessionType\": \"consectetur\",\n  \"eventType\": \"sint do\",\n  \"continent\": \"deserun\",\n  \"scoreboardType\": \"id pariatur Lorem Duis laboru\",\n  \"timezone\": \"sint deserunt veniam cupidatat\",\n  \"fullName\": \"id\",\n  \"date\": \"est ex eu occ\",\n  \"address\": \"laborum sed\",\n  \"fullAddress\": \"in qui sit dolor\",\n  \"isIndividualEvent\": true,\n  \"isIndividualLegacyEvent\": true,\n  \"isTeamEvent\": true,\n  \"isSinglebracketTournament\": false,\n  \"isDoublebracketTournament\": false,\n  \"isRoundrobinTournament\": false,\n  \"isUwwRankingEvent\": true,\n  \"isBeachWrestlingTournament\": true,\n  \"isWorldChampionships\": true,\n  \"shorterNames\": false,\n  \"timezoneTimeOffset\": -6426118,\n  \"isSyncEnabled\": true,\n  \"countReferees\": -4152727,\n  \"countFights\": 29082556,\n  \"countWeightCategories\": -19568369,\n  \"sports\": \"mollit\",\n  \"countWeightCategoriesBySport\": \"Duis est\",\n  \"audiences\": \"minim \",\n  \"countTeams\": 71344600,\n  \"countSessions\": -51943600,\n  \"countMats\": -21218079,\n  \"countPools\": 52192349,\n  \"countryIsoCode\": \"commodo\",\n  \"logo\": \"sint ut sunt culpa nostrud\",\n  \"athlete1Color\": \"in\",\n  \"athlete1TextColor\": \"ut\",\n  \"athlete2Color\": \"cillum labore consectetur\",\n  \"athlete2TextColor\": \"cupidatat est minim ipsum\",\n  \"id\": \"est ea incididunt officia\",\n  \"addressLocality\": \"cill\",\n  \"uwwRankingType\": \"laborum enim\",\n  \"image\": \"non\",\n  \"restTime\": 42506374,\n  \"countdown\": false,\n  \"lightScoresheet\": true,\n  \"copyScoresheet\": -63264506,\n  \"bulkScoresheet\": true,\n  \"matAssignment\": true,\n  \"visible\": false,\n  \"localClient\": {\n   \"fullname\": \"fugiat irure\",\n   \"id\": \"ut ut sunt\",\n   \"email\": \"commodo consequat ut dolore\",\n   \"name\": \"ea U\",\n   \"organization\": \"dolo\",\n   \"version\": \"amet veniam\",\n   \"remoteVersion\": \"quis magna proident\",\n   \"maintenance\": false,\n   \"trusted\": true,\n   \"created\": \"dolore incididunt\",\n   \"updated\": \"nisi et\"\n  },\n  \"remote\": {\n   \"id\": 85040302,\n   \"apiUrl\": \"cillum esse commodo voluptate\",\n   \"clientId\": \"labore\",\n   \"clientSecret\": \"ut Ut exercitation veniam\",\n   \"apiKey\": \"officia veniam magna proident\",\n   \"available\": false,\n   \"paused\": false,\n   \"timeout\": 31682480\n  },\n  \"remoteStatus\": \"do culpa\",\n  \"mats\": [\n   {\n    \"name\": \"aliq\",\n    \"sportEventId\": \"est\",\n    \"id\": \"in\",\n    \"streaming\": \"culpa nulla\"\n   },\n   {\n    \"name\": \"aliq\",\n    \"sportEventId\": \"reprehenderit ipsum sunt\",\n    \"id\": \"veniam do\",\n    \"streaming\": \"anim in laborum consequat\"\n   }\n  ],\n  \"odfCode\": \"tempor fugiat\"\n }\n]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "{remote}",
					"item": [
						{
							"name": "Pause a Remote",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										":remote",
										"pause"
									],
									"variable": [
										{
											"key": "remote",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"pause"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the remote",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"pause"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": -90136716,\n \"apiUrl\": \"esse\",\n \"clientId\": \"minim in\",\n \"clientSecret\": \"sit cupidatat\",\n \"apiKey\": \"nulla et sint\",\n \"available\": false,\n \"paused\": false,\n \"timeout\": 36764603\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/pause",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"pause"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Resume a Remote",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										":remote",
										"resume"
									],
									"variable": [
										{
											"key": "remote",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"resume"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"resume"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the remote",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/remote/:remote/resume",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"remote",
												":remote",
												"resume"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "remote"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": -90136716,\n \"apiUrl\": \"esse\",\n \"clientId\": \"minim in\",\n \"clientSecret\": \"sit cupidatat\",\n \"apiKey\": \"nulla et sint\",\n \"available\": false,\n \"paused\": false,\n \"timeout\": 36764603\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get all remotes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/remote/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"remote",
								""
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns remotes",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": 36417871,\n  \"apiUrl\": \"cillum\",\n  \"available\": false,\n  \"paused\": false,\n  \"timeout\": 91468793\n },\n {\n  \"id\": 63571355,\n  \"apiUrl\": \"laborum mollit voluptate\",\n  \"available\": false,\n  \"paused\": false,\n  \"timeout\": -84916085\n }\n]"
						}
					]
				},
				{
					"name": "Add a Remote",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"apiUrl\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"clientSecret\": \"<string>\",\n    \"apiKey\": \"<string>\",\n    \"available\": \"<boolean>\",\n    \"paused\": \"<boolean>\",\n    \"timeout\": \"<integer>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/remote/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"remote",
								""
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when invalid parameters are submitted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/remote/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"remote",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "round",
			"item": [
				{
					"name": "{fight Id}",
					"item": [
						{
							"name": "Get rounds of a fight",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"round",
										":fightId"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns rounds",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"rounds\": \"schema type not provided\",\n \"sportEventId\": \"amet dolor\"\n}"
								}
							]
						},
						{
							"name": "Add a round",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"number\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"round",
										":fightId"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a round",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"round",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a round",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"round\": {\n  \"number\": 553,\n  \"fightId\": \"adipisicing quis anim eiusmod\",\n  \"sportId\": \"pariatur magna dolor\",\n  \"sportEventId\": \"minim non commo\",\n  \"id\": \"ad nisi\"\n }\n}"
								}
							]
						},
						{
							"name": "Update a round",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"number\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"round",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a round",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"round",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/round/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"round",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "scoreboard",
			"item": [
				{
					"name": "sport-event",
					"item": [
						{
							"name": "Get events",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"sport-event"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns RoundTechnicalPoints",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"events\": \"schema type not provided\",\n \"time\": \"deserunt reprehenderit nulla e\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event"
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get current score for team match",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"sport-event",
										"get",
										":sportEvent",
										"team-score",
										":teamFightId"
									],
									"variable": [
										{
											"key": "sportEvent",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "teamFightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns Team fight status",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event",
												"get",
												":sportEvent",
												"team-score",
												":teamFightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEvent"
												},
												{
													"key": "teamFightId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"winsTeam1\": 89783223,\n \"winsTeam2\": -63569624,\n \"winnerTeamId\": \"mollit\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event",
												"get",
												":sportEvent",
												"team-score",
												":teamFightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEvent"
												},
												{
													"key": "teamFightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/sport-event/get/:sportEvent/team-score/:teamFightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"sport-event",
												"get",
												":sportEvent",
												"team-score",
												":teamFightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEvent"
												},
												{
													"key": "teamFightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "fight-referee/{fight Id}",
					"item": [
						{
							"name": "Get Fight Referee",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fight-referee",
										":fightId"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns RoundTechnicalPoints",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightReferees\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Fight Referee",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fight-referee",
										":fightId",
										":refereeRole"
									],
									"variable": [
										{
											"key": "fightId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "refereeRole",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId",
												":refereeRole"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												},
												{
													"key": "refereeRole"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns RoundTechnicalPoints",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId",
												":refereeRole"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												},
												{
													"key": "refereeRole"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"fightReferees\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight-referee/:fightId/:refereeRole",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"scoreboard",
												"fight-referee",
												":fightId",
												":refereeRole"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "fightId"
												},
												{
													"key": "refereeRole"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Fight Referees",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"scoreboard",
								"referee",
								":sportEventId"
							],
							"variable": [
								{
									"key": "sportEventId",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"referee",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"referee",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns RoundTechnicalPoints",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/referee/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"referee",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"referees\": \"schema type not provided\"\n}"
						}
					]
				},
				{
					"name": "Get mats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"scoreboard",
								"mat",
								":sportEventId"
							],
							"variable": [
								{
									"key": "sportEventId",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"mat",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns Mats defined under a SportEvent",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"mat",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"mats\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/mat/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"mat",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get upcoming matches by mats",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"scoreboard",
								"fight",
								"open",
								":sportEventMat"
							],
							"variable": [
								{
									"key": "sportEventMat",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fight",
										"open",
										":sportEventMat"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventMat"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fight",
										"open",
										":sportEventMat"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventMat"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns Mats defined under a SportEvent",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fight/open/:sportEventMat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fight",
										"open",
										":sportEventMat"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventMat"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"fights\": \"schema type not provided\"\n}"
						}
					]
				},
				{
					"name": "Get weightCategories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"scoreboard",
								"weight-category",
								":sportEventId"
							],
							"variable": [
								{
									"key": "sportEventId",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"weight-category",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns Weight Categories of a SportEvent",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"weight-category",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"weightCategories\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/weight-category/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"weight-category",
										":sportEventId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get fighters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"scoreboard",
								"fighter",
								":sportEventWeightCategoryId"
							],
							"variable": [
								{
									"key": "sportEventWeightCategoryId",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns fighters of a Weight Category",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fighter",
										":sportEventWeightCategoryId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventWeightCategoryId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"weightCategories\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fighter",
										":sportEventWeightCategoryId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventWeightCategoryId"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/scoreboard/fighter/:sportEventWeightCategoryId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"scoreboard",
										"fighter",
										":sportEventWeightCategoryId"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "sportEventWeightCategoryId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "setup/country",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "Get countryCio",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"setup",
										"country",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the CountryCio",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"country\": {\n  \"flag\": \"dolor Ut minim\",\n  \"id\": 79747682,\n  \"name\": \"esse voluptate nulla exercitation enim\",\n  \"alternateName\": \"est in in dolor\",\n  \"isoCode\": \"mollit dolor\",\n  \"isoName\": \"tempor fugiat nostrud\",\n  \"continent\": \"repr\",\n  \"officialLanguages\": \"dolor sed ipsum eli\"\n }\n}"
								}
							]
						},
						{
							"name": "Get a country by Code",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"setup",
										"country",
										"get",
										"code",
										":alternateName"
									],
									"variable": [
										{
											"key": "alternateName",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"code",
												":alternateName"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "alternateName"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the Country",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"code",
												":alternateName"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "alternateName"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"flag\": \"Ut in\",\n \"id\": -95276115,\n \"name\": \"dolore a\",\n \"alternateName\": \"in labore\",\n \"isoCode\": \"irure aliqua in\",\n \"isoName\": \"adipisicing\",\n \"continent\": \"eu e\",\n \"officialLanguages\": \"dolore adipisicing aliqua anim sit\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/code/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"code",
												":alternateName"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "alternateName"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a country by ISOCode",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"setup",
										"country",
										"get",
										"isoCode",
										":isoCode"
									],
									"variable": [
										{
											"key": "isoCode",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"isoCode",
												":isoCode"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "isoCode"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns the Country",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"isoCode",
												":isoCode"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "isoCode"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"flag\": \"Ut in\",\n \"id\": -95276115,\n \"name\": \"dolore a\",\n \"alternateName\": \"in labore\",\n \"isoCode\": \"irure aliqua in\",\n \"isoName\": \"adipisicing\",\n \"continent\": \"eu e\",\n \"officialLanguages\": \"dolore adipisicing aliqua anim sit\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/setup/country/get/isoCode/:isoCode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"setup",
												"country",
												"get",
												"isoCode",
												":isoCode"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "isoCode"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get All countryCios",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/setup/country/?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"setup",
								"country",
								""
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns all CountryCio's",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/setup/country/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"setup",
										"country",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"countries\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/setup/country/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"setup",
										"country",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "session",
			"item": [
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "Get sessions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns all Sessions of a SportEvent",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sessions\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get current (or next) session",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										":sportEventId",
										"current"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"current"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a SportEventSession",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"current"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"session\": {\n  \"name\": \"fugi\",\n  \"sportEventId\": \"est in et reprehenderit\",\n  \"countFightMats\": 46005835,\n  \"timezone\": \"non est ipsum deserunt\",\n  \"fullName\": \"culpa amet fugiat voluptate\",\n  \"hasFightsNotCanceled\": true,\n  \"dayNumber\": 76356836,\n  \"id\": \"occaecat voluptate in laborum\",\n  \"startDate\": \"do ad officia elit sed\",\n  \"endDate\": \"dolor\",\n  \"weight\": 955\n }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/current",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"current"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get next session",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										":sportEventId",
										"next"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"next"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a SportEventSession",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"next"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sessions\": {\n  \"name\": \"adip\",\n  \"sportEventId\": \"amet quis nisi aute\",\n  \"countFightMats\": 81891357,\n  \"timezone\": \"incididunt\",\n  \"fullName\": \"ea tempor\",\n  \"hasFightsNotCanceled\": true,\n  \"dayNumber\": 934840,\n  \"id\": \"dolore commodo laborum ex\",\n  \"startDate\": \"ex nisi reprehenderit ullamco\",\n  \"endDate\": \"commodo eu\",\n  \"weight\": 599\n }\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/:sportEventId/next",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												":sportEventId",
												"next"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a session",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a SportEventSession",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"session\": {\n  \"name\": \"fugi\",\n  \"sportEventId\": \"est in et reprehenderit\",\n  \"countFightMats\": 46005835,\n  \"timezone\": \"non est ipsum deserunt\",\n  \"fullName\": \"culpa amet fugiat voluptate\",\n  \"hasFightsNotCanceled\": true,\n  \"dayNumber\": 76356836,\n  \"id\": \"occaecat voluptate in laborum\",\n  \"startDate\": \"do ad officia elit sed\",\n  \"endDate\": \"dolor\",\n  \"weight\": 955\n }\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a session",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a session",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Print complete results",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"session",
										"get",
										":id",
										"print",
										"complete-results"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id",
												"print",
												"complete-results"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id",
												"print",
												"complete-results"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return the PDF path to the Complete Results",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/session/get/:id/print/complete-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"session",
												"get",
												":id",
												"print",
												"complete-results"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "sport-event",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "print",
									"item": [
										{
											"name": "Print scoresheets",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=<string>&with-referees=<boolean>&template=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"print"
													],
													"query": [
														{
															"key": "range",
															"value": "<string>",
															"description": "Fight number range to print scroresheets for"
														},
														{
															"key": "with-referees",
															"value": "<boolean>",
															"description": "Print with referee information"
														},
														{
															"key": "template",
															"value": "<string>",
															"description": "Scoresheet template"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the number of scoresheets printed into 'scoresheet-all.pdf' file",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=<string>&with-referees=<boolean>&template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "range",
																	"value": "<string>"
																},
																{
																	"key": "with-referees",
																	"value": "<boolean>"
																},
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"count\": 10429566\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=<string>&with-referees=<boolean>&template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "range",
																	"value": "<string>"
																},
																{
																	"key": "with-referees",
																	"value": "<boolean>"
																},
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print?range=<string>&with-referees=<boolean>&template=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print"
															],
															"query": [
																{
																	"key": "range",
																	"value": "<string>"
																},
																{
																	"key": "with-referees",
																	"value": "<boolean>"
																},
																{
																	"key": "template",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print scoresheets for a SportEventSession",
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"print",
														"session",
														":sportEventSessionId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														},
														{
															"key": "sportEventSessionId",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"session",
																":sportEventSessionId"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																},
																{
																	"key": "sportEventSessionId"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Return the number of scoresheets printed into 'scoresheet-session-{sportEventSessionId}.pdf' file",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"session",
																":sportEventSessionId"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																},
																{
																	"key": "sportEventSessionId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"count\": 10429566\n}"
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "PATCH",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/session/:sportEventSessionId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"session",
																":sportEventSessionId"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																},
																{
																	"key": "sportEventSessionId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print start list",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=<string>&sportEventMatId=<number>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"print",
														"start-list"
													],
													"query": [
														{
															"key": "sportEventSessionId",
															"value": "<string>",
															"description": "Filter for SportEventSession"
														},
														{
															"key": "sportEventMatId",
															"value": "<number>",
															"description": "Filter for SportEventMat"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=<string>&sportEventMatId=<number>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"start-list"
															],
															"query": [
																{
																	"key": "sportEventSessionId",
																	"value": "<string>"
																},
																{
																	"key": "sportEventMatId",
																	"value": "<number>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Return the PDF path to the Start List",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=<string>&sportEventMatId=<number>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"start-list"
															],
															"query": [
																{
																	"key": "sportEventSessionId",
																	"value": "<string>"
																},
																{
																	"key": "sportEventMatId",
																	"value": "<number>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/start-list?sportEventSessionId=<string>&sportEventMatId=<number>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"start-list"
															],
															"query": [
																{
																	"key": "sportEventSessionId",
																	"value": "<string>"
																},
																{
																	"key": "sportEventMatId",
																	"value": "<number>"
																}
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print cover sheet",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"print",
														"cover"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"cover"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"cover"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Return the PDF path to the Cover page",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/cover",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"cover"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												}
											]
										},
										{
											"name": "Print Final Ranking",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"print",
														"final-rankings"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path to the Final Ranking",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-rankings"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-rankings"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-rankings",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-rankings"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print Final Book",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"print",
														"final-book"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-book"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Return the PDF path to the Final Book",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-book"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/print/final-book",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"sport-event",
																"get",
																":id",
																"print",
																"final-book"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get an event",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns an event",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"country\": {\n  \"flag\": \"Duis ut\",\n  \"id\": 61047202,\n  \"name\": \"nostrud occaecat\",\n  \"alternateName\": \"est nulla consectetur\",\n  \"isoCode\": \"sunt cillum\",\n  \"isoName\": \"aliquip in mag\",\n  \"continent\": \"anim\",\n  \"officialLanguages\": \"Ut commodo a\"\n },\n \"name\": \"cill\",\n \"startDate\": \"nostrud in minim ut\",\n \"endDate\": \"non consectetur ut ea aliqua\",\n \"rankingType\": \"commodo laboris non dolor\",\n \"tournamentType\": \"elit ullamco\",\n \"sessionType\": \"cill\",\n \"eventType\": \"occaecat Lorem sed ad mollit\",\n \"continent\": \"qui ut\",\n \"scoreboardType\": \"Excepteur\",\n \"timezone\": \"in aliqua dolore eu\",\n \"fullName\": \"aute dolor consequat esse\",\n \"date\": \"mollit\",\n \"address\": \"enim adipisicing sed aliquip fugiat\",\n \"fullAddress\": \"dolore laboris incididunt velit\",\n \"isIndividualEvent\": true,\n \"isIndividualLegacyEvent\": true,\n \"isTeamEvent\": true,\n \"isSinglebracketTournament\": false,\n \"isDoublebracketTournament\": true,\n \"isRoundrobinTournament\": false,\n \"isUwwRankingEvent\": false,\n \"isBeachWrestlingTournament\": true,\n \"isWorldChampionships\": true,\n \"shorterNames\": true,\n \"timezoneTimeOffset\": 5983781,\n \"isSyncEnabled\": true,\n \"countReferees\": 33779105,\n \"countFights\": 47009199,\n \"countWeightCategories\": -31886903,\n \"sports\": \"sint in nostrud\",\n \"countWeightCategoriesBySport\": \"elit veniam\",\n \"audiences\": \"ut do\",\n \"countTeams\": -61601491,\n \"countSessions\": -85824020,\n \"countMats\": 88189494,\n \"countPools\": 23376708,\n \"countryIsoCode\": \"dolore est\",\n \"logo\": \"fugiat\",\n \"athlete1Color\": \"ut dolore incididunt exercitation labore\",\n \"athlete1TextColor\": \"elit do in incididunt\",\n \"athlete2Color\": \"amet elit\",\n \"athlete2TextColor\": \"occaecat veniam Ut\",\n \"id\": \"anim Excepteur\",\n \"addressLocality\": \"comm\",\n \"uwwRankingType\": \"sed cillum nostrud\",\n \"image\": \"dolore\",\n \"restTime\": -70247889,\n \"countdown\": true,\n \"lightScoresheet\": true,\n \"copyScoresheet\": 90711072,\n \"bulkScoresheet\": false,\n \"matAssignment\": true,\n \"visible\": false,\n \"localClient\": {\n  \"fullname\": \"laborum ea\",\n  \"id\": \"quis \",\n  \"email\": \"sint quis\",\n  \"name\": \"offi\",\n  \"organization\": \"cons\",\n  \"version\": \"ex sit aliquip\",\n  \"remoteVersion\": \"eiu\",\n  \"maintenance\": false,\n  \"trusted\": false,\n  \"created\": \"in magna co\",\n  \"updated\": \"Lorem magna veniam\"\n },\n \"remote\": {\n  \"id\": -46811,\n  \"apiUrl\": \"dolore culpa sit aliquip\",\n  \"clientId\": \"nostrud dolore reprehenderit Ut\",\n  \"clientSecret\": \"minim qui\",\n  \"apiKey\": \"mollit dolor amet reprehenderit\",\n  \"available\": true,\n  \"paused\": false,\n  \"timeout\": 36334225\n },\n \"remoteStatus\": \"in \",\n \"mats\": [\n  {\n   \"name\": \"elit\",\n   \"sportEventId\": \"n\",\n   \"id\": \"commodo ea\",\n   \"streaming\": \"sunt\"\n  },\n  {\n   \"name\": \"cons\",\n   \"sportEventId\": \"non in ut\",\n   \"id\": \"nostrud irure c\",\n   \"streaming\": \"laborum reprehenderit elit pariatur et\"\n  }\n ],\n \"odfCode\": \"sed proident ut\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update an event",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"addressLocality\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"addressLocality\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"addressLocality\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"addressLocality\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"addressLocality\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete an event",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns when successful",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": true\n}"
										},
										{
											"name": "Returned when somehting went wrong",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get an event (light)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"light"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"light"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"light"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns an event",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/light",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"light"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"event\": \"schema type not provided\"\n}"
										}
									]
								},
								{
									"name": "Get Sync authorized status",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/syncable/:localClient",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"syncable",
												":localClient"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "localClient",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/syncable/:localClient",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"syncable",
														":localClient"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														},
														{
															"key": "localClient"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns the SportEvent's sync status",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/syncable/:localClient",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"syncable",
														":localClient"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														},
														{
															"key": "localClient"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": true\n}"
										}
									]
								},
								{
									"name": "Stop synchronization (break link between master and client)",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/stop-sync",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"stop-sync"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/stop-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"stop-sync"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when update is successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/stop-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"stop-sync"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"status\": true\n}"
										}
									]
								},
								{
									"name": "Get free draw numbers",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/draw/:entityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"draw",
												":entityId"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												},
												{
													"key": "entityId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/draw/:entityId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"draw",
														":entityId"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														},
														{
															"key": "entityId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns free draw numbers",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/draw/:entityId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"draw",
														":entityId"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														},
														{
															"key": "entityId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"numbers\": [\n  -68603217,\n  9929832\n ]\n}"
										}
									]
								},
								{
									"name": "Secretariat Check",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/secretariat-check",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"secretariat-check"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/secretariat-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"secretariat-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns SportEvent status",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/secretariat-check",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"secretariat-check"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"scoresheetCount\": -45135895,\n \"mactchesToCheck\": \"schema type not provided\",\n \"matchesInProgress\": \"schema type not provided\",\n \"weightCategories\": \"schema type not provided\",\n \"sqlQueues\": -69286997,\n \"syncStatus\": \"enim irure\"\n}"
										}
									]
								},
								{
									"name": "Scoresheet count",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/scoresheet/count",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"scoresheet",
												"count"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/scoresheet/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"scoresheet",
														"count"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns number of scoresheets to print",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/scoresheet/count",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"scoresheet",
														"count"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"count\": 10429566\n}"
										}
									]
								},
								{
									"name": "Get matches to check",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/check-matches",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"check-matches"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/check-matches",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"check-matches"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns list of matches to be checked",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/check-matches",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"check-matches"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"fights\": \"schema type not provided\"\n}"
										}
									]
								},
								{
									"name": "Get matches in in-progress status",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/matches-inprogress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"matches-inprogress"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returns list of matches having their status as 'in-progress'",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/matches-inprogress",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"matches-inprogress"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"fights\": \"schema type not provided\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/matches-inprogress",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"matches-inprogress"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Get fights for Start list",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":id",
												"start-list"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"start-list"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"start-list"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"sportEvent\": \"anim dolor\",\n \"fightMats\": [\n  {\n   \"sessionName\": \"deserunt dolor eiusmod proident\",\n   \"sessionStartDate\": \"ad esse pariatur exercitation\",\n   \"nextStartDate\": \"et cupidatat\",\n   \"matName\": \"proident\",\n   \"fights\": \"schema type not provided\"\n  },\n  {\n   \"sessionName\": \"fugiat mollit\",\n   \"sessionStartDate\": \"anim ipsum\",\n   \"nextStartDate\": \"Lorem Excepteur\",\n   \"matName\": \"Excepteur sit do deserunt consequat\",\n   \"fights\": \"schema type not provided\"\n  }\n ]\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:id/start-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":id",
														"start-list"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "{sport Event}",
							"item": [
								{
									"name": "Dump a Sport Event",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":sportEvent",
												"dump-event"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"dump-event"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEvent"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns the event's serialized content",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"dump-event"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEvent"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"sport_event\": \"commodo\",\n \"sport_event_mat\": \"id Excepteur deserunt\",\n \"sport_event_session\": \"non dolore sit dolor\",\n \"fight_mat\": \"ad labore incididunt commodo\",\n \"sport_event_weight_category\": \"eiusmod labore\",\n \"person\": \"cillum exercitation dolor sed occaecat\",\n \"sport_event_team\": \"incididunt exercitation ullamco dolore\",\n \"athlete\": \"tempor consequat nostrud cupidatat aute\",\n \"fighter\": \"aliquip\",\n \"referee\": \"consectetur irure esse ipsum\",\n \"sport_event_pool\": \"aliqua\",\n \"fight\": \"in sit aliqua adipisicing\",\n \"fight_referee\": \"do dolor exerci\",\n \"fight_ranking_point\": \"dolore\",\n \"round\": \"in irure ut\",\n \"round_technical_point\": \"enim tempor velit eu\",\n \"activity\": \"sunt velit\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/dump-event",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"dump-event"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEvent"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Trigger a Remote sync action of an Event",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":sportEvent",
												"remote-sync"
											],
											"variable": [
												{
													"key": "sportEvent",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"remote-sync"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEvent"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"remote-sync"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEvent"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:sportEvent/remote-sync",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"sport-event",
														"get",
														":sportEvent",
														"remote-sync"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEvent"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Team Ranking list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"get",
										":event",
										"team-ranking",
										":audience",
										":sport"
									],
									"variable": [
										{
											"key": "event",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "audience",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "sport",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":event",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "event"
												},
												{
													"key": "audience"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return team ranking",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":event",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "event"
												},
												{
													"key": "audience"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"event\": {\n  \"name\": \"irur\",\n  \"startDate\": \"quis est an\",\n  \"endDate\": \"dolore aute sunt cillum\",\n  \"rankingType\": \"nisi cillum\",\n  \"tournamentType\": \"aliquip in fugiat\",\n  \"sessionType\": \"nulla do\",\n  \"eventType\": \"adipisicing proident\",\n  \"timezone\": \"cillum aliqua et\",\n  \"fullName\": \"ea sunt irure\",\n  \"address\": \"amet veniam\",\n  \"isIndividualEvent\": false,\n  \"isIndividualLegacyEvent\": true,\n  \"isTeamEvent\": true,\n  \"isBeachWrestlingTournament\": false,\n  \"isSyncEnabled\": true,\n  \"logo\": \"enim Excepteur velit anim labore\",\n  \"id\": \"dolor magna eu fugiat\",\n  \"uwwRankingType\": \"in consectetur commodo aliqua\",\n  \"localClient\": {\n   \"fullname\": \"ex veniam deserunt pariatur\"\n  },\n  \"remote\": {\n   \"apiUrl\": \"aliqua ipsum minim\"\n  },\n  \"remoteStatus\": \"ut\",\n  \"odfCode\": \"adip\"\n },\n \"audience\": \"id in dolor dolore\",\n \"sport\": \"magna sit\",\n \"teamRanking\": \"in mollit est veli\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/get/:event/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"get",
												":event",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "event"
												},
												{
													"key": "audience"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "compare/{id}",
					"item": [
						{
							"name": "Compare synchronization endpoints and return with differences (GET) or apply changes (POST)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"compare",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Compare synchronization endpoints and return with differences (GET) or apply changes (POST)",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"compare",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/sport-event/compare/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"sport-event",
												"compare",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get events",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/sport-event/?filters=<string>&limit=50&page=<number>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"sport-event",
								""
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								},
								{
									"key": "limit",
									"value": "50",
									"description": "Number of records to return"
								},
								{
									"key": "page",
									"value": "<number>",
									"description": "Return the page set"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/?filters=<string>&limit=50&page=<number>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "page",
											"value": "<number>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns events",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/?filters=<string>&limit=50&page=<number>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "page",
											"value": "<number>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"events\": {\n  \"currentPageNumber\": -87725042,\n  \"numItemsPerPage\": 34626029,\n  \"items\": \"schema type not provided\",\n  \"totalCount\": -95110820,\n  \"paginatorOptions\": \"dolore commodo quis amet\",\n  \"customParameters\": \"cupida\",\n  \"route\": \"Lorem qui cillum ex\",\n  \"params\": \"in pariatur\",\n  \"pageRange\": -24105930,\n  \"template\": \"id\",\n  \"sortableTemplate\": \"Duis aute proident quis \",\n  \"filtrationTemplate\": \"in ipsu\",\n  \"extraViewParams\": [\n   \"Duis fugiat voluptate et\",\n   \"ea proident culpa\"\n  ]\n }\n}"
						}
					]
				},
				{
					"name": "Add an event",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"addressLocality\": \"<string>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\",\n    \"nbMats\": \"<integer>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"sport-event",
								""
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"addressLocality\": \"<string>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\",\n    \"nbMats\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when invalid parameters are submitted",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"addressLocality\": \"<string>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\",\n    \"nbMats\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"country\": \"<object>\",\n    \"name\": \"<string>\",\n    \"startDate\": \"<dateTime>\",\n    \"endDate\": \"<dateTime>\",\n    \"addressLocality\": \"<string>\",\n    \"rankingType\": \"<string>\",\n    \"tournamentType\": \"<string>\",\n    \"sessionType\": \"<string>\",\n    \"uwwRankingType\": \"<string>\",\n    \"eventType\": \"<string>\",\n    \"continent\": \"<string>\",\n    \"timezone\": \"<string>\",\n    \"restTime\": \"<integer>\",\n    \"countdown\": \"<boolean>\",\n    \"lightScoresheet\": \"<boolean>\",\n    \"copyScoresheet\": \"<integer>\",\n    \"bulkScoresheet\": \"<boolean>\",\n    \"matAssignment\": \"<boolean>\",\n    \"localClient\": {\n        \"id\": \"<string>\",\n        \"email\": \"<string>\",\n        \"name\": \"<string>\",\n        \"organization\": \"<string>\",\n        \"remoteVersion\": \"<string>\"\n    },\n    \"odfCode\": \"<string>\",\n    \"nbMats\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										""
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "List trusted events (Synchronization)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"sport-event",
								"trusted",
								":localClient"
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "localClient",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"trusted",
										":localClient"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "localClient"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns trusted events",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"trusted",
										":localClient"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "localClient"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"name\": \"inci\",\n \"startDate\": \"culpa incididunt laborum\",\n \"endDate\": \"ut deserunt dolore\",\n \"rankingType\": \"Duis cillum voluptate\",\n \"tournamentType\": \"nostrud ipsum anim officia\",\n \"sessionType\": \"aliquip enim officia\",\n \"eventType\": \"nisi velit ea\",\n \"timezone\": \"reprehenderit proident in do\",\n \"fullName\": \"sit magna U\",\n \"address\": \"irure sunt\",\n \"isIndividualEvent\": false,\n \"isIndividualLegacyEvent\": false,\n \"isTeamEvent\": false,\n \"isBeachWrestlingTournament\": false,\n \"isSyncEnabled\": true,\n \"logo\": \"cillum amet\",\n \"id\": \"tempor dolore occaecat\",\n \"uwwRankingType\": \"eu\",\n \"localClient\": {\n  \"fullname\": \"eiusmod sed Duis eu\"\n },\n \"remote\": {\n  \"apiUrl\": \"ut magna consectetur\"\n },\n \"remoteStatus\": \"elit dolor nulla eu\",\n \"odfCode\": \"nisi est sint\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/trusted/:localClient?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"trusted",
										":localClient"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "localClient"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get last events",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/sport-event/last-{{limit}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"sport-event",
								"last-{{limit}}"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns events",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/last-{{limit}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"last-{{limit}}"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"events\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/last-{{limit}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"last-{{limit}}"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get an event by ODF code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"sport-event",
								"odf",
								"get",
								":odfCode"
							],
							"variable": [
								{
									"key": "odfCode",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns an event",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"country\": {\n  \"flag\": \"Duis ut\",\n  \"id\": 61047202,\n  \"name\": \"nostrud occaecat\",\n  \"alternateName\": \"est nulla consectetur\",\n  \"isoCode\": \"sunt cillum\",\n  \"isoName\": \"aliquip in mag\",\n  \"continent\": \"anim\",\n  \"officialLanguages\": \"Ut commodo a\"\n },\n \"name\": \"cill\",\n \"startDate\": \"nostrud in minim ut\",\n \"endDate\": \"non consectetur ut ea aliqua\",\n \"rankingType\": \"commodo laboris non dolor\",\n \"tournamentType\": \"elit ullamco\",\n \"sessionType\": \"cill\",\n \"eventType\": \"occaecat Lorem sed ad mollit\",\n \"continent\": \"qui ut\",\n \"scoreboardType\": \"Excepteur\",\n \"timezone\": \"in aliqua dolore eu\",\n \"fullName\": \"aute dolor consequat esse\",\n \"date\": \"mollit\",\n \"address\": \"enim adipisicing sed aliquip fugiat\",\n \"fullAddress\": \"dolore laboris incididunt velit\",\n \"isIndividualEvent\": true,\n \"isIndividualLegacyEvent\": true,\n \"isTeamEvent\": true,\n \"isSinglebracketTournament\": false,\n \"isDoublebracketTournament\": true,\n \"isRoundrobinTournament\": false,\n \"isUwwRankingEvent\": false,\n \"isBeachWrestlingTournament\": true,\n \"isWorldChampionships\": true,\n \"shorterNames\": true,\n \"timezoneTimeOffset\": 5983781,\n \"isSyncEnabled\": true,\n \"countReferees\": 33779105,\n \"countFights\": 47009199,\n \"countWeightCategories\": -31886903,\n \"sports\": \"sint in nostrud\",\n \"countWeightCategoriesBySport\": \"elit veniam\",\n \"audiences\": \"ut do\",\n \"countTeams\": -61601491,\n \"countSessions\": -85824020,\n \"countMats\": 88189494,\n \"countPools\": 23376708,\n \"countryIsoCode\": \"dolore est\",\n \"logo\": \"fugiat\",\n \"athlete1Color\": \"ut dolore incididunt exercitation labore\",\n \"athlete1TextColor\": \"elit do in incididunt\",\n \"athlete2Color\": \"amet elit\",\n \"athlete2TextColor\": \"occaecat veniam Ut\",\n \"id\": \"anim Excepteur\",\n \"addressLocality\": \"comm\",\n \"uwwRankingType\": \"sed cillum nostrud\",\n \"image\": \"dolore\",\n \"restTime\": -70247889,\n \"countdown\": true,\n \"lightScoresheet\": true,\n \"copyScoresheet\": 90711072,\n \"bulkScoresheet\": false,\n \"matAssignment\": true,\n \"visible\": false,\n \"localClient\": {\n  \"fullname\": \"laborum ea\",\n  \"id\": \"quis \",\n  \"email\": \"sint quis\",\n  \"name\": \"offi\",\n  \"organization\": \"cons\",\n  \"version\": \"ex sit aliquip\",\n  \"remoteVersion\": \"eiu\",\n  \"maintenance\": false,\n  \"trusted\": false,\n  \"created\": \"in magna co\",\n  \"updated\": \"Lorem magna veniam\"\n },\n \"remote\": {\n  \"id\": -46811,\n  \"apiUrl\": \"dolore culpa sit aliquip\",\n  \"clientId\": \"nostrud dolore reprehenderit Ut\",\n  \"clientSecret\": \"minim qui\",\n  \"apiKey\": \"mollit dolor amet reprehenderit\",\n  \"available\": true,\n  \"paused\": false,\n  \"timeout\": 36334225\n },\n \"remoteStatus\": \"in \",\n \"mats\": [\n  {\n   \"name\": \"elit\",\n   \"sportEventId\": \"n\",\n   \"id\": \"commodo ea\",\n   \"streaming\": \"sunt\"\n  },\n  {\n   \"name\": \"cons\",\n   \"sportEventId\": \"non in ut\",\n   \"id\": \"nostrud irure c\",\n   \"streaming\": \"laborum reprehenderit elit pariatur et\"\n  }\n ],\n \"odfCode\": \"sed proident ut\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete all event",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"sport-event",
								"delete",
								"all"
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns when successful",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"delete",
										"all"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"status\": true\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"delete",
										"all"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting went wrong",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/delete/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"delete",
										"all"
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Import Athletes and/or Referees",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "athletes",
									"value": "<binary>",
									"description": "Import file (XLS format)"
								},
								{
									"key": "referees",
									"value": "<binary>",
									"description": "Import file (XLS format)"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"sport-event",
								"import",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "athletes",
											"value": "<binary>",
											"description": {
												"content": "Import file (XLS format)",
												"type": "text/plain"
											}
										},
										{
											"key": "referees",
											"value": "<binary>",
											"description": {
												"content": "Import file (XLS format)",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"import",
										":id"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "athletes",
											"value": "<binary>",
											"description": {
												"content": "Import file (XLS format)",
												"type": "text/plain"
											}
										},
										{
											"key": "referees",
											"value": "<binary>",
											"description": {
												"content": "Import file (XLS format)",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"import",
										":id"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns person",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "athletes",
											"value": "<binary>",
											"description": {
												"content": "Import file (XLS format)",
												"type": "text/plain"
											}
										},
										{
											"key": "referees",
											"value": "<binary>",
											"description": {
												"content": "Import file (XLS format)",
												"type": "text/plain"
											}
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/sport-event/import/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"sport-event",
										"import",
										":id"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"status\": \"ni\",\n \"error\": \"ut sit veniam\",\n \"result\": \"et Duis anim d\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "technical-point",
			"item": [
				{
					"name": "{round Id}",
					"item": [
						{
							"name": "Get round technical points",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point",
										":roundId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "roundId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns RoundTechnicalPoints",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"roundTechnicalPoints\": \"schema type not provided\",\n \"sportEventId\": \"magna sint\"\n}"
								}
							]
						},
						{
							"name": "Add a round technical point",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"points\": \"<integer>\",\n    \"second\": \"<integer>\",\n    \"fighter\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point",
										":roundId"
									],
									"query": [
										{
											"key": "force",
											"value": "<boolean>",
											"description": "Override checked match exception"
										}
									],
									"variable": [
										{
											"key": "roundId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add a round technical point to Live table",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"points\": \"<integer>\",\n    \"second\": \"<integer>\",\n    \"fighter\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point",
										":roundId",
										"live"
									],
									"variable": [
										{
											"key": "roundId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId",
												"live"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId",
												"live"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId",
												"live"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/:roundId/live",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												":roundId",
												"live"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "roundId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get a round technical point",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a RoundTechnicalPoint",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"roundTechnicalPoint\": {\n  \"points\": 31,\n  \"second\": 29521,\n  \"roundId\": \"dolore tempor Excepteur\",\n  \"fighterId\": \"velit quis\",\n  \"fighterFullName\": \"occaecat ad ex\",\n  \"sportEventId\": \"incididunt deserunt culpa Lorem\",\n  \"id\": \"ullamco eiusmod Duis nostrud\",\n  \"round\": \"ex Excepteur ut\",\n  \"fighter\": \"qui proident\",\n  \"tag\": {\n   \"code\": \"consequat\",\n   \"name\": \"minim adipisicing eiusmod\",\n   \"sport\": \"qui sint nulla\",\n   \"sportId\": \"nulla sunt elit\",\n   \"description\": \"elit Lorem\",\n   \"position\": \"consequat pariatur\",\n   \"type\": \"in proident eiusmod\",\n   \"points\": \"aute dolor\"\n  }\n }\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a round technical point",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"points\": \"<integer>\",\n    \"second\": \"<integer>\",\n    \"fighter\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point",
										"get",
										":id"
									],
									"query": [
										{
											"key": "force",
											"value": "<boolean>",
											"description": "Override checked match exception"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a round technical point",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point",
										"get",
										":id"
									],
									"query": [
										{
											"key": "force",
											"value": "<boolean>",
											"description": "Override checked match exception"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello, or the match has been checked",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id?force=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id"
											],
											"query": [
												{
													"key": "force",
													"value": "<boolean>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Tag a round technical point",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point",
										"get",
										":id",
										"tag",
										":tag"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "tag",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id",
												"tag",
												":tag"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "tag"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id",
												"tag",
												":tag"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "tag"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a RoundTechnicalPoint",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/technical-point/get/:id/tag/:tag",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"technical-point",
												"get",
												":id",
												"tag",
												":tag"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "tag"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"roundTechnicalPoint\": {\n  \"points\": 31,\n  \"second\": 29521,\n  \"roundId\": \"dolore tempor Excepteur\",\n  \"fighterId\": \"velit quis\",\n  \"fighterFullName\": \"occaecat ad ex\",\n  \"sportEventId\": \"incididunt deserunt culpa Lorem\",\n  \"id\": \"ullamco eiusmod Duis nostrud\",\n  \"round\": \"ex Excepteur ut\",\n  \"fighter\": \"qui proident\",\n  \"tag\": {\n   \"code\": \"consequat\",\n   \"name\": \"minim adipisicing eiusmod\",\n   \"sport\": \"qui sint nulla\",\n   \"sportId\": \"nulla sunt elit\",\n   \"description\": \"elit Lorem\",\n   \"position\": \"consequat pariatur\",\n   \"type\": \"in proident eiusmod\",\n   \"points\": \"aute dolor\"\n  }\n }\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "technical-point-tag",
			"item": [
				{
					"name": "Get technical point tags",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"technical-point-tag",
								""
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns RoundTechnicalPointTags",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"roundTechnicalPointTags\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get a technical point tag",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"technical-point-tag",
								"get",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										"get",
										":code"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "code"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns RoundTechnicalPointTag",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										"get",
										":code"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "code"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"roundTechnicalPointTag\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/technical-point-tag/get/:code",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"technical-point-tag",
										"get",
										":code"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "code"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "team",
			"item": [
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "print",
							"item": [
								{
									"name": "entry-list",
									"item": [
										{
											"name": "Print Entry list for all teams",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path to the Entry list",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "sportEventId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "sportEventId"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "sportEventId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Print Entry list for all teams in table format",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"print",
														"entry-list",
														"table"
													],
													"variable": [
														{
															"key": "sportEventId",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "sportEventId"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "sportEventId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Return the PDF path to the Complete Results",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"team",
																":sportEventId",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "sportEventId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Print list",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId",
												"print"
											],
											"variable": [
												{
													"key": "sportEventId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path to the Team list",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"print"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"print"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/print",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"team",
														":sportEventId",
														"print"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "sportEventId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get sportEventTeams",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=<string>&page=1&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										":sportEventId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										},
										{
											"key": "page",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "limit",
											"value": "100",
											"description": "Records per page"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=<string>&page=1&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=<string>&page=1&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns filtered result on Teams",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId?filters=<string>&page=1&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "limit",
													"value": "100"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sportEventTeams\": {\n  \"currentPageNumber\": -98936322,\n  \"numItemsPerPage\": 87669239,\n  \"items\": \"schema type not provided\",\n  \"totalCount\": -22466562,\n  \"paginatorOptions\": \"occaecat Excepteur\",\n  \"customParameters\": \"cupidatat fugiat\",\n  \"route\": \"no\",\n  \"params\": \"nostrud veniam exercitation\",\n  \"pageRange\": 18452452,\n  \"template\": \"et\",\n  \"sortableTemplate\": \"culpa minim\",\n  \"filtrationTemplate\": \"quis ut non dolor amet\",\n  \"extraViewParams\": [\n   \"sunt in consequat commodo\",\n   \"esse sunt\"\n  ]\n }\n}"
								}
							]
						},
						{
							"name": "Add a sportEventTeam",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"alternateName\": \"<string>\",\n    \"countryCioId\": \"<integer>\",\n    \"sportEventPoolId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a Team by SportEvent and AlternateName",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										":sportEventId",
										"get",
										":alternateName"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "alternateName",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId",
												"get",
												":alternateName"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "alternateName"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns SportEventTeam",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId",
												"get",
												":alternateName"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "alternateName"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"cons\",\n \"alternateName\": \"esse\",\n \"sportEventId\": \"culpa officia veniam qui aliquip\",\n \"countryCioName\": \"ullamco cupidatat labore do\",\n \"countryFlag\": \"et deserunt proident sit\",\n \"countryFlagScoreboard\": \"pariatur ei\",\n \"fullName\": \"labore\",\n \"poolName\": \"et nostrud amet in\",\n \"sportEventWeightCategories\": \"ut consequat veniam id ex\",\n \"completed\": 3365653,\n \"wins\": 55806149,\n \"losses\": 93197831,\n \"points\": 60008706,\n \"technicalPointsFor\": -57340040,\n \"technicalPointsAgainst\": -25947407,\n \"technicalPointsDiff\": -34445424,\n \"rankingPointsFor\": 6847278,\n \"rankingPointsAgainst\": -48064431,\n \"rankingPointsDiff\": 50896576,\n \"winsEasy\": -72905845,\n \"winsSuperiority\": 92930492,\n \"rank\": 93366138,\n \"finalRank\": 79940133,\n \"fightByOpponent\": \"laboris aliqua sit\",\n \"id\": \"dolor qui\",\n \"countryCioId\": 72583238,\n \"logo\": \"laboris ad consectetur\",\n \"sportEventPoolId\": \"in\",\n \"drawNumber\": 89,\n \"continent\": \"ipsu\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/:sportEventId/get/:alternateName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												":sportEventId",
												"get",
												":alternateName"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												},
												{
													"key": "alternateName"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "Get an sportEventTeam",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns SportEventTeam",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sportEventTeam\": {\n  \"name\": \"aliq\",\n  \"alternateName\": \"culp\",\n  \"sportEventId\": \"magna voluptate sint elit\",\n  \"countryFlag\": \"Duis aliqua in\",\n  \"poolName\": \"do\",\n  \"finalRank\": 40092191,\n  \"id\": \"consectetur exercit\",\n  \"sportEventPoolId\": \"consequat sit eiusmod enim\",\n  \"drawNumber\": 91,\n  \"continent\": \"volu\"\n }\n}"
								}
							]
						},
						{
							"name": "Update a sportEventTeam",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"alternateName\": \"<string>\",\n    \"countryCioId\": \"<integer>\",\n    \"sportEventPoolId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a sportEventTeam",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a sportEventTeam draw",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"drawNumber\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id",
										"draw"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"drawNumber\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"draw"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"drawNumber\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"draw"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"drawNumber\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"draw"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"drawNumber\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/draw",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"draw"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a sportEventTeam pool",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sportEventPoolId\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id",
										"pool"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventPoolId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"pool"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventPoolId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"pool"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventPoolId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"pool"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sportEventPoolId\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/pool",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"pool"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add an athlete",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id",
										"athlete",
										":athleteId"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "athleteId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"athlete",
												":athleteId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"athlete",
												":athleteId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/athlete/:athleteId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"athlete",
												":athleteId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "athleteId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Print Entry list by team",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id",
										"print",
										"entry-list"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Return the PDF path to the Entry list",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List team ranking",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"team",
										"get",
										":id",
										"team-ranking",
										":audience",
										":sport"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "audience",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "sport",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "audience"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return the ranking object",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "audience"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"team\": {\n  \"name\": \"moll\",\n  \"alternateName\": \"eius\",\n  \"sportEventId\": \"reprehenderit ad\",\n  \"countryFlag\": \"laboris sint ut qui\",\n  \"poolName\": \"ad veniam\",\n  \"finalRank\": -43334588,\n  \"id\": \"consequat adipisicing non vel\",\n  \"sportEventPoolId\": \"Duis laborum Excepteur\",\n  \"drawNumber\": 72,\n  \"continent\": \"non \"\n },\n \"audience\": \"veniam magna labore in\",\n \"sport\": \"eiusmod ut\",\n \"rank\": -44335607\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/team/get/:id/team-ranking/:audience/:sport",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"team",
												"get",
												":id",
												"team-ranking",
												":audience",
												":sport"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												},
												{
													"key": "audience"
												},
												{
													"key": "sport"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "uww-ranking",
			"item": [
				{
					"name": "Export ranking to XLS file",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/get/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"uww-ranking",
								"get",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns an XLS file",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"weightCategory\": \"ex nulla\"\n}"
						}
					]
				},
				{
					"name": "Get ranking by Weight Category",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"uww-ranking",
								":type",
								":audience",
								":sport",
								":maxWeight"
							],
							"variable": [
								{
									"key": "type",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "audience",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "sport",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "maxWeight",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										":type",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "type"
										},
										{
											"key": "audience"
										},
										{
											"key": "sport"
										},
										{
											"key": "maxWeight"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										":type",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "type"
										},
										{
											"key": "audience"
										},
										{
											"key": "sport"
										},
										{
											"key": "maxWeight"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when successful",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/uww-ranking/:type/:audience/:sport/:maxWeight",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"uww-ranking",
										":type",
										":audience",
										":sport",
										":maxWeight"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "type"
										},
										{
											"key": "audience"
										},
										{
											"key": "sport"
										},
										{
											"key": "maxWeight"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"weightCategory\": \"ex nulla\"\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "weight-category",
			"item": [
				{
					"name": "{sport Event Id}",
					"item": [
						{
							"name": "Get weightCategories",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										":sportEventId"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns filtered result on Weight Categories",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"weightCategories\": \"schema type not provided\"\n}"
								}
							]
						},
						{
							"name": "Add a weightCategory",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"audience\": \"<string>\",\n    \"sport\": \"<string>\",\n    \"minWeight\": \"<integer>\",\n    \"maxWeight\": \"<integer>\",\n    \"roundsNumber\": \"<integer>\",\n    \"roundDuration\": \"<integer>\",\n    \"overtime\": \"<integer>\",\n    \"tournamentType\": \"<string>\",\n    \"averageDuration\": \"<integer>\",\n    \"color\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										":sportEventId"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get weightCategories - light form",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										":sportEventId",
										"light"
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>",
											"description": "Filter parameters"
										}
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returns filtered result on Weight Categories",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"light"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"weightCategories\": \"schema type not provided\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"light"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/light?filters=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"light"
											],
											"query": [
												{
													"key": "filters",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Print entry list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										":sportEventId",
										"print",
										"entry-list"
									],
									"variable": [
										{
											"key": "sportEventId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return the PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/:sportEventId/print/entry-list",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												":sportEventId",
												"print",
												"entry-list"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "sportEventId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get/{id}",
					"item": [
						{
							"name": "bracket",
							"item": [
								{
									"name": "Print bracket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"bracket",
												"print"
											],
											"query": [
												{
													"key": "showNumber",
													"value": "<integer>",
													"description": "Include fight numbers"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"print"
													],
													"query": [
														{
															"key": "showNumber",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"print"
													],
													"query": [
														{
															"key": "showNumber",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/print?showNumber=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"print"
													],
													"query": [
														{
															"key": "showNumber",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Generate/Print live bracket",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=<integer>&showNumber=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"bracket",
												"live"
											],
											"query": [
												{
													"key": "print",
													"value": "<integer>",
													"description": "Generate only (0), or print (1) as well"
												},
												{
													"key": "showNumber",
													"value": "<integer>",
													"description": "Include fight numbers"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=<integer>&showNumber=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"live"
													],
													"query": [
														{
															"key": "print",
															"value": "<integer>"
														},
														{
															"key": "showNumber",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=<integer>&showNumber=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"live"
													],
													"query": [
														{
															"key": "print",
															"value": "<integer>"
														},
														{
															"key": "showNumber",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/bracket/live?print=<integer>&showNumber=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"bracket",
														"live"
													],
													"query": [
														{
															"key": "print",
															"value": "<integer>"
														},
														{
															"key": "showNumber",
															"value": "<integer>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "print",
							"item": [
								{
									"name": "entry-list",
									"item": [
										{
											"name": "Print this category entry list",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"entry-list"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												}
											]
										},
										{
											"name": "Print teams by sport",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"entry-list",
														"table"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/entry-list/table",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"entry-list",
																"table"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "teams",
									"item": [
										{
											"name": "Print teams by sport",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"teams",
														"sport"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"sport"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"sport"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/sport",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"sport"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												}
											]
										},
										{
											"name": "Print teams by sport",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"teams",
														"ranking"
													],
													"variable": [
														{
															"key": "id",
															"value": "<string>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "Return the PDF path",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"ranking"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"pdf\": \"in eu\"\n}"
												},
												{
													"name": "Returned when the entity is not authorized to say hello",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"ranking"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Returned when somehting is not found",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/teams/ranking",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"{{_format}}",
																"weight-category",
																"get",
																":id",
																"print",
																"teams",
																"ranking"
															],
															"variable": [
																{
																	"key": "_format"
																},
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Print rankings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"print",
												"ranking"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"ranking"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"ranking"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/ranking",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"ranking"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print complete results",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"print",
												"complete-results"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/print/complete-results",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"print",
														"complete-results"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "draw",
							"item": [
								{
									"name": "Set Draw",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"drawNumber\": \"<number>\",\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"draw"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"drawNumber\": \"<number>\",\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when there is an error",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"drawNumber\": \"<number>\",\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"error\": \"veniam Duis\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"drawNumber\": \"<number>\",\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"drawNumber\": \"<number>\",\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"drawNumber\": \"<number>\",\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Generate automatic draw",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"draw",
												"auto"
											],
											"query": [
												{
													"key": "drawType",
													"value": "<string>",
													"description": "Set to use blockchain draw"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"auto"
													],
													"query": [
														{
															"key": "drawType",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when invalid parameters are submitted",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"auto"
													],
													"query": [
														{
															"key": "drawType",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when there is an error",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"auto"
													],
													"query": [
														{
															"key": "drawType",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"schema type not provided\""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"auto"
													],
													"query": [
														{
															"key": "drawType",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"exceptionDesc\": \"<string>\",\n    \"<fighterid>\": {\n        \"seedNumber\": \"<number>\",\n        \"fighterWeight\": \"<number>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/auto?drawType=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"auto"
													],
													"query": [
														{
															"key": "drawType",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Generate automatic draw for all weight categories registered under the same Sport and Audience",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"draw",
												"allweights"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"allweights"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"allweights"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/allweights",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"allweights"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "List activities related to AutoDraw",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"draw",
												"activities"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Return activities stored for the Weight Category",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"activities"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"schema type not provided\""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"activities"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/activities",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"activities"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Reset draw",
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"draw",
												"clear"
											],
											"variable": [
												{
													"key": "id",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"clear"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when successful",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"clear"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"errorStr\": \"veniam sed labore pariatur in\",\n \"success\": \"s\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/draw/clear",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"get",
														":id",
														"draw",
														"clear"
													],
													"variable": [
														{
															"key": "_format"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get a weightCategory",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns a Weight Category",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"weightCategory\": \"schema type not provided\"\n}"
								}
							]
						},
						{
							"name": "Update a weightCategory",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"audience\": \"<string>\",\n    \"sport\": \"<string>\",\n    \"minWeight\": \"<integer>\",\n    \"maxWeight\": \"<integer>\",\n    \"roundsNumber\": \"<integer>\",\n    \"roundDuration\": \"<integer>\",\n    \"overtime\": \"<integer>\",\n    \"tournamentType\": \"<string>\",\n    \"averageDuration\": \"<integer>\",\n    \"color\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when invalid parameters are submitted",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a weightCategory",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Print round robin results",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"round-robin-results",
										"print"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Return the PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"round-robin-results",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"round-robin-results",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/round-robin-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"round-robin-results",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Print beachwrestling results",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"beachwrestling-results",
										"print"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"beachwrestling-results",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"beachwrestling-results",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return the PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/beachwrestling-results/print",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"beachwrestling-results",
												"print"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								}
							]
						},
						{
							"name": "Get a weightCategory ranking",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"ranking"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Return the PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"ranking"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"ranking\": \"quis officia in\",\n \"sportEventId\": \"do qui\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"ranking"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"ranking"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get team ranking",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"team-rankings"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"team-rankings"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns team rankings",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"team-rankings"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"sportEvent\": {\n  \"countWeightCategories\": 98610946\n },\n \"sportEventWeightCategory\": \"co\",\n \"sportEventWeightCategories\": \"schema type not provided\",\n \"teamsRankings\": \"exe\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/team-rankings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"team-rankings"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Reset fights",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"fights",
										"clear"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"fights",
												"clear"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"fights",
												"clear"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"success\": \"occaecat\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/fights/clear",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"fights",
												"clear"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set a session day for a Weight Category",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"day\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"session-day"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"day\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"session-day"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"ad m\",\n \"audience\": \"fugiat et\",\n \"sport\": \"eiusmod sit\",\n \"minWeight\": 135,\n \"maxWeight\": 186,\n \"roundsNumber\": 9,\n \"roundDuration\": 463,\n \"overtime\": -93636544,\n \"tournamentType\": \"ipsum labore\",\n \"sportEventId\": \"est Lorem eu\",\n \"sportAlternateName\": \"Duis qui Ut mollit\",\n \"sportName\": \"ipsum\",\n \"fullName\": \"elit labore sed Duis\",\n \"alternateName\": \"nulla culpa consectetur tempor m\",\n \"shortName\": \"consectetur mollit\",\n \"sportId\": \"sed anim adipisicing veniam\",\n \"audienceId\": \"dolor dolore dolore minim proident\",\n \"audienceName\": \"ut ex sit ea\",\n \"isVeteran\": false,\n \"audienceShortName\": \"irure Excepteur\",\n \"isSinglebracketTournament\": false,\n \"isDoublebracketTournament\": true,\n \"isRoundrobinTournament\": true,\n \"isBeltWrestlingCategory\": true,\n \"isKazakhTournament\": true,\n \"isBeachWrestlingTournament\": true,\n \"fightersIsReady\": [\n  {\n   \"athleteId\": \"dolore anim in sit cupidatat\",\n   \"sportEventWeightCategoryId\": \"esse veniam exercitation elit\",\n   \"weightCategoryFullName\": \"qui commodo ullamco\",\n   \"weightCategoryShortName\": \"id dolor\",\n   \"weightCategoryCountFights\": -54508627,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": 30507290,\n   \"countFights\": 84276523,\n   \"personId\": \"elit officia\",\n   \"fullName\": \"minim quis mollit\",\n   \"preferedName\": \"laborum officia\",\n   \"displayName\": \"minim et sed proident\",\n   \"givenName\": \"in culpa dolore in\",\n   \"familyName\": \"in non ut irure\",\n   \"personPhoto\": \"esse dolor\",\n   \"athenaPrintId\": \"deserunt esse laboris aliqua ipsum\",\n   \"teamAlternateName\": \"sit\",\n   \"teamName\": \"labore\",\n   \"teamCountryFlag\": \"ad fugiat eiusmod anim\",\n   \"sportEventTeamId\": \"in laborum enim\",\n   \"sportEventId\": \"occaecat dolore\",\n   \"drawRank\": -95744823,\n   \"robinGroup\": \"mollit adipisicing\",\n   \"robinGroupRank\": 87756082,\n   \"teamRankingPoint\": 51919192,\n   \"uwwPoint\": -28968405,\n   \"knockOutStatus\": \"ullamco\",\n   \"hasLostknockOut\": false,\n   \"completed\": -79201722,\n   \"wins\": -7013658,\n   \"losses\": -26995188,\n   \"technicalPointsFor\": 35347743,\n   \"technicalPointsAgainst\": -13870963,\n   \"technicalPointsDiff\": -37100802,\n   \"rankingPointsFor\": 54996539,\n   \"rankingPointsAgainst\": -16646110,\n   \"rankingPointsDiff\": -21176197,\n   \"winsEasy\": 47052979,\n   \"winsSuperiority\": 86548988,\n   \"rank\": 16639998,\n   \"rankRobinGroup\": 41471888,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"in in culpa pariatur\",\n    \"sportEventWeightCategoryId\": \"ex laborum fugiat adipisicing id\",\n    \"fighter1Id\": \"ipsum anim qui culpa ut\",\n    \"fighter2Id\": \"dolor commodo exercitat\",\n    \"team1Name\": \"consectetur ipsum\",\n    \"team1AlternateName\": \"cupidatat nisi Duis voluptate\",\n    \"team1FullName\": \"aute sint\",\n    \"team1CountryFlag\": \"nulla laborum do anim\",\n    \"team1CountryFlagScoreboard\": \"voluptate\",\n    \"team1PoolName\": \"adipisicing Ut\",\n    \"team1FightByOpponent\": \"velit in mollit\",\n    \"team2Name\": \"eu adipisicing\",\n    \"team2AlternateName\": \"qui do enim ad\",\n    \"team2FullName\": \"amet Lorem\",\n    \"team2CountryFlag\": \"exercitation Lorem\",\n    \"team2CountryFlagScoreboard\": \"ut ad Duis consequat\",\n    \"team2PoolName\": \"Excepteur laborum\",\n    \"team2FightByOpponent\": \"ut Lorem dolor\",\n    \"roundFriendlyName\": \"ut dolore pariatur\",\n    \"displayOrderInRound\": 51565284,\n    \"round1Id\": \"laboris voluptate\",\n    \"round2Id\": \"cillum Excepteur cupidatat Duis\",\n    \"countReferees\": -99990425,\n    \"sportId\": \"id Duis nostrud in deserunt\",\n    \"athlete1Color\": \"pariatur in reprehenderit\",\n    \"athlete2Color\": \"mollit id proident sit\",\n    \"athlete1TextColor\": \"in Duis\",\n    \"athlete2TextColor\": \"Lorem magna cupidatat\",\n    \"matName\": \"minim aliqua\",\n    \"sessionId\": \"Excepteur eiusmod enim ul\",\n    \"sessionName\": \"magna nulla velit irure\",\n    \"technicalPoints\": \"cillum aute deserunt Ut\",\n    \"uploaderFightTest\": \"id quis ad\",\n    \"technicalPointDetails\": \"in dolore officia anim\",\n    \"technicalPointTagStatus\": \"ut voluptate\",\n    \"technicalPointIds\": \"voluptate officia dolore labore magna\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"mollit\",\n    \"winnerTeam\": \"sint ullamco\",\n    \"winnerTeamAlternateName\": \"quis aliquip\",\n    \"sportEventName\": \"reprehenderit nulla\",\n    \"sportEventStartDate\": \"voluptate ad laboris enim\",\n    \"sportEventLogo\": \"voluptate amet\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"mollit minim qui exercitation\",\n    \"roundsNumber\": -53385357,\n    \"roundDuration\": 10165306,\n    \"sportAlternateName\": \"in et do\",\n    \"weightCategoryName\": \"ut ex eu dolore\",\n    \"weightCategoryAlternateName\": \"ut proident\",\n    \"weightCategoryShortName\": \"non aliqua pariatur\",\n    \"weightCategoryMaxWeight\": -65344518,\n    \"weightCategoryFullName\": \"sint dolore\",\n    \"weightCategoryAverageDuration\": 1862749,\n    \"weightCategoryColor\": \"n\",\n    \"weightCategoryCompleted\": true,\n    \"victoryTypes\": \"elit\",\n    \"victoryTypesArray\": \"in laboris aliquip\",\n    \"audienceName\": \"mollit incididunt esse sunt\",\n    \"audienceShortName\": \"ea sunt in\",\n    \"sportName\": \"Exce\",\n    \"injuryTime\": -14912754,\n    \"warnings\": true,\n    \"cautions\": 55130308,\n    \"legFouls\": true,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"ut do reprehen\",\n    \"fighter1DisplayName\": \"ut\",\n    \"fighter1FamilyName\": \"non incididunt exercitation\",\n    \"fighter1GivenName\": \"nostrud anim\",\n    \"fighter1PreferedName\": \"sed esse quis\",\n    \"fighter1DrawRank\": \"adipisicing cup\",\n    \"fighter1RobinRank\": \"fugiat\",\n    \"fighter1SeedNumber\": 28891185,\n    \"fighter1AthleteId\": \"anim sed fugiat proident\",\n    \"fighter1PersonId\": \"esse sit\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": 74118346,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"Excepteur adipisicing reprehenderit\",\n    \"fighter2DisplayName\": \"consectetur nulla\",\n    \"fighter2FamilyName\": \"laboris dolore proident\",\n    \"fighter2GivenName\": \"culpa in\",\n    \"fighter2PreferedName\": \"et ex dolor\",\n    \"fighter2DrawRank\": 46819060,\n    \"fighter2RobinRank\": -84253538,\n    \"fighter2SeedNumber\": 58501534,\n    \"fighter2AthleteId\": \"pariatur laboris velit proident\",\n    \"fighter2PersonId\": \"officia do proident\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": 68464684,\n    \"fighter2IsInjured\": false,\n    \"result\": \"voluptate quis non qui lab\",\n    \"victoryType\": \"Ut Excepteur Lorem occaeca\",\n    \"endTime\": 66713511,\n    \"endDate\": \"veniam ad eu consequat\",\n    \"expectedDateStart\": \"et consectetur\",\n    \"expectedStartDate\": \"consequat\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"dolore incididunt\",\n    \"resultText\": \"consequat irure nisi aliquip sed\",\n    \"resultTextSmall\": \"aliqua in\",\n    \"roundRenamedSmall\": \"ullamco ex c\",\n    \"parentFightNumber1\": -70189390,\n    \"parentFightNumber2\": 72221727,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": false,\n    \"isCountdown\": false,\n    \"id\": \"eu fugiat sit cupidatat\",\n    \"parentFight1Id\": \"sed dolor in\",\n    \"parentFight2Id\": \"sed tempor aliquip reprehenderit\",\n    \"fighter1\": \"ut ut\",\n    \"fighter1RankingPoint\": 9310,\n    \"fighter2\": \"veniam dolor et laboris\",\n    \"fighter2RankingPoint\": 6116,\n    \"refereeGroup\": \"e\",\n    \"sportEventTeam1Id\": \"aute consectetur est incididunt\",\n    \"sportEventTeam2Id\": \"mollit sit\",\n    \"fightMatId\": \"in ipsum\",\n    \"round\": \"ut s\",\n    \"qualifying\": false,\n    \"teamFightId\": \"in elit ea nostrud\",\n    \"status\": 21204419,\n    \"rankingCheck\": true,\n    \"technicalCheck\": true,\n    \"weight\": 77390263,\n    \"fightNumber\": 2281,\n    \"roundWeight\": 6172,\n    \"repechageWeight\": 3833,\n    \"repechageSection\": 739,\n    \"displayOrder\": 8815,\n    \"canceled\": \"in eiusmod incididunt Ut\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"nisi\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": true,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": false,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"nostrud ullamco ex\",\n   \"sportEventWeightCategory\": \"sint\",\n   \"weight\": 120,\n   \"drawNumber\": 88,\n   \"seedNumber\": 21,\n   \"fighterWeight\": 9932351.722104117,\n   \"points\": 461,\n   \"fighterStatus\": -84581224\n  },\n  {\n   \"athleteId\": \"esse Lorem\",\n   \"sportEventWeightCategoryId\": \"consectetur id minim dolore\",\n   \"weightCategoryFullName\": \"dolore esse exercitation dolor ex\",\n   \"weightCategoryShortName\": \"sunt sit do\",\n   \"weightCategoryCountFights\": -41286092,\n   \"hasWeightCategoryBlockchainIds\": true,\n   \"weightCategoryCountReadyFighters\": 19766202,\n   \"countFights\": -51725926,\n   \"personId\": \"ullamco Duis\",\n   \"fullName\": \"nulla et ad ullamco commodo\",\n   \"preferedName\": \"enim occaecat minim sint adipisicing\",\n   \"displayName\": \"ex sint adipisicing \",\n   \"givenName\": \"do\",\n   \"familyName\": \"est\",\n   \"personPhoto\": \"magna adipisicing ad cupidatat ex\",\n   \"athenaPrintId\": \"minim\",\n   \"teamAlternateName\": \"aliquip \",\n   \"teamName\": \"consec\",\n   \"teamCountryFlag\": \"\",\n   \"sportEventTeamId\": \"magna sit in eu\",\n   \"sportEventId\": \"sit\",\n   \"drawRank\": 34791664,\n   \"robinGroup\": \"ullamco occaecat\",\n   \"robinGroupRank\": 17961451,\n   \"teamRankingPoint\": 62882619,\n   \"uwwPoint\": 48573173,\n   \"knockOutStatus\": \"occaecat exercitation\",\n   \"hasLostknockOut\": false,\n   \"completed\": -58606080,\n   \"wins\": -29236202,\n   \"losses\": 78689271,\n   \"technicalPointsFor\": 28664941,\n   \"technicalPointsAgainst\": -96599310,\n   \"technicalPointsDiff\": 55600761,\n   \"rankingPointsFor\": 75531008,\n   \"rankingPointsAgainst\": 35853431,\n   \"rankingPointsDiff\": 30825088,\n   \"winsEasy\": 32650616,\n   \"winsSuperiority\": -89006429,\n   \"rank\": 55411776,\n   \"rankRobinGroup\": 71608891,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"labore qui eu sunt nostrud\",\n    \"sportEventWeightCategoryId\": \"occaecat id moll\",\n    \"fighter1Id\": \"laboris eu\",\n    \"fighter2Id\": \"eiusmod fugiat\",\n    \"team1Name\": \"dolor culpa aliqua nisi\",\n    \"team1AlternateName\": \"mollit aliqua tempor\",\n    \"team1FullName\": \"ut \",\n    \"team1CountryFlag\": \"sit id do\",\n    \"team1CountryFlagScoreboard\": \"ut quis cillum fugiat ad\",\n    \"team1PoolName\": \"voluptate ex\",\n    \"team1FightByOpponent\": \"cillum in commodo qui\",\n    \"team2Name\": \"adipisicing labore laborum dolor\",\n    \"team2AlternateName\": \"proident Duis voluptate\",\n    \"team2FullName\": \"dolor\",\n    \"team2CountryFlag\": \"enim voluptate aute\",\n    \"team2CountryFlagScoreboard\": \"laborum laboris sint dolore in\",\n    \"team2PoolName\": \"ex voluptate\",\n    \"team2FightByOpponent\": \"veniam in ut incididunt adipisicing\",\n    \"roundFriendlyName\": \"consequat dolore\",\n    \"displayOrderInRound\": 28011207,\n    \"round1Id\": \"Duis aute adipisicing Ut\",\n    \"round2Id\": \"consectetur sed proident Duis\",\n    \"countReferees\": 48136807,\n    \"sportId\": \"nisi\",\n    \"athlete1Color\": \"labore\",\n    \"athlete2Color\": \"dolor amet\",\n    \"athlete1TextColor\": \"veniam est nostrud\",\n    \"athlete2TextColor\": \"veniam nisi\",\n    \"matName\": \"ex\",\n    \"sessionId\": \"ut est\",\n    \"sessionName\": \"in tempor commodo esse\",\n    \"technicalPoints\": \"aliquip dolor\",\n    \"uploaderFightTest\": \"fugiat tempor pariatur\",\n    \"technicalPointDetails\": \"nulla pariatur in ipsum\",\n    \"technicalPointTagStatus\": \"cupidatat\",\n    \"technicalPointIds\": \"cillum\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"non ut commodo Lorem\",\n    \"winnerTeam\": \"est labore Ut\",\n    \"winnerTeamAlternateName\": \"commodo ut voluptate Lorem\",\n    \"sportEventName\": \"dolore offic\",\n    \"sportEventStartDate\": \"ullamco enim dolor dol\",\n    \"sportEventLogo\": \"aliquip pariatur anim dolore in\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"est\",\n    \"roundsNumber\": 29200913,\n    \"roundDuration\": -6490920,\n    \"sportAlternateName\": \"aliquip nulla\",\n    \"weightCategoryName\": \"velit irure\",\n    \"weightCategoryAlternateName\": \"adipisicing\",\n    \"weightCategoryShortName\": \"in voluptate aute\",\n    \"weightCategoryMaxWeight\": -6899066,\n    \"weightCategoryFullName\": \"in exercitation enim\",\n    \"weightCategoryAverageDuration\": 39024413,\n    \"weightCategoryColor\": \"magna ipsum sint\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"ea labore cillum adipisicing\",\n    \"victoryTypesArray\": \"qui exercitation\",\n    \"audienceName\": \"ea dolore\",\n    \"audienceShortName\": \"nisi sed amet aute fugiat\",\n    \"sportName\": \"id ut quis Ut voluptate\",\n    \"injuryTime\": -75083138,\n    \"warnings\": false,\n    \"cautions\": -59765315,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"id n\",\n    \"fighter1DisplayName\": \"elit qui quis aliquip\",\n    \"fighter1FamilyName\": \"ullamco aliquip ex\",\n    \"fighter1GivenName\": \"sed aute\",\n    \"fighter1PreferedName\": \"dolore exercitatio\",\n    \"fighter1DrawRank\": \"nisi voluptate\",\n    \"fighter1RobinRank\": \"aliqua proident sint ea ut\",\n    \"fighter1SeedNumber\": -46701374,\n    \"fighter1AthleteId\": \"adipisicing aute\",\n    \"fighter1PersonId\": \"aliquip anim incididunt consequat\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": -51091803,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"mollit\",\n    \"fighter2DisplayName\": \"eiusmod ullamco\",\n    \"fighter2FamilyName\": \"aliquip irure\",\n    \"fighter2GivenName\": \"velit quis cillum\",\n    \"fighter2PreferedName\": \"velit sed Ut\",\n    \"fighter2DrawRank\": -79763529,\n    \"fighter2RobinRank\": 68089869,\n    \"fighter2SeedNumber\": -19724918,\n    \"fighter2AthleteId\": \"cupidatat ea consequat Duis\",\n    \"fighter2PersonId\": \"commodo\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -10475471,\n    \"fighter2IsInjured\": true,\n    \"result\": \"occaecat\",\n    \"victoryType\": \"velit es\",\n    \"endTime\": 29357451,\n    \"endDate\": \"Ut elit dolore ex\",\n    \"expectedDateStart\": \"ex in consequat ea deserunt\",\n    \"expectedStartDate\": \"voluptate dolor id ullamco aliqua\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"velit mini\",\n    \"resultText\": \"aliquip adipisicing\",\n    \"resultTextSmall\": \"elit commodo\",\n    \"roundRenamedSmall\": \"deserunt laborum\",\n    \"parentFightNumber1\": -24097820,\n    \"parentFightNumber2\": -23520671,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": true,\n    \"id\": \"eiusmod veniam eu\",\n    \"parentFight1Id\": \"occaecat Duis consequat esse\",\n    \"parentFight2Id\": \"dolor esse est sed exercitation\",\n    \"fighter1\": \"aliqua enim irure\",\n    \"fighter1RankingPoint\": 6131,\n    \"fighter2\": \"velit cupidatat Excepteur\",\n    \"fighter2RankingPoint\": 7148,\n    \"refereeGroup\": \"r\",\n    \"sportEventTeam1Id\": \"in aute adipisicing\",\n    \"sportEventTeam2Id\": \"amet dolor\",\n    \"fightMatId\": \"Duis velit ullamco\",\n    \"round\": \"sed \",\n    \"qualifying\": true,\n    \"teamFightId\": \"est consectetur oc\",\n    \"status\": -87384936,\n    \"rankingCheck\": true,\n    \"technicalCheck\": false,\n    \"weight\": 69356499,\n    \"fightNumber\": 5310,\n    \"roundWeight\": 3430,\n    \"repechageWeight\": 1514,\n    \"repechageSection\": 7358,\n    \"displayOrder\": 9861,\n    \"canceled\": \"tempor\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"amet in\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": false,\n   \"isNotRanked\": false,\n   \"isInjured\": true,\n   \"isForfeit\": true,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"minim sed in qui\",\n   \"sportEventWeightCategory\": \"ipsum fugiat nisi in\",\n   \"weight\": 304,\n   \"drawNumber\": 62,\n   \"seedNumber\": 17,\n   \"fighterWeight\": -32658387.941688046,\n   \"points\": 287,\n   \"fighterStatus\": 38003239\n  }\n ],\n \"countReadyTeams\": 69254009,\n \"countReadyFighters\": -56516809,\n \"countReadySeededFighters\": -54275131,\n \"countSeededFighters\": -64255959,\n \"countFighters\": -26137622,\n \"isRepechageSet\": false,\n \"countTeams\": 6949061,\n \"countFights\": -20706717,\n \"perfectNumber\": 841470,\n \"isRobin\": true,\n \"isRobinGrouped\": true,\n \"id\": \"minim incididunt\",\n \"averageDuration\": -40602136,\n \"color\": \"anim\",\n \"odfCode\": \"in proident nulla\",\n \"uwwRanking\": true,\n \"blockchainIds\": \"eiusmod minim ullamco laborum ut\",\n \"sessionStartDay\": 63054674,\n \"matAssignment\": -50050622,\n \"fightersUpdated\": \"do Duis nulla et\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"day\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"session-day"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"day\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/session-day",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"session-day"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Dedicate a Weight Category to a Mat",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"matNumber\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"assign-mat"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"matNumber\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"assign-mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"ad m\",\n \"audience\": \"fugiat et\",\n \"sport\": \"eiusmod sit\",\n \"minWeight\": 135,\n \"maxWeight\": 186,\n \"roundsNumber\": 9,\n \"roundDuration\": 463,\n \"overtime\": -93636544,\n \"tournamentType\": \"ipsum labore\",\n \"sportEventId\": \"est Lorem eu\",\n \"sportAlternateName\": \"Duis qui Ut mollit\",\n \"sportName\": \"ipsum\",\n \"fullName\": \"elit labore sed Duis\",\n \"alternateName\": \"nulla culpa consectetur tempor m\",\n \"shortName\": \"consectetur mollit\",\n \"sportId\": \"sed anim adipisicing veniam\",\n \"audienceId\": \"dolor dolore dolore minim proident\",\n \"audienceName\": \"ut ex sit ea\",\n \"isVeteran\": false,\n \"audienceShortName\": \"irure Excepteur\",\n \"isSinglebracketTournament\": false,\n \"isDoublebracketTournament\": true,\n \"isRoundrobinTournament\": true,\n \"isBeltWrestlingCategory\": true,\n \"isKazakhTournament\": true,\n \"isBeachWrestlingTournament\": true,\n \"fightersIsReady\": [\n  {\n   \"athleteId\": \"dolore anim in sit cupidatat\",\n   \"sportEventWeightCategoryId\": \"esse veniam exercitation elit\",\n   \"weightCategoryFullName\": \"qui commodo ullamco\",\n   \"weightCategoryShortName\": \"id dolor\",\n   \"weightCategoryCountFights\": -54508627,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": 30507290,\n   \"countFights\": 84276523,\n   \"personId\": \"elit officia\",\n   \"fullName\": \"minim quis mollit\",\n   \"preferedName\": \"laborum officia\",\n   \"displayName\": \"minim et sed proident\",\n   \"givenName\": \"in culpa dolore in\",\n   \"familyName\": \"in non ut irure\",\n   \"personPhoto\": \"esse dolor\",\n   \"athenaPrintId\": \"deserunt esse laboris aliqua ipsum\",\n   \"teamAlternateName\": \"sit\",\n   \"teamName\": \"labore\",\n   \"teamCountryFlag\": \"ad fugiat eiusmod anim\",\n   \"sportEventTeamId\": \"in laborum enim\",\n   \"sportEventId\": \"occaecat dolore\",\n   \"drawRank\": -95744823,\n   \"robinGroup\": \"mollit adipisicing\",\n   \"robinGroupRank\": 87756082,\n   \"teamRankingPoint\": 51919192,\n   \"uwwPoint\": -28968405,\n   \"knockOutStatus\": \"ullamco\",\n   \"hasLostknockOut\": false,\n   \"completed\": -79201722,\n   \"wins\": -7013658,\n   \"losses\": -26995188,\n   \"technicalPointsFor\": 35347743,\n   \"technicalPointsAgainst\": -13870963,\n   \"technicalPointsDiff\": -37100802,\n   \"rankingPointsFor\": 54996539,\n   \"rankingPointsAgainst\": -16646110,\n   \"rankingPointsDiff\": -21176197,\n   \"winsEasy\": 47052979,\n   \"winsSuperiority\": 86548988,\n   \"rank\": 16639998,\n   \"rankRobinGroup\": 41471888,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"in in culpa pariatur\",\n    \"sportEventWeightCategoryId\": \"ex laborum fugiat adipisicing id\",\n    \"fighter1Id\": \"ipsum anim qui culpa ut\",\n    \"fighter2Id\": \"dolor commodo exercitat\",\n    \"team1Name\": \"consectetur ipsum\",\n    \"team1AlternateName\": \"cupidatat nisi Duis voluptate\",\n    \"team1FullName\": \"aute sint\",\n    \"team1CountryFlag\": \"nulla laborum do anim\",\n    \"team1CountryFlagScoreboard\": \"voluptate\",\n    \"team1PoolName\": \"adipisicing Ut\",\n    \"team1FightByOpponent\": \"velit in mollit\",\n    \"team2Name\": \"eu adipisicing\",\n    \"team2AlternateName\": \"qui do enim ad\",\n    \"team2FullName\": \"amet Lorem\",\n    \"team2CountryFlag\": \"exercitation Lorem\",\n    \"team2CountryFlagScoreboard\": \"ut ad Duis consequat\",\n    \"team2PoolName\": \"Excepteur laborum\",\n    \"team2FightByOpponent\": \"ut Lorem dolor\",\n    \"roundFriendlyName\": \"ut dolore pariatur\",\n    \"displayOrderInRound\": 51565284,\n    \"round1Id\": \"laboris voluptate\",\n    \"round2Id\": \"cillum Excepteur cupidatat Duis\",\n    \"countReferees\": -99990425,\n    \"sportId\": \"id Duis nostrud in deserunt\",\n    \"athlete1Color\": \"pariatur in reprehenderit\",\n    \"athlete2Color\": \"mollit id proident sit\",\n    \"athlete1TextColor\": \"in Duis\",\n    \"athlete2TextColor\": \"Lorem magna cupidatat\",\n    \"matName\": \"minim aliqua\",\n    \"sessionId\": \"Excepteur eiusmod enim ul\",\n    \"sessionName\": \"magna nulla velit irure\",\n    \"technicalPoints\": \"cillum aute deserunt Ut\",\n    \"uploaderFightTest\": \"id quis ad\",\n    \"technicalPointDetails\": \"in dolore officia anim\",\n    \"technicalPointTagStatus\": \"ut voluptate\",\n    \"technicalPointIds\": \"voluptate officia dolore labore magna\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"mollit\",\n    \"winnerTeam\": \"sint ullamco\",\n    \"winnerTeamAlternateName\": \"quis aliquip\",\n    \"sportEventName\": \"reprehenderit nulla\",\n    \"sportEventStartDate\": \"voluptate ad laboris enim\",\n    \"sportEventLogo\": \"voluptate amet\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"mollit minim qui exercitation\",\n    \"roundsNumber\": -53385357,\n    \"roundDuration\": 10165306,\n    \"sportAlternateName\": \"in et do\",\n    \"weightCategoryName\": \"ut ex eu dolore\",\n    \"weightCategoryAlternateName\": \"ut proident\",\n    \"weightCategoryShortName\": \"non aliqua pariatur\",\n    \"weightCategoryMaxWeight\": -65344518,\n    \"weightCategoryFullName\": \"sint dolore\",\n    \"weightCategoryAverageDuration\": 1862749,\n    \"weightCategoryColor\": \"n\",\n    \"weightCategoryCompleted\": true,\n    \"victoryTypes\": \"elit\",\n    \"victoryTypesArray\": \"in laboris aliquip\",\n    \"audienceName\": \"mollit incididunt esse sunt\",\n    \"audienceShortName\": \"ea sunt in\",\n    \"sportName\": \"Exce\",\n    \"injuryTime\": -14912754,\n    \"warnings\": true,\n    \"cautions\": 55130308,\n    \"legFouls\": true,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"ut do reprehen\",\n    \"fighter1DisplayName\": \"ut\",\n    \"fighter1FamilyName\": \"non incididunt exercitation\",\n    \"fighter1GivenName\": \"nostrud anim\",\n    \"fighter1PreferedName\": \"sed esse quis\",\n    \"fighter1DrawRank\": \"adipisicing cup\",\n    \"fighter1RobinRank\": \"fugiat\",\n    \"fighter1SeedNumber\": 28891185,\n    \"fighter1AthleteId\": \"anim sed fugiat proident\",\n    \"fighter1PersonId\": \"esse sit\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": 74118346,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"Excepteur adipisicing reprehenderit\",\n    \"fighter2DisplayName\": \"consectetur nulla\",\n    \"fighter2FamilyName\": \"laboris dolore proident\",\n    \"fighter2GivenName\": \"culpa in\",\n    \"fighter2PreferedName\": \"et ex dolor\",\n    \"fighter2DrawRank\": 46819060,\n    \"fighter2RobinRank\": -84253538,\n    \"fighter2SeedNumber\": 58501534,\n    \"fighter2AthleteId\": \"pariatur laboris velit proident\",\n    \"fighter2PersonId\": \"officia do proident\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": 68464684,\n    \"fighter2IsInjured\": false,\n    \"result\": \"voluptate quis non qui lab\",\n    \"victoryType\": \"Ut Excepteur Lorem occaeca\",\n    \"endTime\": 66713511,\n    \"endDate\": \"veniam ad eu consequat\",\n    \"expectedDateStart\": \"et consectetur\",\n    \"expectedStartDate\": \"consequat\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"dolore incididunt\",\n    \"resultText\": \"consequat irure nisi aliquip sed\",\n    \"resultTextSmall\": \"aliqua in\",\n    \"roundRenamedSmall\": \"ullamco ex c\",\n    \"parentFightNumber1\": -70189390,\n    \"parentFightNumber2\": 72221727,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": false,\n    \"isCountdown\": false,\n    \"id\": \"eu fugiat sit cupidatat\",\n    \"parentFight1Id\": \"sed dolor in\",\n    \"parentFight2Id\": \"sed tempor aliquip reprehenderit\",\n    \"fighter1\": \"ut ut\",\n    \"fighter1RankingPoint\": 9310,\n    \"fighter2\": \"veniam dolor et laboris\",\n    \"fighter2RankingPoint\": 6116,\n    \"refereeGroup\": \"e\",\n    \"sportEventTeam1Id\": \"aute consectetur est incididunt\",\n    \"sportEventTeam2Id\": \"mollit sit\",\n    \"fightMatId\": \"in ipsum\",\n    \"round\": \"ut s\",\n    \"qualifying\": false,\n    \"teamFightId\": \"in elit ea nostrud\",\n    \"status\": 21204419,\n    \"rankingCheck\": true,\n    \"technicalCheck\": true,\n    \"weight\": 77390263,\n    \"fightNumber\": 2281,\n    \"roundWeight\": 6172,\n    \"repechageWeight\": 3833,\n    \"repechageSection\": 739,\n    \"displayOrder\": 8815,\n    \"canceled\": \"in eiusmod incididunt Ut\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"nisi\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": true,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": false,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"nostrud ullamco ex\",\n   \"sportEventWeightCategory\": \"sint\",\n   \"weight\": 120,\n   \"drawNumber\": 88,\n   \"seedNumber\": 21,\n   \"fighterWeight\": 9932351.722104117,\n   \"points\": 461,\n   \"fighterStatus\": -84581224\n  },\n  {\n   \"athleteId\": \"esse Lorem\",\n   \"sportEventWeightCategoryId\": \"consectetur id minim dolore\",\n   \"weightCategoryFullName\": \"dolore esse exercitation dolor ex\",\n   \"weightCategoryShortName\": \"sunt sit do\",\n   \"weightCategoryCountFights\": -41286092,\n   \"hasWeightCategoryBlockchainIds\": true,\n   \"weightCategoryCountReadyFighters\": 19766202,\n   \"countFights\": -51725926,\n   \"personId\": \"ullamco Duis\",\n   \"fullName\": \"nulla et ad ullamco commodo\",\n   \"preferedName\": \"enim occaecat minim sint adipisicing\",\n   \"displayName\": \"ex sint adipisicing \",\n   \"givenName\": \"do\",\n   \"familyName\": \"est\",\n   \"personPhoto\": \"magna adipisicing ad cupidatat ex\",\n   \"athenaPrintId\": \"minim\",\n   \"teamAlternateName\": \"aliquip \",\n   \"teamName\": \"consec\",\n   \"teamCountryFlag\": \"\",\n   \"sportEventTeamId\": \"magna sit in eu\",\n   \"sportEventId\": \"sit\",\n   \"drawRank\": 34791664,\n   \"robinGroup\": \"ullamco occaecat\",\n   \"robinGroupRank\": 17961451,\n   \"teamRankingPoint\": 62882619,\n   \"uwwPoint\": 48573173,\n   \"knockOutStatus\": \"occaecat exercitation\",\n   \"hasLostknockOut\": false,\n   \"completed\": -58606080,\n   \"wins\": -29236202,\n   \"losses\": 78689271,\n   \"technicalPointsFor\": 28664941,\n   \"technicalPointsAgainst\": -96599310,\n   \"technicalPointsDiff\": 55600761,\n   \"rankingPointsFor\": 75531008,\n   \"rankingPointsAgainst\": 35853431,\n   \"rankingPointsDiff\": 30825088,\n   \"winsEasy\": 32650616,\n   \"winsSuperiority\": -89006429,\n   \"rank\": 55411776,\n   \"rankRobinGroup\": 71608891,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"labore qui eu sunt nostrud\",\n    \"sportEventWeightCategoryId\": \"occaecat id moll\",\n    \"fighter1Id\": \"laboris eu\",\n    \"fighter2Id\": \"eiusmod fugiat\",\n    \"team1Name\": \"dolor culpa aliqua nisi\",\n    \"team1AlternateName\": \"mollit aliqua tempor\",\n    \"team1FullName\": \"ut \",\n    \"team1CountryFlag\": \"sit id do\",\n    \"team1CountryFlagScoreboard\": \"ut quis cillum fugiat ad\",\n    \"team1PoolName\": \"voluptate ex\",\n    \"team1FightByOpponent\": \"cillum in commodo qui\",\n    \"team2Name\": \"adipisicing labore laborum dolor\",\n    \"team2AlternateName\": \"proident Duis voluptate\",\n    \"team2FullName\": \"dolor\",\n    \"team2CountryFlag\": \"enim voluptate aute\",\n    \"team2CountryFlagScoreboard\": \"laborum laboris sint dolore in\",\n    \"team2PoolName\": \"ex voluptate\",\n    \"team2FightByOpponent\": \"veniam in ut incididunt adipisicing\",\n    \"roundFriendlyName\": \"consequat dolore\",\n    \"displayOrderInRound\": 28011207,\n    \"round1Id\": \"Duis aute adipisicing Ut\",\n    \"round2Id\": \"consectetur sed proident Duis\",\n    \"countReferees\": 48136807,\n    \"sportId\": \"nisi\",\n    \"athlete1Color\": \"labore\",\n    \"athlete2Color\": \"dolor amet\",\n    \"athlete1TextColor\": \"veniam est nostrud\",\n    \"athlete2TextColor\": \"veniam nisi\",\n    \"matName\": \"ex\",\n    \"sessionId\": \"ut est\",\n    \"sessionName\": \"in tempor commodo esse\",\n    \"technicalPoints\": \"aliquip dolor\",\n    \"uploaderFightTest\": \"fugiat tempor pariatur\",\n    \"technicalPointDetails\": \"nulla pariatur in ipsum\",\n    \"technicalPointTagStatus\": \"cupidatat\",\n    \"technicalPointIds\": \"cillum\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"non ut commodo Lorem\",\n    \"winnerTeam\": \"est labore Ut\",\n    \"winnerTeamAlternateName\": \"commodo ut voluptate Lorem\",\n    \"sportEventName\": \"dolore offic\",\n    \"sportEventStartDate\": \"ullamco enim dolor dol\",\n    \"sportEventLogo\": \"aliquip pariatur anim dolore in\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"est\",\n    \"roundsNumber\": 29200913,\n    \"roundDuration\": -6490920,\n    \"sportAlternateName\": \"aliquip nulla\",\n    \"weightCategoryName\": \"velit irure\",\n    \"weightCategoryAlternateName\": \"adipisicing\",\n    \"weightCategoryShortName\": \"in voluptate aute\",\n    \"weightCategoryMaxWeight\": -6899066,\n    \"weightCategoryFullName\": \"in exercitation enim\",\n    \"weightCategoryAverageDuration\": 39024413,\n    \"weightCategoryColor\": \"magna ipsum sint\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"ea labore cillum adipisicing\",\n    \"victoryTypesArray\": \"qui exercitation\",\n    \"audienceName\": \"ea dolore\",\n    \"audienceShortName\": \"nisi sed amet aute fugiat\",\n    \"sportName\": \"id ut quis Ut voluptate\",\n    \"injuryTime\": -75083138,\n    \"warnings\": false,\n    \"cautions\": -59765315,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"id n\",\n    \"fighter1DisplayName\": \"elit qui quis aliquip\",\n    \"fighter1FamilyName\": \"ullamco aliquip ex\",\n    \"fighter1GivenName\": \"sed aute\",\n    \"fighter1PreferedName\": \"dolore exercitatio\",\n    \"fighter1DrawRank\": \"nisi voluptate\",\n    \"fighter1RobinRank\": \"aliqua proident sint ea ut\",\n    \"fighter1SeedNumber\": -46701374,\n    \"fighter1AthleteId\": \"adipisicing aute\",\n    \"fighter1PersonId\": \"aliquip anim incididunt consequat\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": -51091803,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"mollit\",\n    \"fighter2DisplayName\": \"eiusmod ullamco\",\n    \"fighter2FamilyName\": \"aliquip irure\",\n    \"fighter2GivenName\": \"velit quis cillum\",\n    \"fighter2PreferedName\": \"velit sed Ut\",\n    \"fighter2DrawRank\": -79763529,\n    \"fighter2RobinRank\": 68089869,\n    \"fighter2SeedNumber\": -19724918,\n    \"fighter2AthleteId\": \"cupidatat ea consequat Duis\",\n    \"fighter2PersonId\": \"commodo\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -10475471,\n    \"fighter2IsInjured\": true,\n    \"result\": \"occaecat\",\n    \"victoryType\": \"velit es\",\n    \"endTime\": 29357451,\n    \"endDate\": \"Ut elit dolore ex\",\n    \"expectedDateStart\": \"ex in consequat ea deserunt\",\n    \"expectedStartDate\": \"voluptate dolor id ullamco aliqua\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"velit mini\",\n    \"resultText\": \"aliquip adipisicing\",\n    \"resultTextSmall\": \"elit commodo\",\n    \"roundRenamedSmall\": \"deserunt laborum\",\n    \"parentFightNumber1\": -24097820,\n    \"parentFightNumber2\": -23520671,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": true,\n    \"id\": \"eiusmod veniam eu\",\n    \"parentFight1Id\": \"occaecat Duis consequat esse\",\n    \"parentFight2Id\": \"dolor esse est sed exercitation\",\n    \"fighter1\": \"aliqua enim irure\",\n    \"fighter1RankingPoint\": 6131,\n    \"fighter2\": \"velit cupidatat Excepteur\",\n    \"fighter2RankingPoint\": 7148,\n    \"refereeGroup\": \"r\",\n    \"sportEventTeam1Id\": \"in aute adipisicing\",\n    \"sportEventTeam2Id\": \"amet dolor\",\n    \"fightMatId\": \"Duis velit ullamco\",\n    \"round\": \"sed \",\n    \"qualifying\": true,\n    \"teamFightId\": \"est consectetur oc\",\n    \"status\": -87384936,\n    \"rankingCheck\": true,\n    \"technicalCheck\": false,\n    \"weight\": 69356499,\n    \"fightNumber\": 5310,\n    \"roundWeight\": 3430,\n    \"repechageWeight\": 1514,\n    \"repechageSection\": 7358,\n    \"displayOrder\": 9861,\n    \"canceled\": \"tempor\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"amet in\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": false,\n   \"isNotRanked\": false,\n   \"isInjured\": true,\n   \"isForfeit\": true,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"minim sed in qui\",\n   \"sportEventWeightCategory\": \"ipsum fugiat nisi in\",\n   \"weight\": 304,\n   \"drawNumber\": 62,\n   \"seedNumber\": 17,\n   \"fighterWeight\": -32658387.941688046,\n   \"points\": 287,\n   \"fighterStatus\": 38003239\n  }\n ],\n \"countReadyTeams\": 69254009,\n \"countReadyFighters\": -56516809,\n \"countReadySeededFighters\": -54275131,\n \"countSeededFighters\": -64255959,\n \"countFighters\": -26137622,\n \"isRepechageSet\": false,\n \"countTeams\": 6949061,\n \"countFights\": -20706717,\n \"perfectNumber\": 841470,\n \"isRobin\": true,\n \"isRobinGrouped\": true,\n \"id\": \"minim incididunt\",\n \"averageDuration\": -40602136,\n \"color\": \"anim\",\n \"odfCode\": \"in proident nulla\",\n \"uwwRanking\": true,\n \"blockchainIds\": \"eiusmod minim ullamco laborum ut\",\n \"sessionStartDay\": 63054674,\n \"matAssignment\": -50050622,\n \"fightersUpdated\": \"do Duis nulla et\"\n}"
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"matNumber\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"assign-mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"matNumber\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/assign-mat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"assign-mat"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Toggle UWW Ranking",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"get",
										":id",
										"toggle-uww-ranking"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"toggle-uww-ranking"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"toggle-uww-ranking"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/get/:id/toggle-uww-ranking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"get",
												":id",
												"toggle-uww-ranking"
											],
											"variable": [
												{
													"key": "_format"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "print",
					"item": [
						{
							"name": "entry-list",
							"item": [
								{
									"name": "Print category entry list - multiple Weight Categories",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"entry-list"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										}
									]
								},
								{
									"name": "Print teams by sport - multiple Weight Categories",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"entry-list",
												"table"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list",
														"table"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list",
														"table"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/entry-list/table?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"entry-list",
														"table"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "teams",
							"item": [
								{
									"name": "Print teams by sport - multiple Weight Categories",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"teams",
												"sport"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"sport"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"sport"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/sport?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"sport"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Print teams by sport - multiple Weight Categories",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"teams",
												"ranking"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>",
													"description": "Filter for Weight Category"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"response": [
										{
											"name": "Returned when somehting is not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"ranking"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Return the PDF path",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"ranking"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"pdf\": \"in eu\"\n}"
										},
										{
											"name": "Returned when the entity is not authorized to say hello",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/teams/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"{{_format}}",
														"weight-category",
														"print",
														"teams",
														"ranking"
													],
													"query": [
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														},
														{
															"key": "sportEventWeightCategoryId",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "_format"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Print rankings - multiple Weight Categories",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"print",
										"ranking"
									],
									"query": [
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>",
											"description": "Filter for Weight Category"
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>",
											"description": "Filter for Weight Category"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"ranking"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"ranking"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return the PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/ranking?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"ranking"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								}
							]
						},
						{
							"name": "Print complete results - multiple Weight Categories",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"print",
										"complete-results"
									],
									"query": [
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>",
											"description": "Filter for Weight Category"
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>",
											"description": "Filter for Weight Category"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"response": [
								{
									"name": "Returned when the entity is not authorized to say hello",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"complete-results"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Return the PDF path",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"complete-results"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"pdf\": \"in eu\"\n}"
								},
								{
									"name": "Returned when somehting is not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/{{_format}}/weight-category/print/complete-results?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"{{_format}}",
												"weight-category",
												"print",
												"complete-results"
											],
											"query": [
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												},
												{
													"key": "sportEventWeightCategoryId",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "_format"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get weightCategories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"weight-category",
								""
							],
							"query": [
								{
									"key": "filters",
									"value": "<string>",
									"description": "Filter parameters"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Returns filtered result on Weight Categories",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"weightCategories\": \"schema type not provided\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/?filters=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										""
									],
									"query": [
										{
											"key": "filters",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get a weightCategory by ODF code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"weight-category",
								"odf",
								"get",
								":odfCode"
							],
							"variable": [
								{
									"key": "odfCode",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returns a Weight Category",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"name\": \"ad m\",\n \"audience\": \"fugiat et\",\n \"sport\": \"eiusmod sit\",\n \"minWeight\": 135,\n \"maxWeight\": 186,\n \"roundsNumber\": 9,\n \"roundDuration\": 463,\n \"overtime\": -93636544,\n \"tournamentType\": \"ipsum labore\",\n \"sportEventId\": \"est Lorem eu\",\n \"sportAlternateName\": \"Duis qui Ut mollit\",\n \"sportName\": \"ipsum\",\n \"fullName\": \"elit labore sed Duis\",\n \"alternateName\": \"nulla culpa consectetur tempor m\",\n \"shortName\": \"consectetur mollit\",\n \"sportId\": \"sed anim adipisicing veniam\",\n \"audienceId\": \"dolor dolore dolore minim proident\",\n \"audienceName\": \"ut ex sit ea\",\n \"isVeteran\": false,\n \"audienceShortName\": \"irure Excepteur\",\n \"isSinglebracketTournament\": false,\n \"isDoublebracketTournament\": true,\n \"isRoundrobinTournament\": true,\n \"isBeltWrestlingCategory\": true,\n \"isKazakhTournament\": true,\n \"isBeachWrestlingTournament\": true,\n \"fightersIsReady\": [\n  {\n   \"athleteId\": \"dolore anim in sit cupidatat\",\n   \"sportEventWeightCategoryId\": \"esse veniam exercitation elit\",\n   \"weightCategoryFullName\": \"qui commodo ullamco\",\n   \"weightCategoryShortName\": \"id dolor\",\n   \"weightCategoryCountFights\": -54508627,\n   \"hasWeightCategoryBlockchainIds\": false,\n   \"weightCategoryCountReadyFighters\": 30507290,\n   \"countFights\": 84276523,\n   \"personId\": \"elit officia\",\n   \"fullName\": \"minim quis mollit\",\n   \"preferedName\": \"laborum officia\",\n   \"displayName\": \"minim et sed proident\",\n   \"givenName\": \"in culpa dolore in\",\n   \"familyName\": \"in non ut irure\",\n   \"personPhoto\": \"esse dolor\",\n   \"athenaPrintId\": \"deserunt esse laboris aliqua ipsum\",\n   \"teamAlternateName\": \"sit\",\n   \"teamName\": \"labore\",\n   \"teamCountryFlag\": \"ad fugiat eiusmod anim\",\n   \"sportEventTeamId\": \"in laborum enim\",\n   \"sportEventId\": \"occaecat dolore\",\n   \"drawRank\": -95744823,\n   \"robinGroup\": \"mollit adipisicing\",\n   \"robinGroupRank\": 87756082,\n   \"teamRankingPoint\": 51919192,\n   \"uwwPoint\": -28968405,\n   \"knockOutStatus\": \"ullamco\",\n   \"hasLostknockOut\": false,\n   \"completed\": -79201722,\n   \"wins\": -7013658,\n   \"losses\": -26995188,\n   \"technicalPointsFor\": 35347743,\n   \"technicalPointsAgainst\": -13870963,\n   \"technicalPointsDiff\": -37100802,\n   \"rankingPointsFor\": 54996539,\n   \"rankingPointsAgainst\": -16646110,\n   \"rankingPointsDiff\": -21176197,\n   \"winsEasy\": 47052979,\n   \"winsSuperiority\": 86548988,\n   \"rank\": 16639998,\n   \"rankRobinGroup\": 41471888,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"in in culpa pariatur\",\n    \"sportEventWeightCategoryId\": \"ex laborum fugiat adipisicing id\",\n    \"fighter1Id\": \"ipsum anim qui culpa ut\",\n    \"fighter2Id\": \"dolor commodo exercitat\",\n    \"team1Name\": \"consectetur ipsum\",\n    \"team1AlternateName\": \"cupidatat nisi Duis voluptate\",\n    \"team1FullName\": \"aute sint\",\n    \"team1CountryFlag\": \"nulla laborum do anim\",\n    \"team1CountryFlagScoreboard\": \"voluptate\",\n    \"team1PoolName\": \"adipisicing Ut\",\n    \"team1FightByOpponent\": \"velit in mollit\",\n    \"team2Name\": \"eu adipisicing\",\n    \"team2AlternateName\": \"qui do enim ad\",\n    \"team2FullName\": \"amet Lorem\",\n    \"team2CountryFlag\": \"exercitation Lorem\",\n    \"team2CountryFlagScoreboard\": \"ut ad Duis consequat\",\n    \"team2PoolName\": \"Excepteur laborum\",\n    \"team2FightByOpponent\": \"ut Lorem dolor\",\n    \"roundFriendlyName\": \"ut dolore pariatur\",\n    \"displayOrderInRound\": 51565284,\n    \"round1Id\": \"laboris voluptate\",\n    \"round2Id\": \"cillum Excepteur cupidatat Duis\",\n    \"countReferees\": -99990425,\n    \"sportId\": \"id Duis nostrud in deserunt\",\n    \"athlete1Color\": \"pariatur in reprehenderit\",\n    \"athlete2Color\": \"mollit id proident sit\",\n    \"athlete1TextColor\": \"in Duis\",\n    \"athlete2TextColor\": \"Lorem magna cupidatat\",\n    \"matName\": \"minim aliqua\",\n    \"sessionId\": \"Excepteur eiusmod enim ul\",\n    \"sessionName\": \"magna nulla velit irure\",\n    \"technicalPoints\": \"cillum aute deserunt Ut\",\n    \"uploaderFightTest\": \"id quis ad\",\n    \"technicalPointDetails\": \"in dolore officia anim\",\n    \"technicalPointTagStatus\": \"ut voluptate\",\n    \"technicalPointIds\": \"voluptate officia dolore labore magna\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"mollit\",\n    \"winnerTeam\": \"sint ullamco\",\n    \"winnerTeamAlternateName\": \"quis aliquip\",\n    \"sportEventName\": \"reprehenderit nulla\",\n    \"sportEventStartDate\": \"voluptate ad laboris enim\",\n    \"sportEventLogo\": \"voluptate amet\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"mollit minim qui exercitation\",\n    \"roundsNumber\": -53385357,\n    \"roundDuration\": 10165306,\n    \"sportAlternateName\": \"in et do\",\n    \"weightCategoryName\": \"ut ex eu dolore\",\n    \"weightCategoryAlternateName\": \"ut proident\",\n    \"weightCategoryShortName\": \"non aliqua pariatur\",\n    \"weightCategoryMaxWeight\": -65344518,\n    \"weightCategoryFullName\": \"sint dolore\",\n    \"weightCategoryAverageDuration\": 1862749,\n    \"weightCategoryColor\": \"n\",\n    \"weightCategoryCompleted\": true,\n    \"victoryTypes\": \"elit\",\n    \"victoryTypesArray\": \"in laboris aliquip\",\n    \"audienceName\": \"mollit incididunt esse sunt\",\n    \"audienceShortName\": \"ea sunt in\",\n    \"sportName\": \"Exce\",\n    \"injuryTime\": -14912754,\n    \"warnings\": true,\n    \"cautions\": 55130308,\n    \"legFouls\": true,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"ut do reprehen\",\n    \"fighter1DisplayName\": \"ut\",\n    \"fighter1FamilyName\": \"non incididunt exercitation\",\n    \"fighter1GivenName\": \"nostrud anim\",\n    \"fighter1PreferedName\": \"sed esse quis\",\n    \"fighter1DrawRank\": \"adipisicing cup\",\n    \"fighter1RobinRank\": \"fugiat\",\n    \"fighter1SeedNumber\": 28891185,\n    \"fighter1AthleteId\": \"anim sed fugiat proident\",\n    \"fighter1PersonId\": \"esse sit\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": 74118346,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"Excepteur adipisicing reprehenderit\",\n    \"fighter2DisplayName\": \"consectetur nulla\",\n    \"fighter2FamilyName\": \"laboris dolore proident\",\n    \"fighter2GivenName\": \"culpa in\",\n    \"fighter2PreferedName\": \"et ex dolor\",\n    \"fighter2DrawRank\": 46819060,\n    \"fighter2RobinRank\": -84253538,\n    \"fighter2SeedNumber\": 58501534,\n    \"fighter2AthleteId\": \"pariatur laboris velit proident\",\n    \"fighter2PersonId\": \"officia do proident\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": 68464684,\n    \"fighter2IsInjured\": false,\n    \"result\": \"voluptate quis non qui lab\",\n    \"victoryType\": \"Ut Excepteur Lorem occaeca\",\n    \"endTime\": 66713511,\n    \"endDate\": \"veniam ad eu consequat\",\n    \"expectedDateStart\": \"et consectetur\",\n    \"expectedStartDate\": \"consequat\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"dolore incididunt\",\n    \"resultText\": \"consequat irure nisi aliquip sed\",\n    \"resultTextSmall\": \"aliqua in\",\n    \"roundRenamedSmall\": \"ullamco ex c\",\n    \"parentFightNumber1\": -70189390,\n    \"parentFightNumber2\": 72221727,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": false,\n    \"isCountdown\": false,\n    \"id\": \"eu fugiat sit cupidatat\",\n    \"parentFight1Id\": \"sed dolor in\",\n    \"parentFight2Id\": \"sed tempor aliquip reprehenderit\",\n    \"fighter1\": \"ut ut\",\n    \"fighter1RankingPoint\": 9310,\n    \"fighter2\": \"veniam dolor et laboris\",\n    \"fighter2RankingPoint\": 6116,\n    \"refereeGroup\": \"e\",\n    \"sportEventTeam1Id\": \"aute consectetur est incididunt\",\n    \"sportEventTeam2Id\": \"mollit sit\",\n    \"fightMatId\": \"in ipsum\",\n    \"round\": \"ut s\",\n    \"qualifying\": false,\n    \"teamFightId\": \"in elit ea nostrud\",\n    \"status\": 21204419,\n    \"rankingCheck\": true,\n    \"technicalCheck\": true,\n    \"weight\": 77390263,\n    \"fightNumber\": 2281,\n    \"roundWeight\": 6172,\n    \"repechageWeight\": 3833,\n    \"repechageSection\": 739,\n    \"displayOrder\": 8815,\n    \"canceled\": \"in eiusmod incididunt Ut\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"nisi\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": true,\n   \"isDisqualified\": false,\n   \"isNotRanked\": true,\n   \"isInjured\": true,\n   \"isForfeit\": false,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"nostrud ullamco ex\",\n   \"sportEventWeightCategory\": \"sint\",\n   \"weight\": 120,\n   \"drawNumber\": 88,\n   \"seedNumber\": 21,\n   \"fighterWeight\": 9932351.722104117,\n   \"points\": 461,\n   \"fighterStatus\": -84581224\n  },\n  {\n   \"athleteId\": \"esse Lorem\",\n   \"sportEventWeightCategoryId\": \"consectetur id minim dolore\",\n   \"weightCategoryFullName\": \"dolore esse exercitation dolor ex\",\n   \"weightCategoryShortName\": \"sunt sit do\",\n   \"weightCategoryCountFights\": -41286092,\n   \"hasWeightCategoryBlockchainIds\": true,\n   \"weightCategoryCountReadyFighters\": 19766202,\n   \"countFights\": -51725926,\n   \"personId\": \"ullamco Duis\",\n   \"fullName\": \"nulla et ad ullamco commodo\",\n   \"preferedName\": \"enim occaecat minim sint adipisicing\",\n   \"displayName\": \"ex sint adipisicing \",\n   \"givenName\": \"do\",\n   \"familyName\": \"est\",\n   \"personPhoto\": \"magna adipisicing ad cupidatat ex\",\n   \"athenaPrintId\": \"minim\",\n   \"teamAlternateName\": \"aliquip \",\n   \"teamName\": \"consec\",\n   \"teamCountryFlag\": \"\",\n   \"sportEventTeamId\": \"magna sit in eu\",\n   \"sportEventId\": \"sit\",\n   \"drawRank\": 34791664,\n   \"robinGroup\": \"ullamco occaecat\",\n   \"robinGroupRank\": 17961451,\n   \"teamRankingPoint\": 62882619,\n   \"uwwPoint\": 48573173,\n   \"knockOutStatus\": \"occaecat exercitation\",\n   \"hasLostknockOut\": false,\n   \"completed\": -58606080,\n   \"wins\": -29236202,\n   \"losses\": 78689271,\n   \"technicalPointsFor\": 28664941,\n   \"technicalPointsAgainst\": -96599310,\n   \"technicalPointsDiff\": 55600761,\n   \"rankingPointsFor\": 75531008,\n   \"rankingPointsAgainst\": 35853431,\n   \"rankingPointsDiff\": 30825088,\n   \"winsEasy\": 32650616,\n   \"winsSuperiority\": -89006429,\n   \"rank\": 55411776,\n   \"rankRobinGroup\": 71608891,\n   \"fightByOpponent\": {\n    \"sportEventId\": \"labore qui eu sunt nostrud\",\n    \"sportEventWeightCategoryId\": \"occaecat id moll\",\n    \"fighter1Id\": \"laboris eu\",\n    \"fighter2Id\": \"eiusmod fugiat\",\n    \"team1Name\": \"dolor culpa aliqua nisi\",\n    \"team1AlternateName\": \"mollit aliqua tempor\",\n    \"team1FullName\": \"ut \",\n    \"team1CountryFlag\": \"sit id do\",\n    \"team1CountryFlagScoreboard\": \"ut quis cillum fugiat ad\",\n    \"team1PoolName\": \"voluptate ex\",\n    \"team1FightByOpponent\": \"cillum in commodo qui\",\n    \"team2Name\": \"adipisicing labore laborum dolor\",\n    \"team2AlternateName\": \"proident Duis voluptate\",\n    \"team2FullName\": \"dolor\",\n    \"team2CountryFlag\": \"enim voluptate aute\",\n    \"team2CountryFlagScoreboard\": \"laborum laboris sint dolore in\",\n    \"team2PoolName\": \"ex voluptate\",\n    \"team2FightByOpponent\": \"veniam in ut incididunt adipisicing\",\n    \"roundFriendlyName\": \"consequat dolore\",\n    \"displayOrderInRound\": 28011207,\n    \"round1Id\": \"Duis aute adipisicing Ut\",\n    \"round2Id\": \"consectetur sed proident Duis\",\n    \"countReferees\": 48136807,\n    \"sportId\": \"nisi\",\n    \"athlete1Color\": \"labore\",\n    \"athlete2Color\": \"dolor amet\",\n    \"athlete1TextColor\": \"veniam est nostrud\",\n    \"athlete2TextColor\": \"veniam nisi\",\n    \"matName\": \"ex\",\n    \"sessionId\": \"ut est\",\n    \"sessionName\": \"in tempor commodo esse\",\n    \"technicalPoints\": \"aliquip dolor\",\n    \"uploaderFightTest\": \"fugiat tempor pariatur\",\n    \"technicalPointDetails\": \"nulla pariatur in ipsum\",\n    \"technicalPointTagStatus\": \"cupidatat\",\n    \"technicalPointIds\": \"cillum\",\n    \"isCompleted\": true,\n    \"isReady\": true,\n    \"isRobinGroupFight\": true,\n    \"winnerFighter\": \"non ut commodo Lorem\",\n    \"winnerTeam\": \"est labore Ut\",\n    \"winnerTeamAlternateName\": \"commodo ut voluptate Lorem\",\n    \"sportEventName\": \"dolore offic\",\n    \"sportEventStartDate\": \"ullamco enim dolor dol\",\n    \"sportEventLogo\": \"aliquip pariatur anim dolore in\",\n    \"rankingPoint\": {\n     \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"completedDate\": \"est\",\n    \"roundsNumber\": 29200913,\n    \"roundDuration\": -6490920,\n    \"sportAlternateName\": \"aliquip nulla\",\n    \"weightCategoryName\": \"velit irure\",\n    \"weightCategoryAlternateName\": \"adipisicing\",\n    \"weightCategoryShortName\": \"in voluptate aute\",\n    \"weightCategoryMaxWeight\": -6899066,\n    \"weightCategoryFullName\": \"in exercitation enim\",\n    \"weightCategoryAverageDuration\": 39024413,\n    \"weightCategoryColor\": \"magna ipsum sint\",\n    \"weightCategoryCompleted\": false,\n    \"victoryTypes\": \"ea labore cillum adipisicing\",\n    \"victoryTypesArray\": \"qui exercitation\",\n    \"audienceName\": \"ea dolore\",\n    \"audienceShortName\": \"nisi sed amet aute fugiat\",\n    \"sportName\": \"id ut quis Ut voluptate\",\n    \"injuryTime\": -75083138,\n    \"warnings\": false,\n    \"cautions\": -59765315,\n    \"legFouls\": false,\n    \"activityTime\": false,\n    \"fighter1FullName\": \"id n\",\n    \"fighter1DisplayName\": \"elit qui quis aliquip\",\n    \"fighter1FamilyName\": \"ullamco aliquip ex\",\n    \"fighter1GivenName\": \"sed aute\",\n    \"fighter1PreferedName\": \"dolore exercitatio\",\n    \"fighter1DrawRank\": \"nisi voluptate\",\n    \"fighter1RobinRank\": \"aliqua proident sint ea ut\",\n    \"fighter1SeedNumber\": -46701374,\n    \"fighter1AthleteId\": \"adipisicing aute\",\n    \"fighter1PersonId\": \"aliquip anim incididunt consequat\",\n    \"fighter1IsSeeded\": false,\n    \"fighter1Status\": -51091803,\n    \"fighter1IsInjured\": true,\n    \"fighter2FullName\": \"mollit\",\n    \"fighter2DisplayName\": \"eiusmod ullamco\",\n    \"fighter2FamilyName\": \"aliquip irure\",\n    \"fighter2GivenName\": \"velit quis cillum\",\n    \"fighter2PreferedName\": \"velit sed Ut\",\n    \"fighter2DrawRank\": -79763529,\n    \"fighter2RobinRank\": 68089869,\n    \"fighter2SeedNumber\": -19724918,\n    \"fighter2AthleteId\": \"cupidatat ea consequat Duis\",\n    \"fighter2PersonId\": \"commodo\",\n    \"fighter2IsSeeded\": true,\n    \"fighter2Status\": -10475471,\n    \"fighter2IsInjured\": true,\n    \"result\": \"occaecat\",\n    \"victoryType\": \"velit es\",\n    \"endTime\": 29357451,\n    \"endDate\": \"Ut elit dolore ex\",\n    \"expectedDateStart\": \"ex in consequat ea deserunt\",\n    \"expectedStartDate\": \"voluptate dolor id ullamco aliqua\",\n    \"team1Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"team2Fighters\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"rankingPointNiceName\": \"velit mini\",\n    \"resultText\": \"aliquip adipisicing\",\n    \"resultTextSmall\": \"elit commodo\",\n    \"roundRenamedSmall\": \"deserunt laborum\",\n    \"parentFightNumber1\": -24097820,\n    \"parentFightNumber2\": -23520671,\n    \"fightRefereesWithRole\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"needsRefresh\": true,\n    \"isCountdown\": true,\n    \"id\": \"eiusmod veniam eu\",\n    \"parentFight1Id\": \"occaecat Duis consequat esse\",\n    \"parentFight2Id\": \"dolor esse est sed exercitation\",\n    \"fighter1\": \"aliqua enim irure\",\n    \"fighter1RankingPoint\": 6131,\n    \"fighter2\": \"velit cupidatat Excepteur\",\n    \"fighter2RankingPoint\": 7148,\n    \"refereeGroup\": \"r\",\n    \"sportEventTeam1Id\": \"in aute adipisicing\",\n    \"sportEventTeam2Id\": \"amet dolor\",\n    \"fightMatId\": \"Duis velit ullamco\",\n    \"round\": \"sed \",\n    \"qualifying\": true,\n    \"teamFightId\": \"est consectetur oc\",\n    \"status\": -87384936,\n    \"rankingCheck\": true,\n    \"technicalCheck\": false,\n    \"weight\": 69356499,\n    \"fightNumber\": 5310,\n    \"roundWeight\": 3430,\n    \"repechageWeight\": 1514,\n    \"repechageSection\": 7358,\n    \"displayOrder\": 9861,\n    \"canceled\": \"tempor\",\n    \"fightReferees\": [\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     },\n     {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n     }\n    ],\n    \"odfCode\": \"amet in\"\n   },\n   \"isCompeting\": false,\n   \"hasOpenFight\": false,\n   \"isDisqualified\": false,\n   \"isNotRanked\": false,\n   \"isInjured\": true,\n   \"isForfeit\": true,\n   \"isRobinGroupNotRanked\": false,\n   \"id\": \"minim sed in qui\",\n   \"sportEventWeightCategory\": \"ipsum fugiat nisi in\",\n   \"weight\": 304,\n   \"drawNumber\": 62,\n   \"seedNumber\": 17,\n   \"fighterWeight\": -32658387.941688046,\n   \"points\": 287,\n   \"fighterStatus\": 38003239\n  }\n ],\n \"countReadyTeams\": 69254009,\n \"countReadyFighters\": -56516809,\n \"countReadySeededFighters\": -54275131,\n \"countSeededFighters\": -64255959,\n \"countFighters\": -26137622,\n \"isRepechageSet\": false,\n \"countTeams\": 6949061,\n \"countFights\": -20706717,\n \"perfectNumber\": 841470,\n \"isRobin\": true,\n \"isRobinGrouped\": true,\n \"id\": \"minim incididunt\",\n \"averageDuration\": -40602136,\n \"color\": \"anim\",\n \"odfCode\": \"in proident nulla\",\n \"uwwRanking\": true,\n \"blockchainIds\": \"eiusmod minim ullamco laborum ut\",\n \"sessionStartDay\": 63054674,\n \"matAssignment\": -50050622,\n \"fightersUpdated\": \"do Duis nulla et\"\n}"
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/odf/get/:odfCode",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"odf",
										"get",
										":odfCode"
									],
									"variable": [
										{
											"key": "_format"
										},
										{
											"key": "odfCode"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Print bracket - multiple Weight Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"{{_format}}",
								"weight-category",
								"bracket",
								"print"
							],
							"query": [
								{
									"key": "sportEventWeightCategoryId",
									"value": "<string>",
									"description": "Filter for Weight Category"
								},
								{
									"key": "sportEventWeightCategoryId",
									"value": "<string>",
									"description": "Filter for Weight Category"
								}
							],
							"variable": [
								{
									"key": "_format"
								}
							]
						}
					},
					"response": [
						{
							"name": "Return the PDF path",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"bracket",
										"print"
									],
									"query": [
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>"
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"pdf\": \"in eu\"\n}"
						},
						{
							"name": "Returned when the entity is not authorized to say hello",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"bracket",
										"print"
									],
									"query": [
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>"
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Returned when somehting is not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/{{_format}}/weight-category/bracket/print?sportEventWeightCategoryId=<string>&sportEventWeightCategoryId=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"{{_format}}",
										"weight-category",
										"bracket",
										"print"
									],
									"query": [
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>"
										},
										{
											"key": "sportEventWeightCategoryId",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "_format"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a666d8c3-582d-41c6-bfbd-447591d57522",
				"type": "text/javascript",
				"exec": [
					"const moment = require(\"moment\")",
					"var tokenData = Array()",
					"",
					"try {",
					"    tokenData['exp'] = pm.environment.get(\"api_token_valid_until\")",
					"} catch(e) {",
					"    tokenData['exp'] = 0",
					"}",
					"",
					"if (moment(tokenData['exp']).isSameOrBefore(moment())) {",
					"    pm.sendRequest(",
					"    {",
					"          url:  pm.environment.get(\"baseUrl\") + \"/oauth/v2/token?grant_type=https://arena.uww.io/grants/api_key&client_id=\" + pm.environment.get(\"client_id\") + \"&client_secret=\" + pm.environment.get(\"client_secret\") + \"&api_key=\" + pm.environment.get(\"api_key\"), ",
					"          method: 'GET'",
					"      }, function (err, res) {",
					"            response = res.json();",
					"            pm.environment.set(\"api_token\", response.access_token);",
					"            pm.environment.set(\"api_token_valid_until\", moment().add(response.expires_in,'seconds') );",
					"      });",
					"}",
					"",
					"pm.request.headers.add({key: 'Authorization', value: 'Bearer ' + pm.environment.get('api_token')})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "748202e8-1fba-48ff-9103-601bc477b5eb",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
